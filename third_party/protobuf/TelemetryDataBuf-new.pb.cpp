// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TelemetryDataBuf-new.proto

#include "TelemetryDataBuf-new.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_TelemetryDataBuf_2dnew_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TelemetryDataBuf_2dnew_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AirAnalysis;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TelemetryDataBuf_2dnew_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AvoidanceData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TelemetryDataBuf_2dnew_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BatteryStateInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TelemetryDataBuf_2dnew_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BreakPoint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TelemetryDataBuf_2dnew_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CameraState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TelemetryDataBuf_2dnew_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HangarPoint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TelemetryDataBuf_2dnew_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HmsAlarmData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TelemetryDataBuf_2dnew_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ParachuteState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TelemetryDataBuf_2dnew_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PointAction;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TelemetryDataBuf_2dnew_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PtzState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TelemetryDataBuf_2dnew_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SignalInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TelemetryDataBuf_2dnew_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SprayFireState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TelemetryDataBuf_2dnew_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StickState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TelemetryDataBuf_2dnew_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TelemetryData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TelemetryDataBuf_2dnew_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_BatteryState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TelemetryDataBuf_2dnew_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FlightControllerState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TelemetryDataBuf_2dnew_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MissionState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TelemetryDataBuf_2dnew_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_NormalModel;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TelemetryDataBuf_2dnew_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PointData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TelemetryDataBuf_2dnew_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SurroundModel;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TelemetryDataBuf_2dnew_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_PayloadState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TelemetryDataBuf_2dnew_2eproto ::google::protobuf::internal::SCCInfo<7> scc_info_UavState;
}  // namespace protobuf_TelemetryDataBuf_2dnew_2eproto
class TelemetryDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetryData>
      _instance;
} _TelemetryData_default_instance_;
class TelemetryListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetryList>
      _instance;
} _TelemetryList_default_instance_;
class SignalInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignalInfo>
      _instance;
} _SignalInfo_default_instance_;
class SignalListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignalList>
      _instance;
} _SignalList_default_instance_;
class UavStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UavState>
      _instance;
} _UavState_default_instance_;
class FlightControllerStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlightControllerState>
      _instance;
} _FlightControllerState_default_instance_;
class BatteryStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BatteryState>
      _instance;
} _BatteryState_default_instance_;
class BatteryStateInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BatteryStateInfo>
      _instance;
} _BatteryStateInfo_default_instance_;
class PtzStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PtzState>
      _instance;
} _PtzState_default_instance_;
class CameraStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CameraState>
      _instance;
} _CameraState_default_instance_;
class MissionStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MissionState>
      _instance;
} _MissionState_default_instance_;
class BreakPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BreakPoint>
      _instance;
} _BreakPoint_default_instance_;
class AvoidanceDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AvoidanceData>
      _instance;
} _AvoidanceData_default_instance_;
class HmsAlarmDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HmsAlarmData>
      _instance;
} _HmsAlarmData_default_instance_;
class UavStateListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UavStateList>
      _instance;
} _UavStateList_default_instance_;
class PlanLineDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlanLineData>
      _instance;
} _PlanLineData_default_instance_;
class PointDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PointData>
      _instance;
} _PointData_default_instance_;
class PointActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PointAction>
      _instance;
} _PointAction_default_instance_;
class HangarPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HangarPoint>
      _instance;
} _HangarPoint_default_instance_;
class NormalModelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NormalModel>
      _instance;
} _NormalModel_default_instance_;
class SurroundModelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SurroundModel>
      _instance;
} _SurroundModel_default_instance_;
class UavInitInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UavInitInfo>
      _instance;
} _UavInitInfo_default_instance_;
class PayloadStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PayloadState>
      _instance;
} _PayloadState_default_instance_;
class PayloadStateListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PayloadStateList>
      _instance;
} _PayloadStateList_default_instance_;
class StickStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StickState>
      _instance;
} _StickState_default_instance_;
class ParachuteStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ParachuteState>
      _instance;
} _ParachuteState_default_instance_;
class SprayFireStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SprayFireState>
      _instance;
} _SprayFireState_default_instance_;
class AirAnalysisDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AirAnalysis>
      _instance;
} _AirAnalysis_default_instance_;
namespace protobuf_TelemetryDataBuf_2dnew_2eproto {
static void InitDefaultsTelemetryData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TelemetryData_default_instance_;
    new (ptr) ::TelemetryData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TelemetryData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TelemetryData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTelemetryData}, {}};

static void InitDefaultsTelemetryList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TelemetryList_default_instance_;
    new (ptr) ::TelemetryList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TelemetryList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TelemetryList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTelemetryList}, {
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_TelemetryData.base,}};

static void InitDefaultsSignalInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SignalInfo_default_instance_;
    new (ptr) ::SignalInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SignalInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SignalInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSignalInfo}, {}};

static void InitDefaultsSignalList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SignalList_default_instance_;
    new (ptr) ::SignalList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SignalList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SignalList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSignalList}, {
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_SignalInfo.base,}};

static void InitDefaultsUavState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UavState_default_instance_;
    new (ptr) ::UavState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UavState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_UavState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsUavState}, {
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_FlightControllerState.base,
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_BatteryState.base,
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_PtzState.base,
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_CameraState.base,
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_MissionState.base,
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_AvoidanceData.base,
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_HmsAlarmData.base,}};

static void InitDefaultsFlightControllerState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FlightControllerState_default_instance_;
    new (ptr) ::FlightControllerState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FlightControllerState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FlightControllerState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFlightControllerState}, {
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_PointData.base,}};

static void InitDefaultsBatteryState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BatteryState_default_instance_;
    new (ptr) ::BatteryState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BatteryState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BatteryState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBatteryState}, {
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_BatteryStateInfo.base,}};

static void InitDefaultsBatteryStateInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BatteryStateInfo_default_instance_;
    new (ptr) ::BatteryStateInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BatteryStateInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BatteryStateInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBatteryStateInfo}, {}};

static void InitDefaultsPtzState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PtzState_default_instance_;
    new (ptr) ::PtzState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PtzState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PtzState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPtzState}, {}};

static void InitDefaultsCameraState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CameraState_default_instance_;
    new (ptr) ::CameraState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CameraState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CameraState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCameraState}, {}};

static void InitDefaultsMissionState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MissionState_default_instance_;
    new (ptr) ::MissionState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MissionState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MissionState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMissionState}, {
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_BreakPoint.base,}};

static void InitDefaultsBreakPoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BreakPoint_default_instance_;
    new (ptr) ::BreakPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BreakPoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BreakPoint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBreakPoint}, {}};

static void InitDefaultsAvoidanceData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AvoidanceData_default_instance_;
    new (ptr) ::AvoidanceData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AvoidanceData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AvoidanceData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAvoidanceData}, {}};

static void InitDefaultsHmsAlarmData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HmsAlarmData_default_instance_;
    new (ptr) ::HmsAlarmData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HmsAlarmData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HmsAlarmData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHmsAlarmData}, {}};

static void InitDefaultsUavStateList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UavStateList_default_instance_;
    new (ptr) ::UavStateList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UavStateList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UavStateList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUavStateList}, {
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_UavState.base,}};

static void InitDefaultsPlanLineData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlanLineData_default_instance_;
    new (ptr) ::PlanLineData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlanLineData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_PlanLineData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsPlanLineData}, {
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_PointData.base,
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_HangarPoint.base,
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_NormalModel.base,
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_SurroundModel.base,}};

static void InitDefaultsPointData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PointData_default_instance_;
    new (ptr) ::PointData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PointData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PointData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPointData}, {
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_PointAction.base,}};

static void InitDefaultsPointAction() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PointAction_default_instance_;
    new (ptr) ::PointAction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PointAction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PointAction =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPointAction}, {}};

static void InitDefaultsHangarPoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HangarPoint_default_instance_;
    new (ptr) ::HangarPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HangarPoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HangarPoint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHangarPoint}, {}};

static void InitDefaultsNormalModel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NormalModel_default_instance_;
    new (ptr) ::NormalModel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NormalModel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NormalModel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNormalModel}, {
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_PointData.base,}};

static void InitDefaultsSurroundModel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SurroundModel_default_instance_;
    new (ptr) ::SurroundModel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SurroundModel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SurroundModel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSurroundModel}, {
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_PointData.base,}};

static void InitDefaultsUavInitInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UavInitInfo_default_instance_;
    new (ptr) ::UavInitInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UavInitInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UavInitInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUavInitInfo}, {}};

static void InitDefaultsPayloadState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PayloadState_default_instance_;
    new (ptr) ::PayloadState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PayloadState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_PayloadState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsPayloadState}, {
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_StickState.base,
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_ParachuteState.base,
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_SprayFireState.base,
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_AirAnalysis.base,}};

static void InitDefaultsPayloadStateList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PayloadStateList_default_instance_;
    new (ptr) ::PayloadStateList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PayloadStateList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PayloadStateList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPayloadStateList}, {
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_PayloadState.base,}};

static void InitDefaultsStickState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StickState_default_instance_;
    new (ptr) ::StickState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::StickState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StickState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStickState}, {}};

static void InitDefaultsParachuteState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ParachuteState_default_instance_;
    new (ptr) ::ParachuteState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ParachuteState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ParachuteState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsParachuteState}, {}};

static void InitDefaultsSprayFireState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SprayFireState_default_instance_;
    new (ptr) ::SprayFireState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SprayFireState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SprayFireState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSprayFireState}, {}};

static void InitDefaultsAirAnalysis() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AirAnalysis_default_instance_;
    new (ptr) ::AirAnalysis();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AirAnalysis::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AirAnalysis =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAirAnalysis}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TelemetryData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TelemetryList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SignalInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SignalList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UavState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FlightControllerState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BatteryState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BatteryStateInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PtzState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CameraState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MissionState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BreakPoint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AvoidanceData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HmsAlarmData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UavStateList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlanLineData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PointData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PointAction.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HangarPoint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NormalModel.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SurroundModel.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UavInitInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PayloadState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PayloadStateList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StickState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ParachuteState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SprayFireState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AirAnalysis.base);
}

::google::protobuf::Metadata file_level_metadata[28];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, lng_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, altitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, ultrasonic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, roll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, airspeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, ptpitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, ptroll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, ptyaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, zoomfactor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, boxsn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, batterypower_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, satellitecount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, taskid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, rtklng_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, rtklat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, rtkhfsl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, rtkpositioninfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, airflytimes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, airflydistance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, uavsn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, uavmodel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, homerange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, flightmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, targetdistance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, predictflytime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, ultrasonicmax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, ultrasonicmin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, xvelocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, yvelocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, zvelocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, boxname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, predictflytimes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryData, predictgohomebattery_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TelemetryList, telemetrylist_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, mcc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, mnc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, cellid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, pcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, tac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, arfcn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, band_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, nr_dl_bandwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, rsrp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, rsrq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, sinr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, tx_power_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, srxlev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, cqi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, earfcn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, freq_band_ind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, ul_bandwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, dl_bandwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, is_tdd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, rssi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, duplex_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, lng_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, boxstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, isp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, tempmax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, prx_rsrp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, drx_rsrp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, rx2_rsrp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, rx3_rsrp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, box_sn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, sim_use_seat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, networkmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalInfo, delaytime_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SignalList, signalinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UavState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UavState, flightcontrollerstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UavState, batterystate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UavState, ptzstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UavState, camerastate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UavState, missionstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UavState, boxsn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UavState, avoidancedata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UavState, hmsalarmdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UavState, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FlightControllerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FlightControllerState, satellitecount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FlightControllerState, gpssignallevel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FlightControllerState, flightmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FlightControllerState, flightstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FlightControllerState, startpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FlightControllerState, homepoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FlightControllerState, homeheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FlightControllerState, safeline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FlightControllerState, devicestatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FlightControllerState, uwbnodecount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FlightControllerState, rcmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FlightControllerState, isemergencybrakeing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FlightControllerState, outflyareaflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FlightControllerState, innoflyareaflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FlightControllerState, targetpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FlightControllerState, batterygohome_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FlightControllerState, autolowgohome_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::FlightControllerState, rcconnected_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BatteryState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BatteryState, batterynum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BatteryState, batterypower_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BatteryState, batteryvoltage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BatteryState, firstbatteryinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BatteryState, secondbatteryinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BatteryStateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BatteryStateInfo, isbatteryembed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BatteryStateInfo, batterycapacitypercent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BatteryStateInfo, currentvoltage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BatteryStateInfo, currentelectric_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BatteryStateInfo, fullcapacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BatteryStateInfo, remainedcapacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BatteryStateInfo, batterytemperature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BatteryStateInfo, cellcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BatteryStateInfo, batsohstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BatteryStateInfo, sop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BatteryStateInfo, heatstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BatteryStateInfo, socstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BatteryStateInfo, selfcheckerror_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PtzState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PtzState, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PtzState, roll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PtzState, yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PtzState, gimbalmode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CameraState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CameraState, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CameraState, isrecording_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CameraState, recordduration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CameraState, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CameraState, camera_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CameraState, zoomfactor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CameraState, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CameraState, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CameraState, framerate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CameraState, bitstream_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CameraState, pointthermometrying_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CameraState, areathermometrying_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CameraState, laserranging_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CameraState, storepercent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CameraState, totalphoto_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CameraState, remainedphoto_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CameraState, sendphotooverflag_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MissionState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MissionState, ispause_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MissionState, targetwaypointindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MissionState, iswaypointfinished_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MissionState, pushvideo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MissionState, lock4g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MissionState, boxmodel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MissionState, mapplay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MissionState, loseaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MissionState, ispointcontrol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MissionState, isuwblanding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MissionState, ispushvideoing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MissionState, isdlanding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MissionState, perceptionflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MissionState, ispositioncontrol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MissionState, sendimgrtp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MissionState, breakpoint_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BreakPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BreakPoint, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BreakPoint, point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BreakPoint, lng_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BreakPoint, lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BreakPoint, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BreakPoint, taskid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AvoidanceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AvoidanceData, downhealth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AvoidanceData, down_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AvoidanceData, fronthealth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AvoidanceData, front_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AvoidanceData, righthealth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AvoidanceData, right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AvoidanceData, backhealth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AvoidanceData, back_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AvoidanceData, lefthealth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AvoidanceData, left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AvoidanceData, uphealth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AvoidanceData, up_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AvoidanceData, avoidanceenablestatusdown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AvoidanceData, avoidanceenablestatusup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AvoidanceData, avoidanceenablestatushorizontal_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HmsAlarmData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HmsAlarmData, alarmid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HmsAlarmData, reportlevel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HmsAlarmData, alarmmssinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UavStateList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UavStateList, uavstates_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlanLineData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlanLineData, finishedaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlanLineData, maxspeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlanLineData, autospeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlanLineData, points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlanLineData, loseaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlanLineData, homeheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlanLineData, issaveenergymode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlanLineData, takepoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlanLineData, landpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlanLineData, interests_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlanLineData, normalmodel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlanLineData, surroundmodel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlanLineData, takeoffpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlanLineData, securityheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PlanLineData, templateid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PointData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PointData, lng_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PointData, lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PointData, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PointData, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PointData, actions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PointData, flightpathmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PointData, dampingdistance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PointData, safegohomeflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PointData, headingmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PointData, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PointData, interestindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PointData, groupindex_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PointAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PointAction, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PointAction, param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PointAction, waittime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PointAction, speakinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HangarPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HangarPoint, hangarid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HangarPoint, hangarlng_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HangarPoint, hangarlat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HangarPoint, alternatelng_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HangarPoint, alternatelat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HangarPoint, mediauploadflag_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NormalModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NormalModel, area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NormalModel, serviceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NormalModel, cameraid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NormalModel, ismodeling_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NormalModel, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NormalModel, hoverlap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NormalModel, voverlap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NormalModel, mirror_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NormalModel, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NormalModel, flightpathmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NormalModel, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NormalModel, pitch_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SurroundModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SurroundModel, area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SurroundModel, serviceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SurroundModel, cameraid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SurroundModel, ismodeling_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SurroundModel, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SurroundModel, boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SurroundModel, exposurecount_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UavInitInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UavInitInfo, uavmodel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UavInitInfo, uavsn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UavInitInfo, uavversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UavInitInfo, ptmodel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UavInitInfo, ptversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UavInitInfo, ptposition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UavInitInfo, moduleversion_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PayloadState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PayloadState, stickstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PayloadState, parachutestate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PayloadState, sprayfirestate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PayloadState, airanalysis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PayloadState, boxsn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PayloadState, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PayloadStateList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PayloadStateList, payloadstate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StickState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StickState, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StickState, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StickState, stickid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StickState, openaiflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StickState, openaiphotoreport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StickState, modelsn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StickState, prob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StickState, tags_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ParachuteState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ParachuteState, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ParachuteState, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ParachuteState, connectstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ParachuteState, isopenflag_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SprayFireState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SprayFireState, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SprayFireState, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SprayFireState, spraystate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SprayFireState, fuelstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SprayFireState, ignitionstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SprayFireState, lockstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SprayFireState, gear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SprayFireState, laserstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SprayFireState, pressstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SprayFireState, firetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SprayFireState, extendrc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SprayFireState, claspstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SprayFireState, yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SprayFireState, pitch_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AirAnalysis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AirAnalysis, sn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AirAnalysis, sat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AirAnalysis, lng_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AirAnalysis, lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AirAnalysis, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AirAnalysis, pm25_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AirAnalysis, pm10_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AirAnalysis, so2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AirAnalysis, co_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AirAnalysis, no2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AirAnalysis, o3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AirAnalysis, temp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AirAnalysis, hum_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TelemetryData)},
  { 43, -1, sizeof(::TelemetryList)},
  { 49, -1, sizeof(::SignalInfo)},
  { 91, -1, sizeof(::SignalList)},
  { 97, -1, sizeof(::UavState)},
  { 111, -1, sizeof(::FlightControllerState)},
  { 134, -1, sizeof(::BatteryState)},
  { 144, -1, sizeof(::BatteryStateInfo)},
  { 162, -1, sizeof(::PtzState)},
  { 171, -1, sizeof(::CameraState)},
  { 193, -1, sizeof(::MissionState)},
  { 214, -1, sizeof(::BreakPoint)},
  { 225, -1, sizeof(::AvoidanceData)},
  { 245, -1, sizeof(::HmsAlarmData)},
  { 253, -1, sizeof(::UavStateList)},
  { 259, -1, sizeof(::PlanLineData)},
  { 279, -1, sizeof(::PointData)},
  { 296, -1, sizeof(::PointAction)},
  { 305, -1, sizeof(::HangarPoint)},
  { 316, -1, sizeof(::NormalModel)},
  { 333, -1, sizeof(::SurroundModel)},
  { 345, -1, sizeof(::UavInitInfo)},
  { 357, -1, sizeof(::PayloadState)},
  { 368, -1, sizeof(::PayloadStateList)},
  { 374, -1, sizeof(::StickState)},
  { 387, -1, sizeof(::ParachuteState)},
  { 396, -1, sizeof(::SprayFireState)},
  { 415, -1, sizeof(::AirAnalysis)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TelemetryData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TelemetryList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SignalInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SignalList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_UavState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_FlightControllerState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_BatteryState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_BatteryStateInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PtzState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CameraState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_MissionState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_BreakPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_AvoidanceData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_HmsAlarmData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_UavStateList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PlanLineData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PointData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PointAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_HangarPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_NormalModel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SurroundModel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_UavInitInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PayloadState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PayloadStateList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_StickState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ParachuteState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SprayFireState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_AirAnalysis_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "TelemetryDataBuf-new.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 28);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\032TelemetryDataBuf-new.proto\"\337\005\n\rTelemet"
      "ryData\022\013\n\003lng\030\001 \001(\001\022\013\n\003lat\030\002 \001(\001\022\020\n\010alti"
      "tude\030\003 \001(\002\022\022\n\nultrasonic\030\004 \001(\002\022\r\n\005pitch\030"
      "\005 \001(\002\022\014\n\004roll\030\006 \001(\002\022\013\n\003yaw\030\007 \001(\002\022\020\n\010airs"
      "peed\030\010 \001(\002\022\020\n\010velocity\030\t \001(\002\022\021\n\ttimestam"
      "p\030\n \001(\004\022\017\n\007ptpitch\030\013 \001(\002\022\016\n\006ptroll\030\014 \001(\002"
      "\022\r\n\005ptyaw\030\r \001(\002\022\022\n\nzoomfactor\030\016 \001(\002\022\r\n\005b"
      "oxSn\030\017 \001(\t\022\024\n\014batteryPower\030\020 \001(\t\022\026\n\016sate"
      "lliteCount\030\021 \001(\r\022\016\n\006taskId\030\022 \001(\004\022\016\n\006rtkL"
      "ng\030\023 \001(\001\022\016\n\006rtkLat\030\024 \001(\001\022\017\n\007rtkHFSL\030\025 \001("
      "\002\022\027\n\017rtkPositionInfo\030\026 \001(\r\022\023\n\013airFlyTime"
      "s\030\027 \001(\r\022\026\n\016airFlyDistance\030\030 \001(\002\022\r\n\005uavSn"
      "\030\031 \001(\t\022\020\n\010uavModel\030\032 \001(\t\022\021\n\thomeRange\030\033 "
      "\001(\002\022\022\n\nflightMode\030\034 \001(\r\022\026\n\016targetDistanc"
      "e\030\035 \001(\002\022\026\n\016predictFlyTime\030\036 \001(\r\022\025\n\rultra"
      "sonicMax\030\037 \001(\002\022\025\n\rultrasonicMin\030  \001(\002\022\021\n"
      "\txVelocity\030! \001(\002\022\021\n\tyVelocity\030\" \001(\002\022\021\n\tz"
      "Velocity\030# \001(\002\022\017\n\007boxName\030$ \001(\t\022\027\n\017predi"
      "ctFlyTimes\030% \001(\r\022\034\n\024predictGohomeBattery"
      "\030& \001(\r\"6\n\rTelemetryList\022%\n\rtelemetryList"
      "\030\001 \003(\0132\016.TelemetryData\"\367\004\n\nSignalInfo\022\014\n"
      "\004mode\030\001 \001(\t\022\013\n\003mcc\030\002 \001(\t\022\013\n\003mnc\030\003 \001(\t\022\016\n"
      "\006cellid\030\004 \001(\t\022\014\n\004pcid\030\005 \001(\t\022\013\n\003tac\030\006 \001(\t"
      "\022\r\n\005arfcn\030\007 \001(\t\022\014\n\004band\030\010 \001(\t\022\027\n\017nr_dl_b"
      "andwidth\030\t \001(\t\022\014\n\004rsrp\030\n \001(\t\022\014\n\004rsrq\030\013 \001"
      "(\t\022\014\n\004sinr\030\014 \001(\t\022\020\n\010tx_power\030\r \001(\t\022\016\n\006sr"
      "xlev\030\016 \001(\t\022\013\n\003cqi\030\017 \001(\t\022\016\n\006earfcn\030\020 \001(\t\022"
      "\025\n\rfreq_band_ind\030\021 \001(\t\022\024\n\014ul_bandwidth\030\022"
      " \001(\t\022\024\n\014dl_bandwidth\030\023 \001(\t\022\016\n\006is_tdd\030\024 \001"
      "(\t\022\014\n\004rssi\030\025 \001(\t\022\023\n\013duplex_mode\030\026 \001(\t\022\013\n"
      "\003lng\030\027 \001(\001\022\013\n\003lat\030\030 \001(\001\022\016\n\006height\030\031 \001(\002\022"
      "\021\n\ttimestamp\030\032 \001(\r\022\020\n\010boxstate\030\033 \001(\r\022\013\n\003"
      "isp\030\034 \001(\t\022\017\n\007tempMax\030\035 \001(\005\022\020\n\010prx_rsrp\030\036"
      " \001(\t\022\020\n\010drx_rsrp\030\037 \001(\t\022\020\n\010rx2_rsrp\030  \001(\t"
      "\022\020\n\010rx3_rsrp\030! \001(\t\022\016\n\006box_sn\030\" \001(\t\022\024\n\014si"
      "m_use_seat\030# \001(\r\022\023\n\013networkMode\030$ \001(\r\022\021\n"
      "\tdelayTime\030% \001(\r\"-\n\nSignalList\022\037\n\nsignal"
      "Info\030\001 \003(\0132\013.SignalInfo\"\271\002\n\010UavState\0225\n\025"
      "flightControllerState\030\001 \001(\0132\026.FlightCont"
      "rollerState\022#\n\014batteryState\030\002 \001(\0132\r.Batt"
      "eryState\022\033\n\010ptzState\030\003 \001(\0132\t.PtzState\022!\n"
      "\013cameraState\030\004 \001(\0132\014.CameraState\022#\n\014miss"
      "ionState\030\005 \001(\0132\r.MissionState\022\r\n\005boxSn\030\006"
      " \001(\t\022%\n\ravoidanceData\030\007 \001(\0132\016.AvoidanceD"
      "ata\022#\n\014hmsAlarmData\030\010 \003(\0132\r.HmsAlarmData"
      "\022\021\n\ttimestamp\030\t \001(\004\"\304\003\n\025FlightController"
      "State\022\026\n\016satelliteCount\030\001 \001(\r\022\026\n\016gpsSign"
      "alLevel\030\002 \001(\r\022\022\n\nflightMode\030\003 \001(\r\022\024\n\014fli"
      "ghtStatus\030\004 \001(\r\022\036\n\nstartPoint\030\005 \001(\0132\n.Po"
      "intData\022\035\n\thomePoint\030\006 \001(\0132\n.PointData\022\022"
      "\n\nhomeHeight\030\007 \001(\005\022\020\n\010safeLine\030\010 \001(\r\022\024\n\014"
      "deviceStatus\030\t \001(\r\022\024\n\014uwbNodeCount\030\n \001(\r"
      "\022\016\n\006rcMode\030\013 \001(\t\022\033\n\023isEmergencyBrakeing\030"
      "\014 \001(\r\022\026\n\016outFlyAreaFlag\030\r \001(\r\022\027\n\017inNoFly"
      "AreaFlag\030\016 \001(\r\022\037\n\013targetPoint\030\017 \001(\0132\n.Po"
      "intData\022\025\n\rbatteryGohome\030\020 \001(\r\022\025\n\rautoLo"
      "wGohome\030\021 \001(\r\022\023\n\013rcConnected\030\022 \001(\r\"\253\001\n\014B"
      "atteryState\022\022\n\nbatteryNum\030\001 \001(\r\022\024\n\014batte"
      "ryPower\030\002 \001(\t\022\026\n\016batteryVoltage\030\003 \001(\t\022+\n"
      "\020firstBatteryInfo\030\004 \001(\0132\021.BatteryStateIn"
      "fo\022,\n\021secondBatteryInfo\030\005 \001(\0132\021.BatteryS"
      "tateInfo\"\271\002\n\020BatteryStateInfo\022\026\n\016isBatte"
      "ryEmbed\030\001 \001(\r\022\036\n\026batteryCapacityPercent\030"
      "\002 \001(\r\022\026\n\016currentVoltage\030\003 \001(\005\022\027\n\017current"
      "Electric\030\004 \001(\005\022\024\n\014fullCapacity\030\005 \001(\r\022\030\n\020"
      "remainedCapacity\030\006 \001(\r\022\032\n\022batteryTempera"
      "ture\030\007 \001(\002\022\021\n\tcellCount\030\010 \001(\r\022\023\n\013batSOHS"
      "tate\030\t \001(\r\022\013\n\003sop\030\n \001(\r\022\021\n\theatState\030\013 \001"
      "(\r\022\020\n\010socState\030\014 \001(\r\022\026\n\016selfCheckError\030\r"
      " \001(\r\"H\n\010PtzState\022\r\n\005pitch\030\001 \001(\002\022\014\n\004roll\030"
      "\002 \001(\002\022\013\n\003yaw\030\003 \001(\002\022\022\n\ngimbalMode\030\004 \001(\r\"\354"
      "\002\n\013CameraState\022\014\n\004mode\030\001 \001(\r\022\023\n\013isRecord"
      "ing\030\002 \001(\r\022\026\n\016recordDuration\030\003 \001(\r\022\016\n\006sou"
      "rce\030\004 \001(\r\022\016\n\006camera\030\005 \001(\r\022\022\n\nzoomfactor\030"
      "\006 \001(\002\022\r\n\005width\030\007 \001(\r\022\016\n\006height\030\010 \001(\r\022\021\n\t"
      "frameRate\030\t \001(\r\022\021\n\tbitstream\030\n \001(\r\022\033\n\023po"
      "intThermometrying\030\013 \001(\r\022\032\n\022areaThermomet"
      "rying\030\014 \001(\r\022\024\n\014laserRanging\030\r \001(\r\022\024\n\014sto"
      "rePercent\030\016 \001(\002\022\022\n\ntotalPhoto\030\017 \001(\r\022\025\n\rr"
      "emainedPhoto\030\020 \001(\r\022\031\n\021sendPhotoOverFlag\030"
      "\021 \001(\r\"\364\002\n\014MissionState\022\017\n\007isPause\030\001 \001(\r\022"
      "\033\n\023targetWaypointIndex\030\002 \001(\r\022\032\n\022isWaypoi"
      "ntFinished\030\003 \001(\r\022\021\n\tpushVideo\030\004 \001(\r\022\016\n\006l"
      "ock4g\030\005 \001(\r\022\020\n\010boxModel\030\006 \001(\r\022\017\n\007mapPlay"
      "\030\007 \001(\r\022\022\n\nloseAction\030\010 \001(\r\022\026\n\016isPointCon"
      "trol\030\t \001(\r\022\024\n\014isUwbLanding\030\n \001(\r\022\026\n\016isPu"
      "shVideoing\030\013 \001(\r\022\022\n\nisDLanding\030\014 \001(\r\022\026\n\016"
      "perceptionFlag\030\r \001(\r\022\031\n\021isPositionContro"
      "l\030\016 \001(\r\022\022\n\nsendImgRtp\030\017 \001(\r\022\037\n\nbreakPoin"
      "t\030\020 \001(\0132\013.BreakPoint\"e\n\nBreakPoint\022\016\n\006st"
      "atus\030\001 \001(\r\022\r\n\005point\030\002 \001(\r\022\013\n\003lng\030\003 \001(\001\022\013"
      "\n\003lat\030\004 \001(\001\022\016\n\006height\030\005 \001(\002\022\016\n\006taskId\030\006 "
      "\001(\004\"\310\002\n\rAvoidanceData\022\022\n\ndownHealth\030\001 \001("
      "\r\022\014\n\004down\030\002 \001(\002\022\023\n\013frontHealth\030\003 \001(\r\022\r\n\005"
      "front\030\004 \001(\002\022\023\n\013rightHealth\030\005 \001(\r\022\r\n\005righ"
      "t\030\006 \001(\002\022\022\n\nbackHealth\030\007 \001(\r\022\014\n\004back\030\010 \001("
      "\002\022\022\n\nleftHealth\030\t \001(\r\022\014\n\004left\030\n \001(\002\022\020\n\010u"
      "pHealth\030\013 \001(\r\022\n\n\002up\030\014 \001(\002\022!\n\031avoidanceEn"
      "ableStatusDown\030\r \001(\r\022\037\n\027avoidanceEnableS"
      "tatusUp\030\016 \001(\r\022\'\n\037avoidanceEnableStatusHo"
      "rizontal\030\017 \001(\r\"J\n\014HmsAlarmData\022\017\n\007alarmI"
      "d\030\001 \001(\r\022\023\n\013reportLevel\030\002 \001(\r\022\024\n\014alarmMss"
      "Info\030\003 \001(\t\",\n\014UavStateList\022\034\n\tuavStates\030"
      "\001 \003(\0132\t.UavState\"\242\003\n\014PlanLineData\022\026\n\016fin"
      "ishedAction\030\001 \001(\r\022\020\n\010maxSpeed\030\002 \001(\002\022\021\n\ta"
      "utoSpeed\030\003 \001(\002\022\032\n\006points\030\004 \003(\0132\n.PointDa"
      "ta\022\022\n\nloseAction\030\005 \001(\r\022\022\n\nhomeHeight\030\006 \001"
      "(\r\022\030\n\020isSaveEnergyMode\030\007 \001(\r\022\037\n\ttakePoin"
      "t\030\010 \001(\0132\014.HangarPoint\022\037\n\tlandPoint\030\t \001(\013"
      "2\014.HangarPoint\022\035\n\tinterests\030\n \003(\0132\n.Poin"
      "tData\022!\n\013normalModel\030\013 \001(\0132\014.NormalModel"
      "\022%\n\rsurroundModel\030\014 \001(\0132\016.SurroundModel\022"
      " \n\014takeOffPoint\030\r \001(\0132\n.PointData\022\026\n\016sec"
      "urityHeight\030\016 \001(\r\022\022\n\ntemplateId\030\017 \001(\r\"\375\001"
      "\n\tPointData\022\013\n\003lng\030\001 \001(\001\022\013\n\003lat\030\002 \001(\001\022\016\n"
      "\006height\030\003 \001(\002\022\r\n\005speed\030\004 \001(\002\022\035\n\007actions\030"
      "\005 \003(\0132\014.PointAction\022\026\n\016flightPathMode\030\006 "
      "\001(\r\022\027\n\017dampingDistance\030\007 \001(\002\022\026\n\016safeGoho"
      "meFlag\030\010 \001(\r\022\023\n\013headingMode\030\t \001(\r\022\017\n\007hea"
      "ding\030\n \001(\002\022\025\n\rinterestIndex\030\013 \001(\005\022\022\n\ngro"
      "upIndex\030\014 \001(\r\"O\n\013PointAction\022\014\n\004type\030\001 \001"
      "(\r\022\r\n\005param\030\002 \001(\002\022\020\n\010waitTime\030\003 \001(\005\022\021\n\ts"
      "peakInfo\030\004 \001(\t\"\212\001\n\013HangarPoint\022\020\n\010hangar"
      "Id\030\001 \001(\t\022\021\n\thangarLng\030\002 \001(\001\022\021\n\thangarLat"
      "\030\003 \001(\001\022\024\n\014alternateLng\030\004 \001(\001\022\024\n\014alternat"
      "eLat\030\005 \001(\001\022\027\n\017mediaUploadFlag\030\006 \001(\r\"\354\001\n\013"
      "NormalModel\022\030\n\004area\030\001 \003(\0132\n.PointData\022\021\n"
      "\tserviceId\030\002 \001(\r\022\020\n\010cameraId\030\003 \001(\r\022\022\n\nis"
      "Modeling\030\004 \001(\r\022\014\n\004mode\030\005 \001(\r\022\020\n\010hOverlap"
      "\030\006 \001(\r\022\020\n\010vOverlap\030\007 \001(\r\022\016\n\006mirror\030\010 \001(\r"
      "\022\021\n\tdirection\030\t \001(\r\022\026\n\016flightPathMode\030\n "
      "\001(\r\022\016\n\006height\030\013 \001(\r\022\r\n\005pitch\030\014 \001(\r\"\247\001\n\rS"
      "urroundModel\022\030\n\004area\030\001 \003(\0132\n.PointData\022\021"
      "\n\tserviceId\030\002 \001(\r\022\020\n\010cameraId\030\003 \001(\r\022\022\n\ni"
      "sModeling\030\004 \001(\r\022\016\n\006height\030\005 \001(\r\022\034\n\010bound"
      "ary\030\006 \003(\0132\n.PointData\022\025\n\rexposureCount\030\007"
      " \001(\r\"\221\001\n\013UavInitInfo\022\020\n\010uavModel\030\001 \001(\t\022\r"
      "\n\005uavSn\030\002 \001(\t\022\022\n\nuavVersion\030\003 \001(\t\022\017\n\007ptM"
      "odel\030\004 \001(\t\022\021\n\tptVersion\030\005 \001(\t\022\022\n\nptPosit"
      "ion\030\006 \001(\r\022\025\n\rmoduleVersion\030\007 \001(\t\"\306\001\n\014Pay"
      "loadState\022\037\n\nstickState\030\001 \001(\0132\013.StickSta"
      "te\022\'\n\016parachuteState\030\002 \001(\0132\017.ParachuteSt"
      "ate\022\'\n\016sprayFireState\030\003 \001(\0132\017.SprayFireS"
      "tate\022!\n\013airAnalysis\030\004 \001(\0132\014.AirAnalysis\022"
      "\r\n\005boxSn\030\005 \001(\t\022\021\n\ttimestamp\030\006 \001(\004\"7\n\020Pay"
      "loadStateList\022#\n\014payloadState\030\001 \003(\0132\r.Pa"
      "yloadState\"\227\001\n\nStickState\022\n\n\002id\030\001 \001(\r\022\020\n"
      "\010position\030\002 \001(\r\022\017\n\007stickId\030\003 \001(\t\022\022\n\nopen"
      "AiFlag\030\004 \001(\r\022\031\n\021openAiPhotoReport\030\005 \001(\r\022"
      "\017\n\007modelSn\030\006 \001(\t\022\014\n\004prob\030\007 \001(\002\022\014\n\004tags\030\010"
      " \003(\t\"Y\n\016ParachuteState\022\n\n\002id\030\001 \001(\r\022\020\n\010po"
      "sition\030\002 \001(\r\022\025\n\rconnectStatus\030\003 \001(\r\022\022\n\ni"
      "sOpenFlag\030\004 \001(\r\"\211\002\n\016SprayFireState\022\n\n\002id"
      "\030\001 \001(\r\022\020\n\010position\030\002 \001(\r\022\022\n\nsprayState\030\003"
      " \001(\r\022\021\n\tfuelState\030\004 \001(\r\022\025\n\rignitionState"
      "\030\005 \001(\r\022\021\n\tlockState\030\006 \001(\r\022\014\n\004gear\030\007 \001(\r\022"
      "\022\n\nlaserState\030\010 \001(\r\022\022\n\npressState\030\t \001(\r\022"
      "\020\n\010fireTime\030\n \001(\r\022\020\n\010extendRc\030\013 \001(\r\022\022\n\nc"
      "laspState\030\014 \001(\r\022\013\n\003yaw\030\r \001(\r\022\r\n\005pitch\030\016 "
      "\001(\r\"\271\001\n\013AirAnalysis\022\n\n\002sn\030\001 \001(\t\022\013\n\003sat\030\002"
      " \001(\r\022\013\n\003lng\030\003 \001(\001\022\013\n\003lat\030\004 \001(\001\022\016\n\006height"
      "\030\005 \001(\002\022\014\n\004pm25\030\006 \001(\002\022\014\n\004pm10\030\007 \001(\002\022\013\n\003so"
      "2\030\010 \001(\002\022\n\n\002co\030\t \001(\002\022\013\n\003no2\030\n \001(\002\022\n\n\002o3\030\013"
      " \001(\002\022\014\n\004temp\030\014 \001(\002\022\013\n\003hum\030\r \001(\002B$\n\026com.t"
      "yjw.common.protosB\nTyjwDataPBb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 6597);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TelemetryDataBuf-new.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_TelemetryDataBuf_2dnew_2eproto

// ===================================================================

void TelemetryData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetryData::kLngFieldNumber;
const int TelemetryData::kLatFieldNumber;
const int TelemetryData::kAltitudeFieldNumber;
const int TelemetryData::kUltrasonicFieldNumber;
const int TelemetryData::kPitchFieldNumber;
const int TelemetryData::kRollFieldNumber;
const int TelemetryData::kYawFieldNumber;
const int TelemetryData::kAirspeedFieldNumber;
const int TelemetryData::kVelocityFieldNumber;
const int TelemetryData::kTimestampFieldNumber;
const int TelemetryData::kPtpitchFieldNumber;
const int TelemetryData::kPtrollFieldNumber;
const int TelemetryData::kPtyawFieldNumber;
const int TelemetryData::kZoomfactorFieldNumber;
const int TelemetryData::kBoxSnFieldNumber;
const int TelemetryData::kBatteryPowerFieldNumber;
const int TelemetryData::kSatelliteCountFieldNumber;
const int TelemetryData::kTaskIdFieldNumber;
const int TelemetryData::kRtkLngFieldNumber;
const int TelemetryData::kRtkLatFieldNumber;
const int TelemetryData::kRtkHFSLFieldNumber;
const int TelemetryData::kRtkPositionInfoFieldNumber;
const int TelemetryData::kAirFlyTimesFieldNumber;
const int TelemetryData::kAirFlyDistanceFieldNumber;
const int TelemetryData::kUavSnFieldNumber;
const int TelemetryData::kUavModelFieldNumber;
const int TelemetryData::kHomeRangeFieldNumber;
const int TelemetryData::kFlightModeFieldNumber;
const int TelemetryData::kTargetDistanceFieldNumber;
const int TelemetryData::kPredictFlyTimeFieldNumber;
const int TelemetryData::kUltrasonicMaxFieldNumber;
const int TelemetryData::kUltrasonicMinFieldNumber;
const int TelemetryData::kXVelocityFieldNumber;
const int TelemetryData::kYVelocityFieldNumber;
const int TelemetryData::kZVelocityFieldNumber;
const int TelemetryData::kBoxNameFieldNumber;
const int TelemetryData::kPredictFlyTimesFieldNumber;
const int TelemetryData::kPredictGohomeBatteryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetryData::TelemetryData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_TelemetryData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TelemetryData)
}
TelemetryData::TelemetryData(const TelemetryData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  boxsn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.boxsn().size() > 0) {
    boxsn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.boxsn_);
  }
  batterypower_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.batterypower().size() > 0) {
    batterypower_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.batterypower_);
  }
  uavsn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uavsn().size() > 0) {
    uavsn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uavsn_);
  }
  uavmodel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uavmodel().size() > 0) {
    uavmodel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uavmodel_);
  }
  boxname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.boxname().size() > 0) {
    boxname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.boxname_);
  }
  ::memcpy(&lng_, &from.lng_,
    static_cast<size_t>(reinterpret_cast<char*>(&predictgohomebattery_) -
    reinterpret_cast<char*>(&lng_)) + sizeof(predictgohomebattery_));
  // @@protoc_insertion_point(copy_constructor:TelemetryData)
}

void TelemetryData::SharedCtor() {
  boxsn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batterypower_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uavsn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uavmodel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  boxname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lng_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&predictgohomebattery_) -
      reinterpret_cast<char*>(&lng_)) + sizeof(predictgohomebattery_));
}

TelemetryData::~TelemetryData() {
  // @@protoc_insertion_point(destructor:TelemetryData)
  SharedDtor();
}

void TelemetryData::SharedDtor() {
  boxsn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batterypower_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uavsn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uavmodel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  boxname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TelemetryData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TelemetryData::descriptor() {
  ::protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetryData& TelemetryData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_TelemetryData.base);
  return *internal_default_instance();
}


void TelemetryData::Clear() {
// @@protoc_insertion_point(message_clear_start:TelemetryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boxsn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batterypower_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uavsn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uavmodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  boxname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lng_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&predictgohomebattery_) -
      reinterpret_cast<char*>(&lng_)) + sizeof(predictgohomebattery_));
  _internal_metadata_.Clear();
}

bool TelemetryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TelemetryData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double lng = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lng_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float altitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ultrasonic = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ultrasonic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pitch = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float roll = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float airspeed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &airspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float velocity = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ptpitch = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ptpitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ptroll = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ptroll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ptyaw = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ptyaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float zoomfactor = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zoomfactor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string boxSn = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boxsn()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->boxsn().data(), static_cast<int>(this->boxsn().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TelemetryData.boxSn"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string batteryPower = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_batterypower()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->batterypower().data(), static_cast<int>(this->batterypower().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TelemetryData.batteryPower"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 satelliteCount = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &satellitecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 taskId = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &taskid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double rtkLng = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rtklng_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double rtkLat = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rtklat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rtkHFSL = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u /* 173 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rtkhfsl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rtkPositionInfo = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtkpositioninfo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 airFlyTimes = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &airflytimes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float airFlyDistance = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(197u /* 197 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &airflydistance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uavSn = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uavsn()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uavsn().data(), static_cast<int>(this->uavsn().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TelemetryData.uavSn"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uavModel = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uavmodel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uavmodel().data(), static_cast<int>(this->uavmodel().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TelemetryData.uavModel"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float homeRange = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(221u /* 221 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &homerange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 flightMode = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flightmode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float targetDistance = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(237u /* 237 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &targetdistance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 predictFlyTime = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &predictflytime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ultrasonicMax = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(253u /* 253 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ultrasonicmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ultrasonicMin = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(5u /* 261 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ultrasonicmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float xVelocity = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 269 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xvelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yVelocity = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 277 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yvelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float zVelocity = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 285 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zvelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string boxName = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 290 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boxname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->boxname().data(), static_cast<int>(this->boxname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TelemetryData.boxName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 predictFlyTimes = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &predictflytimes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 predictGohomeBattery = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 304 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &predictgohomebattery_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TelemetryData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TelemetryData)
  return false;
#undef DO_
}

void TelemetryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TelemetryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lng = 1;
  if (this->lng() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lng(), output);
  }

  // double lat = 2;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lat(), output);
  }

  // float altitude = 3;
  if (this->altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->altitude(), output);
  }

  // float ultrasonic = 4;
  if (this->ultrasonic() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->ultrasonic(), output);
  }

  // float pitch = 5;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->pitch(), output);
  }

  // float roll = 6;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->roll(), output);
  }

  // float yaw = 7;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->yaw(), output);
  }

  // float airspeed = 8;
  if (this->airspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->airspeed(), output);
  }

  // float velocity = 9;
  if (this->velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->velocity(), output);
  }

  // uint64 timestamp = 10;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->timestamp(), output);
  }

  // float ptpitch = 11;
  if (this->ptpitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->ptpitch(), output);
  }

  // float ptroll = 12;
  if (this->ptroll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->ptroll(), output);
  }

  // float ptyaw = 13;
  if (this->ptyaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->ptyaw(), output);
  }

  // float zoomfactor = 14;
  if (this->zoomfactor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->zoomfactor(), output);
  }

  // string boxSn = 15;
  if (this->boxsn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->boxsn().data(), static_cast<int>(this->boxsn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TelemetryData.boxSn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->boxsn(), output);
  }

  // string batteryPower = 16;
  if (this->batterypower().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->batterypower().data(), static_cast<int>(this->batterypower().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TelemetryData.batteryPower");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->batterypower(), output);
  }

  // uint32 satelliteCount = 17;
  if (this->satellitecount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->satellitecount(), output);
  }

  // uint64 taskId = 18;
  if (this->taskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->taskid(), output);
  }

  // double rtkLng = 19;
  if (this->rtklng() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->rtklng(), output);
  }

  // double rtkLat = 20;
  if (this->rtklat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->rtklat(), output);
  }

  // float rtkHFSL = 21;
  if (this->rtkhfsl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->rtkhfsl(), output);
  }

  // uint32 rtkPositionInfo = 22;
  if (this->rtkpositioninfo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->rtkpositioninfo(), output);
  }

  // uint32 airFlyTimes = 23;
  if (this->airflytimes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->airflytimes(), output);
  }

  // float airFlyDistance = 24;
  if (this->airflydistance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->airflydistance(), output);
  }

  // string uavSn = 25;
  if (this->uavsn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uavsn().data(), static_cast<int>(this->uavsn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TelemetryData.uavSn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->uavsn(), output);
  }

  // string uavModel = 26;
  if (this->uavmodel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uavmodel().data(), static_cast<int>(this->uavmodel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TelemetryData.uavModel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->uavmodel(), output);
  }

  // float homeRange = 27;
  if (this->homerange() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->homerange(), output);
  }

  // uint32 flightMode = 28;
  if (this->flightmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->flightmode(), output);
  }

  // float targetDistance = 29;
  if (this->targetdistance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->targetdistance(), output);
  }

  // uint32 predictFlyTime = 30;
  if (this->predictflytime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->predictflytime(), output);
  }

  // float ultrasonicMax = 31;
  if (this->ultrasonicmax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->ultrasonicmax(), output);
  }

  // float ultrasonicMin = 32;
  if (this->ultrasonicmin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->ultrasonicmin(), output);
  }

  // float xVelocity = 33;
  if (this->xvelocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->xvelocity(), output);
  }

  // float yVelocity = 34;
  if (this->yvelocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(34, this->yvelocity(), output);
  }

  // float zVelocity = 35;
  if (this->zvelocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(35, this->zvelocity(), output);
  }

  // string boxName = 36;
  if (this->boxname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->boxname().data(), static_cast<int>(this->boxname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TelemetryData.boxName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      36, this->boxname(), output);
  }

  // uint32 predictFlyTimes = 37;
  if (this->predictflytimes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->predictflytimes(), output);
  }

  // uint32 predictGohomeBattery = 38;
  if (this->predictgohomebattery() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->predictgohomebattery(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:TelemetryData)
}

::google::protobuf::uint8* TelemetryData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TelemetryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lng = 1;
  if (this->lng() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lng(), target);
  }

  // double lat = 2;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lat(), target);
  }

  // float altitude = 3;
  if (this->altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->altitude(), target);
  }

  // float ultrasonic = 4;
  if (this->ultrasonic() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->ultrasonic(), target);
  }

  // float pitch = 5;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->pitch(), target);
  }

  // float roll = 6;
  if (this->roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->roll(), target);
  }

  // float yaw = 7;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->yaw(), target);
  }

  // float airspeed = 8;
  if (this->airspeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->airspeed(), target);
  }

  // float velocity = 9;
  if (this->velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->velocity(), target);
  }

  // uint64 timestamp = 10;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->timestamp(), target);
  }

  // float ptpitch = 11;
  if (this->ptpitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->ptpitch(), target);
  }

  // float ptroll = 12;
  if (this->ptroll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->ptroll(), target);
  }

  // float ptyaw = 13;
  if (this->ptyaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->ptyaw(), target);
  }

  // float zoomfactor = 14;
  if (this->zoomfactor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->zoomfactor(), target);
  }

  // string boxSn = 15;
  if (this->boxsn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->boxsn().data(), static_cast<int>(this->boxsn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TelemetryData.boxSn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->boxsn(), target);
  }

  // string batteryPower = 16;
  if (this->batterypower().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->batterypower().data(), static_cast<int>(this->batterypower().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TelemetryData.batteryPower");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->batterypower(), target);
  }

  // uint32 satelliteCount = 17;
  if (this->satellitecount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->satellitecount(), target);
  }

  // uint64 taskId = 18;
  if (this->taskid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->taskid(), target);
  }

  // double rtkLng = 19;
  if (this->rtklng() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->rtklng(), target);
  }

  // double rtkLat = 20;
  if (this->rtklat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->rtklat(), target);
  }

  // float rtkHFSL = 21;
  if (this->rtkhfsl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->rtkhfsl(), target);
  }

  // uint32 rtkPositionInfo = 22;
  if (this->rtkpositioninfo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->rtkpositioninfo(), target);
  }

  // uint32 airFlyTimes = 23;
  if (this->airflytimes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->airflytimes(), target);
  }

  // float airFlyDistance = 24;
  if (this->airflydistance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->airflydistance(), target);
  }

  // string uavSn = 25;
  if (this->uavsn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uavsn().data(), static_cast<int>(this->uavsn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TelemetryData.uavSn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->uavsn(), target);
  }

  // string uavModel = 26;
  if (this->uavmodel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uavmodel().data(), static_cast<int>(this->uavmodel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TelemetryData.uavModel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->uavmodel(), target);
  }

  // float homeRange = 27;
  if (this->homerange() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->homerange(), target);
  }

  // uint32 flightMode = 28;
  if (this->flightmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->flightmode(), target);
  }

  // float targetDistance = 29;
  if (this->targetdistance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->targetdistance(), target);
  }

  // uint32 predictFlyTime = 30;
  if (this->predictflytime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->predictflytime(), target);
  }

  // float ultrasonicMax = 31;
  if (this->ultrasonicmax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->ultrasonicmax(), target);
  }

  // float ultrasonicMin = 32;
  if (this->ultrasonicmin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->ultrasonicmin(), target);
  }

  // float xVelocity = 33;
  if (this->xvelocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(33, this->xvelocity(), target);
  }

  // float yVelocity = 34;
  if (this->yvelocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(34, this->yvelocity(), target);
  }

  // float zVelocity = 35;
  if (this->zvelocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(35, this->zvelocity(), target);
  }

  // string boxName = 36;
  if (this->boxname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->boxname().data(), static_cast<int>(this->boxname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TelemetryData.boxName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        36, this->boxname(), target);
  }

  // uint32 predictFlyTimes = 37;
  if (this->predictflytimes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->predictflytimes(), target);
  }

  // uint32 predictGohomeBattery = 38;
  if (this->predictgohomebattery() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->predictgohomebattery(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TelemetryData)
  return target;
}

size_t TelemetryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TelemetryData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string boxSn = 15;
  if (this->boxsn().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->boxsn());
  }

  // string batteryPower = 16;
  if (this->batterypower().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->batterypower());
  }

  // string uavSn = 25;
  if (this->uavsn().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uavsn());
  }

  // string uavModel = 26;
  if (this->uavmodel().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uavmodel());
  }

  // string boxName = 36;
  if (this->boxname().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->boxname());
  }

  // double lng = 1;
  if (this->lng() != 0) {
    total_size += 1 + 8;
  }

  // double lat = 2;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  // float altitude = 3;
  if (this->altitude() != 0) {
    total_size += 1 + 4;
  }

  // float ultrasonic = 4;
  if (this->ultrasonic() != 0) {
    total_size += 1 + 4;
  }

  // float pitch = 5;
  if (this->pitch() != 0) {
    total_size += 1 + 4;
  }

  // float roll = 6;
  if (this->roll() != 0) {
    total_size += 1 + 4;
  }

  // float yaw = 7;
  if (this->yaw() != 0) {
    total_size += 1 + 4;
  }

  // float airspeed = 8;
  if (this->airspeed() != 0) {
    total_size += 1 + 4;
  }

  // uint64 timestamp = 10;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // float velocity = 9;
  if (this->velocity() != 0) {
    total_size += 1 + 4;
  }

  // float ptpitch = 11;
  if (this->ptpitch() != 0) {
    total_size += 1 + 4;
  }

  // float ptroll = 12;
  if (this->ptroll() != 0) {
    total_size += 1 + 4;
  }

  // float ptyaw = 13;
  if (this->ptyaw() != 0) {
    total_size += 1 + 4;
  }

  // float zoomfactor = 14;
  if (this->zoomfactor() != 0) {
    total_size += 1 + 4;
  }

  // uint32 satelliteCount = 17;
  if (this->satellitecount() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->satellitecount());
  }

  // uint64 taskId = 18;
  if (this->taskid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->taskid());
  }

  // double rtkLng = 19;
  if (this->rtklng() != 0) {
    total_size += 2 + 8;
  }

  // double rtkLat = 20;
  if (this->rtklat() != 0) {
    total_size += 2 + 8;
  }

  // float rtkHFSL = 21;
  if (this->rtkhfsl() != 0) {
    total_size += 2 + 4;
  }

  // uint32 rtkPositionInfo = 22;
  if (this->rtkpositioninfo() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rtkpositioninfo());
  }

  // uint32 airFlyTimes = 23;
  if (this->airflytimes() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->airflytimes());
  }

  // float airFlyDistance = 24;
  if (this->airflydistance() != 0) {
    total_size += 2 + 4;
  }

  // float homeRange = 27;
  if (this->homerange() != 0) {
    total_size += 2 + 4;
  }

  // uint32 flightMode = 28;
  if (this->flightmode() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flightmode());
  }

  // float targetDistance = 29;
  if (this->targetdistance() != 0) {
    total_size += 2 + 4;
  }

  // uint32 predictFlyTime = 30;
  if (this->predictflytime() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->predictflytime());
  }

  // float ultrasonicMax = 31;
  if (this->ultrasonicmax() != 0) {
    total_size += 2 + 4;
  }

  // float ultrasonicMin = 32;
  if (this->ultrasonicmin() != 0) {
    total_size += 2 + 4;
  }

  // float xVelocity = 33;
  if (this->xvelocity() != 0) {
    total_size += 2 + 4;
  }

  // float yVelocity = 34;
  if (this->yvelocity() != 0) {
    total_size += 2 + 4;
  }

  // float zVelocity = 35;
  if (this->zvelocity() != 0) {
    total_size += 2 + 4;
  }

  // uint32 predictFlyTimes = 37;
  if (this->predictflytimes() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->predictflytimes());
  }

  // uint32 predictGohomeBattery = 38;
  if (this->predictgohomebattery() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->predictgohomebattery());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TelemetryData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TelemetryData)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetryData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetryData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TelemetryData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TelemetryData)
    MergeFrom(*source);
  }
}

void TelemetryData::MergeFrom(const TelemetryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TelemetryData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.boxsn().size() > 0) {

    boxsn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.boxsn_);
  }
  if (from.batterypower().size() > 0) {

    batterypower_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.batterypower_);
  }
  if (from.uavsn().size() > 0) {

    uavsn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uavsn_);
  }
  if (from.uavmodel().size() > 0) {

    uavmodel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uavmodel_);
  }
  if (from.boxname().size() > 0) {

    boxname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.boxname_);
  }
  if (from.lng() != 0) {
    set_lng(from.lng());
  }
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.altitude() != 0) {
    set_altitude(from.altitude());
  }
  if (from.ultrasonic() != 0) {
    set_ultrasonic(from.ultrasonic());
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.roll() != 0) {
    set_roll(from.roll());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
  if (from.airspeed() != 0) {
    set_airspeed(from.airspeed());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.velocity() != 0) {
    set_velocity(from.velocity());
  }
  if (from.ptpitch() != 0) {
    set_ptpitch(from.ptpitch());
  }
  if (from.ptroll() != 0) {
    set_ptroll(from.ptroll());
  }
  if (from.ptyaw() != 0) {
    set_ptyaw(from.ptyaw());
  }
  if (from.zoomfactor() != 0) {
    set_zoomfactor(from.zoomfactor());
  }
  if (from.satellitecount() != 0) {
    set_satellitecount(from.satellitecount());
  }
  if (from.taskid() != 0) {
    set_taskid(from.taskid());
  }
  if (from.rtklng() != 0) {
    set_rtklng(from.rtklng());
  }
  if (from.rtklat() != 0) {
    set_rtklat(from.rtklat());
  }
  if (from.rtkhfsl() != 0) {
    set_rtkhfsl(from.rtkhfsl());
  }
  if (from.rtkpositioninfo() != 0) {
    set_rtkpositioninfo(from.rtkpositioninfo());
  }
  if (from.airflytimes() != 0) {
    set_airflytimes(from.airflytimes());
  }
  if (from.airflydistance() != 0) {
    set_airflydistance(from.airflydistance());
  }
  if (from.homerange() != 0) {
    set_homerange(from.homerange());
  }
  if (from.flightmode() != 0) {
    set_flightmode(from.flightmode());
  }
  if (from.targetdistance() != 0) {
    set_targetdistance(from.targetdistance());
  }
  if (from.predictflytime() != 0) {
    set_predictflytime(from.predictflytime());
  }
  if (from.ultrasonicmax() != 0) {
    set_ultrasonicmax(from.ultrasonicmax());
  }
  if (from.ultrasonicmin() != 0) {
    set_ultrasonicmin(from.ultrasonicmin());
  }
  if (from.xvelocity() != 0) {
    set_xvelocity(from.xvelocity());
  }
  if (from.yvelocity() != 0) {
    set_yvelocity(from.yvelocity());
  }
  if (from.zvelocity() != 0) {
    set_zvelocity(from.zvelocity());
  }
  if (from.predictflytimes() != 0) {
    set_predictflytimes(from.predictflytimes());
  }
  if (from.predictgohomebattery() != 0) {
    set_predictgohomebattery(from.predictgohomebattery());
  }
}

void TelemetryData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TelemetryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetryData::CopyFrom(const TelemetryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TelemetryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryData::IsInitialized() const {
  return true;
}

void TelemetryData::Swap(TelemetryData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetryData::InternalSwap(TelemetryData* other) {
  using std::swap;
  boxsn_.Swap(&other->boxsn_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  batterypower_.Swap(&other->batterypower_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uavsn_.Swap(&other->uavsn_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uavmodel_.Swap(&other->uavmodel_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  boxname_.Swap(&other->boxname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lng_, other->lng_);
  swap(lat_, other->lat_);
  swap(altitude_, other->altitude_);
  swap(ultrasonic_, other->ultrasonic_);
  swap(pitch_, other->pitch_);
  swap(roll_, other->roll_);
  swap(yaw_, other->yaw_);
  swap(airspeed_, other->airspeed_);
  swap(timestamp_, other->timestamp_);
  swap(velocity_, other->velocity_);
  swap(ptpitch_, other->ptpitch_);
  swap(ptroll_, other->ptroll_);
  swap(ptyaw_, other->ptyaw_);
  swap(zoomfactor_, other->zoomfactor_);
  swap(satellitecount_, other->satellitecount_);
  swap(taskid_, other->taskid_);
  swap(rtklng_, other->rtklng_);
  swap(rtklat_, other->rtklat_);
  swap(rtkhfsl_, other->rtkhfsl_);
  swap(rtkpositioninfo_, other->rtkpositioninfo_);
  swap(airflytimes_, other->airflytimes_);
  swap(airflydistance_, other->airflydistance_);
  swap(homerange_, other->homerange_);
  swap(flightmode_, other->flightmode_);
  swap(targetdistance_, other->targetdistance_);
  swap(predictflytime_, other->predictflytime_);
  swap(ultrasonicmax_, other->ultrasonicmax_);
  swap(ultrasonicmin_, other->ultrasonicmin_);
  swap(xvelocity_, other->xvelocity_);
  swap(yvelocity_, other->yvelocity_);
  swap(zvelocity_, other->zvelocity_);
  swap(predictflytimes_, other->predictflytimes_);
  swap(predictgohomebattery_, other->predictgohomebattery_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TelemetryData::GetMetadata() const {
  protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TelemetryList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetryList::kTelemetryListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetryList::TelemetryList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_TelemetryList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TelemetryList)
}
TelemetryList::TelemetryList(const TelemetryList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      telemetrylist_(from.telemetrylist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TelemetryList)
}

void TelemetryList::SharedCtor() {
}

TelemetryList::~TelemetryList() {
  // @@protoc_insertion_point(destructor:TelemetryList)
  SharedDtor();
}

void TelemetryList::SharedDtor() {
}

void TelemetryList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TelemetryList::descriptor() {
  ::protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TelemetryList& TelemetryList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_TelemetryList.base);
  return *internal_default_instance();
}


void TelemetryList::Clear() {
// @@protoc_insertion_point(message_clear_start:TelemetryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  telemetrylist_.Clear();
  _internal_metadata_.Clear();
}

bool TelemetryList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TelemetryList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TelemetryData telemetryList = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_telemetrylist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TelemetryList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TelemetryList)
  return false;
#undef DO_
}

void TelemetryList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TelemetryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TelemetryData telemetryList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->telemetrylist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->telemetrylist(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:TelemetryList)
}

::google::protobuf::uint8* TelemetryList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TelemetryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TelemetryData telemetryList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->telemetrylist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->telemetrylist(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TelemetryList)
  return target;
}

size_t TelemetryList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TelemetryList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .TelemetryData telemetryList = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->telemetrylist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->telemetrylist(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TelemetryList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TelemetryList)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetryList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetryList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TelemetryList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TelemetryList)
    MergeFrom(*source);
  }
}

void TelemetryList::MergeFrom(const TelemetryList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TelemetryList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  telemetrylist_.MergeFrom(from.telemetrylist_);
}

void TelemetryList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TelemetryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetryList::CopyFrom(const TelemetryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TelemetryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryList::IsInitialized() const {
  return true;
}

void TelemetryList::Swap(TelemetryList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetryList::InternalSwap(TelemetryList* other) {
  using std::swap;
  CastToBase(&telemetrylist_)->InternalSwap(CastToBase(&other->telemetrylist_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TelemetryList::GetMetadata() const {
  protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SignalInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignalInfo::kModeFieldNumber;
const int SignalInfo::kMccFieldNumber;
const int SignalInfo::kMncFieldNumber;
const int SignalInfo::kCellidFieldNumber;
const int SignalInfo::kPcidFieldNumber;
const int SignalInfo::kTacFieldNumber;
const int SignalInfo::kArfcnFieldNumber;
const int SignalInfo::kBandFieldNumber;
const int SignalInfo::kNrDlBandwidthFieldNumber;
const int SignalInfo::kRsrpFieldNumber;
const int SignalInfo::kRsrqFieldNumber;
const int SignalInfo::kSinrFieldNumber;
const int SignalInfo::kTxPowerFieldNumber;
const int SignalInfo::kSrxlevFieldNumber;
const int SignalInfo::kCqiFieldNumber;
const int SignalInfo::kEarfcnFieldNumber;
const int SignalInfo::kFreqBandIndFieldNumber;
const int SignalInfo::kUlBandwidthFieldNumber;
const int SignalInfo::kDlBandwidthFieldNumber;
const int SignalInfo::kIsTddFieldNumber;
const int SignalInfo::kRssiFieldNumber;
const int SignalInfo::kDuplexModeFieldNumber;
const int SignalInfo::kLngFieldNumber;
const int SignalInfo::kLatFieldNumber;
const int SignalInfo::kHeightFieldNumber;
const int SignalInfo::kTimestampFieldNumber;
const int SignalInfo::kBoxstateFieldNumber;
const int SignalInfo::kIspFieldNumber;
const int SignalInfo::kTempMaxFieldNumber;
const int SignalInfo::kPrxRsrpFieldNumber;
const int SignalInfo::kDrxRsrpFieldNumber;
const int SignalInfo::kRx2RsrpFieldNumber;
const int SignalInfo::kRx3RsrpFieldNumber;
const int SignalInfo::kBoxSnFieldNumber;
const int SignalInfo::kSimUseSeatFieldNumber;
const int SignalInfo::kNetworkModeFieldNumber;
const int SignalInfo::kDelayTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignalInfo::SignalInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_SignalInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SignalInfo)
}
SignalInfo::SignalInfo(const SignalInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mode().size() > 0) {
    mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mode_);
  }
  mcc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mcc().size() > 0) {
    mcc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mcc_);
  }
  mnc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mnc().size() > 0) {
    mnc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mnc_);
  }
  cellid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cellid().size() > 0) {
    cellid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cellid_);
  }
  pcid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pcid().size() > 0) {
    pcid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pcid_);
  }
  tac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tac().size() > 0) {
    tac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tac_);
  }
  arfcn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.arfcn().size() > 0) {
    arfcn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.arfcn_);
  }
  band_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.band().size() > 0) {
    band_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.band_);
  }
  nr_dl_bandwidth_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nr_dl_bandwidth().size() > 0) {
    nr_dl_bandwidth_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nr_dl_bandwidth_);
  }
  rsrp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rsrp().size() > 0) {
    rsrp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rsrp_);
  }
  rsrq_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rsrq().size() > 0) {
    rsrq_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rsrq_);
  }
  sinr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sinr().size() > 0) {
    sinr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sinr_);
  }
  tx_power_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tx_power().size() > 0) {
    tx_power_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_power_);
  }
  srxlev_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.srxlev().size() > 0) {
    srxlev_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.srxlev_);
  }
  cqi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cqi().size() > 0) {
    cqi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cqi_);
  }
  earfcn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.earfcn().size() > 0) {
    earfcn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.earfcn_);
  }
  freq_band_ind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.freq_band_ind().size() > 0) {
    freq_band_ind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.freq_band_ind_);
  }
  ul_bandwidth_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ul_bandwidth().size() > 0) {
    ul_bandwidth_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ul_bandwidth_);
  }
  dl_bandwidth_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dl_bandwidth().size() > 0) {
    dl_bandwidth_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dl_bandwidth_);
  }
  is_tdd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.is_tdd().size() > 0) {
    is_tdd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.is_tdd_);
  }
  rssi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rssi().size() > 0) {
    rssi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rssi_);
  }
  duplex_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.duplex_mode().size() > 0) {
    duplex_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.duplex_mode_);
  }
  isp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.isp().size() > 0) {
    isp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.isp_);
  }
  prx_rsrp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.prx_rsrp().size() > 0) {
    prx_rsrp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prx_rsrp_);
  }
  drx_rsrp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.drx_rsrp().size() > 0) {
    drx_rsrp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.drx_rsrp_);
  }
  rx2_rsrp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rx2_rsrp().size() > 0) {
    rx2_rsrp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rx2_rsrp_);
  }
  rx3_rsrp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rx3_rsrp().size() > 0) {
    rx3_rsrp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rx3_rsrp_);
  }
  box_sn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.box_sn().size() > 0) {
    box_sn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.box_sn_);
  }
  ::memcpy(&lng_, &from.lng_,
    static_cast<size_t>(reinterpret_cast<char*>(&delaytime_) -
    reinterpret_cast<char*>(&lng_)) + sizeof(delaytime_));
  // @@protoc_insertion_point(copy_constructor:SignalInfo)
}

void SignalInfo::SharedCtor() {
  mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mcc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mnc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cellid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pcid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arfcn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  band_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nr_dl_bandwidth_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rsrp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rsrq_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sinr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tx_power_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  srxlev_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cqi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  earfcn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freq_band_ind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ul_bandwidth_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dl_bandwidth_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_tdd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rssi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duplex_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prx_rsrp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drx_rsrp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rx2_rsrp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rx3_rsrp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  box_sn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lng_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delaytime_) -
      reinterpret_cast<char*>(&lng_)) + sizeof(delaytime_));
}

SignalInfo::~SignalInfo() {
  // @@protoc_insertion_point(destructor:SignalInfo)
  SharedDtor();
}

void SignalInfo::SharedDtor() {
  mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mcc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mnc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cellid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pcid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arfcn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  band_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nr_dl_bandwidth_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rsrp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rsrq_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sinr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tx_power_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  srxlev_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cqi_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  earfcn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freq_band_ind_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ul_bandwidth_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dl_bandwidth_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_tdd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rssi_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duplex_mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prx_rsrp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drx_rsrp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rx2_rsrp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rx3_rsrp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  box_sn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SignalInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SignalInfo::descriptor() {
  ::protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SignalInfo& SignalInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_SignalInfo.base);
  return *internal_default_instance();
}


void SignalInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SignalInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mcc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mnc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cellid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pcid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arfcn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  band_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nr_dl_bandwidth_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rsrp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rsrq_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sinr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tx_power_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  srxlev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cqi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  earfcn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freq_band_ind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ul_bandwidth_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dl_bandwidth_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_tdd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rssi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duplex_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prx_rsrp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drx_rsrp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rx2_rsrp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rx3_rsrp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  box_sn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lng_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delaytime_) -
      reinterpret_cast<char*>(&lng_)) + sizeof(delaytime_));
  _internal_metadata_.Clear();
}

bool SignalInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SignalInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mode().data(), static_cast<int>(this->mode().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SignalInfo.mode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mcc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mcc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mcc().data(), static_cast<int>(this->mcc().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SignalInfo.mcc"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mnc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mnc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mnc().data(), static_cast<int>(this->mnc().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SignalInfo.mnc"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cellid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cellid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cellid().data(), static_cast<int>(this->cellid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SignalInfo.cellid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pcid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pcid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pcid().data(), static_cast<int>(this->pcid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SignalInfo.pcid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tac = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tac()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tac().data(), static_cast<int>(this->tac().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SignalInfo.tac"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string arfcn = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arfcn()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->arfcn().data(), static_cast<int>(this->arfcn().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SignalInfo.arfcn"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string band = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_band()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->band().data(), static_cast<int>(this->band().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SignalInfo.band"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string nr_dl_bandwidth = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nr_dl_bandwidth()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nr_dl_bandwidth().data(), static_cast<int>(this->nr_dl_bandwidth().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SignalInfo.nr_dl_bandwidth"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rsrp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rsrp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rsrp().data(), static_cast<int>(this->rsrp().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SignalInfo.rsrp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rsrq = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rsrq()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rsrq().data(), static_cast<int>(this->rsrq().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SignalInfo.rsrq"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sinr = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sinr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sinr().data(), static_cast<int>(this->sinr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SignalInfo.sinr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tx_power = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tx_power()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tx_power().data(), static_cast<int>(this->tx_power().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SignalInfo.tx_power"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string srxlev = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_srxlev()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->srxlev().data(), static_cast<int>(this->srxlev().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SignalInfo.srxlev"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cqi = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cqi()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cqi().data(), static_cast<int>(this->cqi().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SignalInfo.cqi"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string earfcn = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_earfcn()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->earfcn().data(), static_cast<int>(this->earfcn().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SignalInfo.earfcn"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string freq_band_ind = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_freq_band_ind()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->freq_band_ind().data(), static_cast<int>(this->freq_band_ind().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SignalInfo.freq_band_ind"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ul_bandwidth = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ul_bandwidth()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ul_bandwidth().data(), static_cast<int>(this->ul_bandwidth().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SignalInfo.ul_bandwidth"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dl_bandwidth = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dl_bandwidth()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dl_bandwidth().data(), static_cast<int>(this->dl_bandwidth().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SignalInfo.dl_bandwidth"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string is_tdd = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_is_tdd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->is_tdd().data(), static_cast<int>(this->is_tdd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SignalInfo.is_tdd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rssi = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rssi()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rssi().data(), static_cast<int>(this->rssi().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SignalInfo.rssi"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string duplex_mode = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_duplex_mode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->duplex_mode().data(), static_cast<int>(this->duplex_mode().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SignalInfo.duplex_mode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lng = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lng_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lat = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 193 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(205u /* 205 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 timestamp = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 boxstate = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boxstate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string isp = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_isp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->isp().data(), static_cast<int>(this->isp().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SignalInfo.isp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tempMax = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tempmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string prx_rsrp = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prx_rsrp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prx_rsrp().data(), static_cast<int>(this->prx_rsrp().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SignalInfo.prx_rsrp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string drx_rsrp = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_drx_rsrp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->drx_rsrp().data(), static_cast<int>(this->drx_rsrp().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SignalInfo.drx_rsrp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rx2_rsrp = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rx2_rsrp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rx2_rsrp().data(), static_cast<int>(this->rx2_rsrp().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SignalInfo.rx2_rsrp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rx3_rsrp = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rx3_rsrp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rx3_rsrp().data(), static_cast<int>(this->rx3_rsrp().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SignalInfo.rx3_rsrp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string box_sn = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_box_sn()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->box_sn().data(), static_cast<int>(this->box_sn().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SignalInfo.box_sn"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sim_use_seat = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sim_use_seat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 networkMode = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &networkmode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 delayTime = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delaytime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SignalInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SignalInfo)
  return false;
#undef DO_
}

void SignalInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SignalInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mode = 1;
  if (this->mode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mode().data(), static_cast<int>(this->mode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mode(), output);
  }

  // string mcc = 2;
  if (this->mcc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mcc().data(), static_cast<int>(this->mcc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.mcc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mcc(), output);
  }

  // string mnc = 3;
  if (this->mnc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mnc().data(), static_cast<int>(this->mnc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.mnc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mnc(), output);
  }

  // string cellid = 4;
  if (this->cellid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cellid().data(), static_cast<int>(this->cellid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.cellid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cellid(), output);
  }

  // string pcid = 5;
  if (this->pcid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pcid().data(), static_cast<int>(this->pcid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.pcid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->pcid(), output);
  }

  // string tac = 6;
  if (this->tac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tac().data(), static_cast<int>(this->tac().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.tac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->tac(), output);
  }

  // string arfcn = 7;
  if (this->arfcn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->arfcn().data(), static_cast<int>(this->arfcn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.arfcn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->arfcn(), output);
  }

  // string band = 8;
  if (this->band().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->band().data(), static_cast<int>(this->band().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.band");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->band(), output);
  }

  // string nr_dl_bandwidth = 9;
  if (this->nr_dl_bandwidth().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nr_dl_bandwidth().data(), static_cast<int>(this->nr_dl_bandwidth().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.nr_dl_bandwidth");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->nr_dl_bandwidth(), output);
  }

  // string rsrp = 10;
  if (this->rsrp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rsrp().data(), static_cast<int>(this->rsrp().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.rsrp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->rsrp(), output);
  }

  // string rsrq = 11;
  if (this->rsrq().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rsrq().data(), static_cast<int>(this->rsrq().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.rsrq");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->rsrq(), output);
  }

  // string sinr = 12;
  if (this->sinr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sinr().data(), static_cast<int>(this->sinr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.sinr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->sinr(), output);
  }

  // string tx_power = 13;
  if (this->tx_power().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tx_power().data(), static_cast<int>(this->tx_power().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.tx_power");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->tx_power(), output);
  }

  // string srxlev = 14;
  if (this->srxlev().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->srxlev().data(), static_cast<int>(this->srxlev().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.srxlev");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->srxlev(), output);
  }

  // string cqi = 15;
  if (this->cqi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cqi().data(), static_cast<int>(this->cqi().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.cqi");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->cqi(), output);
  }

  // string earfcn = 16;
  if (this->earfcn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->earfcn().data(), static_cast<int>(this->earfcn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.earfcn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->earfcn(), output);
  }

  // string freq_band_ind = 17;
  if (this->freq_band_ind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->freq_band_ind().data(), static_cast<int>(this->freq_band_ind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.freq_band_ind");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->freq_band_ind(), output);
  }

  // string ul_bandwidth = 18;
  if (this->ul_bandwidth().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ul_bandwidth().data(), static_cast<int>(this->ul_bandwidth().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.ul_bandwidth");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->ul_bandwidth(), output);
  }

  // string dl_bandwidth = 19;
  if (this->dl_bandwidth().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dl_bandwidth().data(), static_cast<int>(this->dl_bandwidth().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.dl_bandwidth");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->dl_bandwidth(), output);
  }

  // string is_tdd = 20;
  if (this->is_tdd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->is_tdd().data(), static_cast<int>(this->is_tdd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.is_tdd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->is_tdd(), output);
  }

  // string rssi = 21;
  if (this->rssi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rssi().data(), static_cast<int>(this->rssi().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.rssi");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->rssi(), output);
  }

  // string duplex_mode = 22;
  if (this->duplex_mode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->duplex_mode().data(), static_cast<int>(this->duplex_mode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.duplex_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->duplex_mode(), output);
  }

  // double lng = 23;
  if (this->lng() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->lng(), output);
  }

  // double lat = 24;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->lat(), output);
  }

  // float height = 25;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->height(), output);
  }

  // uint32 timestamp = 26;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->timestamp(), output);
  }

  // uint32 boxstate = 27;
  if (this->boxstate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->boxstate(), output);
  }

  // string isp = 28;
  if (this->isp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->isp().data(), static_cast<int>(this->isp().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.isp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->isp(), output);
  }

  // int32 tempMax = 29;
  if (this->tempmax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->tempmax(), output);
  }

  // string prx_rsrp = 30;
  if (this->prx_rsrp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prx_rsrp().data(), static_cast<int>(this->prx_rsrp().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.prx_rsrp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->prx_rsrp(), output);
  }

  // string drx_rsrp = 31;
  if (this->drx_rsrp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->drx_rsrp().data(), static_cast<int>(this->drx_rsrp().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.drx_rsrp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->drx_rsrp(), output);
  }

  // string rx2_rsrp = 32;
  if (this->rx2_rsrp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rx2_rsrp().data(), static_cast<int>(this->rx2_rsrp().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.rx2_rsrp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->rx2_rsrp(), output);
  }

  // string rx3_rsrp = 33;
  if (this->rx3_rsrp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rx3_rsrp().data(), static_cast<int>(this->rx3_rsrp().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.rx3_rsrp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      33, this->rx3_rsrp(), output);
  }

  // string box_sn = 34;
  if (this->box_sn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->box_sn().data(), static_cast<int>(this->box_sn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.box_sn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      34, this->box_sn(), output);
  }

  // uint32 sim_use_seat = 35;
  if (this->sim_use_seat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->sim_use_seat(), output);
  }

  // uint32 networkMode = 36;
  if (this->networkmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->networkmode(), output);
  }

  // uint32 delayTime = 37;
  if (this->delaytime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->delaytime(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:SignalInfo)
}

::google::protobuf::uint8* SignalInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SignalInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mode = 1;
  if (this->mode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mode().data(), static_cast<int>(this->mode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mode(), target);
  }

  // string mcc = 2;
  if (this->mcc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mcc().data(), static_cast<int>(this->mcc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.mcc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mcc(), target);
  }

  // string mnc = 3;
  if (this->mnc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mnc().data(), static_cast<int>(this->mnc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.mnc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mnc(), target);
  }

  // string cellid = 4;
  if (this->cellid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cellid().data(), static_cast<int>(this->cellid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.cellid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cellid(), target);
  }

  // string pcid = 5;
  if (this->pcid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pcid().data(), static_cast<int>(this->pcid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.pcid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pcid(), target);
  }

  // string tac = 6;
  if (this->tac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tac().data(), static_cast<int>(this->tac().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.tac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->tac(), target);
  }

  // string arfcn = 7;
  if (this->arfcn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->arfcn().data(), static_cast<int>(this->arfcn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.arfcn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->arfcn(), target);
  }

  // string band = 8;
  if (this->band().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->band().data(), static_cast<int>(this->band().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.band");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->band(), target);
  }

  // string nr_dl_bandwidth = 9;
  if (this->nr_dl_bandwidth().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nr_dl_bandwidth().data(), static_cast<int>(this->nr_dl_bandwidth().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.nr_dl_bandwidth");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->nr_dl_bandwidth(), target);
  }

  // string rsrp = 10;
  if (this->rsrp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rsrp().data(), static_cast<int>(this->rsrp().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.rsrp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->rsrp(), target);
  }

  // string rsrq = 11;
  if (this->rsrq().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rsrq().data(), static_cast<int>(this->rsrq().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.rsrq");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->rsrq(), target);
  }

  // string sinr = 12;
  if (this->sinr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sinr().data(), static_cast<int>(this->sinr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.sinr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->sinr(), target);
  }

  // string tx_power = 13;
  if (this->tx_power().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tx_power().data(), static_cast<int>(this->tx_power().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.tx_power");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->tx_power(), target);
  }

  // string srxlev = 14;
  if (this->srxlev().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->srxlev().data(), static_cast<int>(this->srxlev().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.srxlev");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->srxlev(), target);
  }

  // string cqi = 15;
  if (this->cqi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cqi().data(), static_cast<int>(this->cqi().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.cqi");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->cqi(), target);
  }

  // string earfcn = 16;
  if (this->earfcn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->earfcn().data(), static_cast<int>(this->earfcn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.earfcn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->earfcn(), target);
  }

  // string freq_band_ind = 17;
  if (this->freq_band_ind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->freq_band_ind().data(), static_cast<int>(this->freq_band_ind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.freq_band_ind");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->freq_band_ind(), target);
  }

  // string ul_bandwidth = 18;
  if (this->ul_bandwidth().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ul_bandwidth().data(), static_cast<int>(this->ul_bandwidth().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.ul_bandwidth");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->ul_bandwidth(), target);
  }

  // string dl_bandwidth = 19;
  if (this->dl_bandwidth().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dl_bandwidth().data(), static_cast<int>(this->dl_bandwidth().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.dl_bandwidth");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->dl_bandwidth(), target);
  }

  // string is_tdd = 20;
  if (this->is_tdd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->is_tdd().data(), static_cast<int>(this->is_tdd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.is_tdd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->is_tdd(), target);
  }

  // string rssi = 21;
  if (this->rssi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rssi().data(), static_cast<int>(this->rssi().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.rssi");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->rssi(), target);
  }

  // string duplex_mode = 22;
  if (this->duplex_mode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->duplex_mode().data(), static_cast<int>(this->duplex_mode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.duplex_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->duplex_mode(), target);
  }

  // double lng = 23;
  if (this->lng() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->lng(), target);
  }

  // double lat = 24;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->lat(), target);
  }

  // float height = 25;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->height(), target);
  }

  // uint32 timestamp = 26;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->timestamp(), target);
  }

  // uint32 boxstate = 27;
  if (this->boxstate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->boxstate(), target);
  }

  // string isp = 28;
  if (this->isp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->isp().data(), static_cast<int>(this->isp().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.isp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->isp(), target);
  }

  // int32 tempMax = 29;
  if (this->tempmax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->tempmax(), target);
  }

  // string prx_rsrp = 30;
  if (this->prx_rsrp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prx_rsrp().data(), static_cast<int>(this->prx_rsrp().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.prx_rsrp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->prx_rsrp(), target);
  }

  // string drx_rsrp = 31;
  if (this->drx_rsrp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->drx_rsrp().data(), static_cast<int>(this->drx_rsrp().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.drx_rsrp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->drx_rsrp(), target);
  }

  // string rx2_rsrp = 32;
  if (this->rx2_rsrp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rx2_rsrp().data(), static_cast<int>(this->rx2_rsrp().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.rx2_rsrp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->rx2_rsrp(), target);
  }

  // string rx3_rsrp = 33;
  if (this->rx3_rsrp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rx3_rsrp().data(), static_cast<int>(this->rx3_rsrp().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.rx3_rsrp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->rx3_rsrp(), target);
  }

  // string box_sn = 34;
  if (this->box_sn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->box_sn().data(), static_cast<int>(this->box_sn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SignalInfo.box_sn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->box_sn(), target);
  }

  // uint32 sim_use_seat = 35;
  if (this->sim_use_seat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->sim_use_seat(), target);
  }

  // uint32 networkMode = 36;
  if (this->networkmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->networkmode(), target);
  }

  // uint32 delayTime = 37;
  if (this->delaytime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->delaytime(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SignalInfo)
  return target;
}

size_t SignalInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SignalInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string mode = 1;
  if (this->mode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mode());
  }

  // string mcc = 2;
  if (this->mcc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mcc());
  }

  // string mnc = 3;
  if (this->mnc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mnc());
  }

  // string cellid = 4;
  if (this->cellid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cellid());
  }

  // string pcid = 5;
  if (this->pcid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pcid());
  }

  // string tac = 6;
  if (this->tac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tac());
  }

  // string arfcn = 7;
  if (this->arfcn().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->arfcn());
  }

  // string band = 8;
  if (this->band().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->band());
  }

  // string nr_dl_bandwidth = 9;
  if (this->nr_dl_bandwidth().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nr_dl_bandwidth());
  }

  // string rsrp = 10;
  if (this->rsrp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rsrp());
  }

  // string rsrq = 11;
  if (this->rsrq().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rsrq());
  }

  // string sinr = 12;
  if (this->sinr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sinr());
  }

  // string tx_power = 13;
  if (this->tx_power().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tx_power());
  }

  // string srxlev = 14;
  if (this->srxlev().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->srxlev());
  }

  // string cqi = 15;
  if (this->cqi().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cqi());
  }

  // string earfcn = 16;
  if (this->earfcn().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->earfcn());
  }

  // string freq_band_ind = 17;
  if (this->freq_band_ind().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->freq_band_ind());
  }

  // string ul_bandwidth = 18;
  if (this->ul_bandwidth().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ul_bandwidth());
  }

  // string dl_bandwidth = 19;
  if (this->dl_bandwidth().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dl_bandwidth());
  }

  // string is_tdd = 20;
  if (this->is_tdd().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->is_tdd());
  }

  // string rssi = 21;
  if (this->rssi().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rssi());
  }

  // string duplex_mode = 22;
  if (this->duplex_mode().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->duplex_mode());
  }

  // string isp = 28;
  if (this->isp().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->isp());
  }

  // string prx_rsrp = 30;
  if (this->prx_rsrp().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prx_rsrp());
  }

  // string drx_rsrp = 31;
  if (this->drx_rsrp().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->drx_rsrp());
  }

  // string rx2_rsrp = 32;
  if (this->rx2_rsrp().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rx2_rsrp());
  }

  // string rx3_rsrp = 33;
  if (this->rx3_rsrp().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rx3_rsrp());
  }

  // string box_sn = 34;
  if (this->box_sn().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->box_sn());
  }

  // double lng = 23;
  if (this->lng() != 0) {
    total_size += 2 + 8;
  }

  // double lat = 24;
  if (this->lat() != 0) {
    total_size += 2 + 8;
  }

  // float height = 25;
  if (this->height() != 0) {
    total_size += 2 + 4;
  }

  // uint32 timestamp = 26;
  if (this->timestamp() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());
  }

  // uint32 boxstate = 27;
  if (this->boxstate() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->boxstate());
  }

  // int32 tempMax = 29;
  if (this->tempmax() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tempmax());
  }

  // uint32 sim_use_seat = 35;
  if (this->sim_use_seat() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sim_use_seat());
  }

  // uint32 networkMode = 36;
  if (this->networkmode() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->networkmode());
  }

  // uint32 delayTime = 37;
  if (this->delaytime() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->delaytime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SignalInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignalInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SignalInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SignalInfo)
    MergeFrom(*source);
  }
}

void SignalInfo::MergeFrom(const SignalInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SignalInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mode().size() > 0) {

    mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mode_);
  }
  if (from.mcc().size() > 0) {

    mcc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mcc_);
  }
  if (from.mnc().size() > 0) {

    mnc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mnc_);
  }
  if (from.cellid().size() > 0) {

    cellid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cellid_);
  }
  if (from.pcid().size() > 0) {

    pcid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pcid_);
  }
  if (from.tac().size() > 0) {

    tac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tac_);
  }
  if (from.arfcn().size() > 0) {

    arfcn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.arfcn_);
  }
  if (from.band().size() > 0) {

    band_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.band_);
  }
  if (from.nr_dl_bandwidth().size() > 0) {

    nr_dl_bandwidth_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nr_dl_bandwidth_);
  }
  if (from.rsrp().size() > 0) {

    rsrp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rsrp_);
  }
  if (from.rsrq().size() > 0) {

    rsrq_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rsrq_);
  }
  if (from.sinr().size() > 0) {

    sinr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sinr_);
  }
  if (from.tx_power().size() > 0) {

    tx_power_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_power_);
  }
  if (from.srxlev().size() > 0) {

    srxlev_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.srxlev_);
  }
  if (from.cqi().size() > 0) {

    cqi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cqi_);
  }
  if (from.earfcn().size() > 0) {

    earfcn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.earfcn_);
  }
  if (from.freq_band_ind().size() > 0) {

    freq_band_ind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.freq_band_ind_);
  }
  if (from.ul_bandwidth().size() > 0) {

    ul_bandwidth_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ul_bandwidth_);
  }
  if (from.dl_bandwidth().size() > 0) {

    dl_bandwidth_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dl_bandwidth_);
  }
  if (from.is_tdd().size() > 0) {

    is_tdd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.is_tdd_);
  }
  if (from.rssi().size() > 0) {

    rssi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rssi_);
  }
  if (from.duplex_mode().size() > 0) {

    duplex_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.duplex_mode_);
  }
  if (from.isp().size() > 0) {

    isp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.isp_);
  }
  if (from.prx_rsrp().size() > 0) {

    prx_rsrp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prx_rsrp_);
  }
  if (from.drx_rsrp().size() > 0) {

    drx_rsrp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.drx_rsrp_);
  }
  if (from.rx2_rsrp().size() > 0) {

    rx2_rsrp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rx2_rsrp_);
  }
  if (from.rx3_rsrp().size() > 0) {

    rx3_rsrp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rx3_rsrp_);
  }
  if (from.box_sn().size() > 0) {

    box_sn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.box_sn_);
  }
  if (from.lng() != 0) {
    set_lng(from.lng());
  }
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.boxstate() != 0) {
    set_boxstate(from.boxstate());
  }
  if (from.tempmax() != 0) {
    set_tempmax(from.tempmax());
  }
  if (from.sim_use_seat() != 0) {
    set_sim_use_seat(from.sim_use_seat());
  }
  if (from.networkmode() != 0) {
    set_networkmode(from.networkmode());
  }
  if (from.delaytime() != 0) {
    set_delaytime(from.delaytime());
  }
}

void SignalInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SignalInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalInfo::CopyFrom(const SignalInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SignalInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalInfo::IsInitialized() const {
  return true;
}

void SignalInfo::Swap(SignalInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignalInfo::InternalSwap(SignalInfo* other) {
  using std::swap;
  mode_.Swap(&other->mode_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mcc_.Swap(&other->mcc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mnc_.Swap(&other->mnc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cellid_.Swap(&other->cellid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pcid_.Swap(&other->pcid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tac_.Swap(&other->tac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  arfcn_.Swap(&other->arfcn_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  band_.Swap(&other->band_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nr_dl_bandwidth_.Swap(&other->nr_dl_bandwidth_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rsrp_.Swap(&other->rsrp_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rsrq_.Swap(&other->rsrq_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sinr_.Swap(&other->sinr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tx_power_.Swap(&other->tx_power_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  srxlev_.Swap(&other->srxlev_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cqi_.Swap(&other->cqi_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  earfcn_.Swap(&other->earfcn_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  freq_band_ind_.Swap(&other->freq_band_ind_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ul_bandwidth_.Swap(&other->ul_bandwidth_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dl_bandwidth_.Swap(&other->dl_bandwidth_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  is_tdd_.Swap(&other->is_tdd_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rssi_.Swap(&other->rssi_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  duplex_mode_.Swap(&other->duplex_mode_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  isp_.Swap(&other->isp_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prx_rsrp_.Swap(&other->prx_rsrp_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  drx_rsrp_.Swap(&other->drx_rsrp_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rx2_rsrp_.Swap(&other->rx2_rsrp_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rx3_rsrp_.Swap(&other->rx3_rsrp_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  box_sn_.Swap(&other->box_sn_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lng_, other->lng_);
  swap(lat_, other->lat_);
  swap(height_, other->height_);
  swap(timestamp_, other->timestamp_);
  swap(boxstate_, other->boxstate_);
  swap(tempmax_, other->tempmax_);
  swap(sim_use_seat_, other->sim_use_seat_);
  swap(networkmode_, other->networkmode_);
  swap(delaytime_, other->delaytime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SignalInfo::GetMetadata() const {
  protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SignalList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignalList::kSignalInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignalList::SignalList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_SignalList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SignalList)
}
SignalList::SignalList(const SignalList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      signalinfo_(from.signalinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SignalList)
}

void SignalList::SharedCtor() {
}

SignalList::~SignalList() {
  // @@protoc_insertion_point(destructor:SignalList)
  SharedDtor();
}

void SignalList::SharedDtor() {
}

void SignalList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SignalList::descriptor() {
  ::protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SignalList& SignalList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_SignalList.base);
  return *internal_default_instance();
}


void SignalList::Clear() {
// @@protoc_insertion_point(message_clear_start:SignalList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signalinfo_.Clear();
  _internal_metadata_.Clear();
}

bool SignalList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SignalList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SignalInfo signalInfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_signalinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SignalList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SignalList)
  return false;
#undef DO_
}

void SignalList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SignalList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SignalInfo signalInfo = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signalinfo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->signalinfo(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:SignalList)
}

::google::protobuf::uint8* SignalList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SignalList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SignalInfo signalInfo = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signalinfo_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->signalinfo(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SignalList)
  return target;
}

size_t SignalList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SignalList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .SignalInfo signalInfo = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->signalinfo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->signalinfo(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SignalList)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignalList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SignalList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SignalList)
    MergeFrom(*source);
  }
}

void SignalList::MergeFrom(const SignalList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SignalList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signalinfo_.MergeFrom(from.signalinfo_);
}

void SignalList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SignalList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalList::CopyFrom(const SignalList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SignalList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalList::IsInitialized() const {
  return true;
}

void SignalList::Swap(SignalList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignalList::InternalSwap(SignalList* other) {
  using std::swap;
  CastToBase(&signalinfo_)->InternalSwap(CastToBase(&other->signalinfo_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SignalList::GetMetadata() const {
  protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UavState::InitAsDefaultInstance() {
  ::_UavState_default_instance_._instance.get_mutable()->flightcontrollerstate_ = const_cast< ::FlightControllerState*>(
      ::FlightControllerState::internal_default_instance());
  ::_UavState_default_instance_._instance.get_mutable()->batterystate_ = const_cast< ::BatteryState*>(
      ::BatteryState::internal_default_instance());
  ::_UavState_default_instance_._instance.get_mutable()->ptzstate_ = const_cast< ::PtzState*>(
      ::PtzState::internal_default_instance());
  ::_UavState_default_instance_._instance.get_mutable()->camerastate_ = const_cast< ::CameraState*>(
      ::CameraState::internal_default_instance());
  ::_UavState_default_instance_._instance.get_mutable()->missionstate_ = const_cast< ::MissionState*>(
      ::MissionState::internal_default_instance());
  ::_UavState_default_instance_._instance.get_mutable()->avoidancedata_ = const_cast< ::AvoidanceData*>(
      ::AvoidanceData::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UavState::kFlightControllerStateFieldNumber;
const int UavState::kBatteryStateFieldNumber;
const int UavState::kPtzStateFieldNumber;
const int UavState::kCameraStateFieldNumber;
const int UavState::kMissionStateFieldNumber;
const int UavState::kBoxSnFieldNumber;
const int UavState::kAvoidanceDataFieldNumber;
const int UavState::kHmsAlarmDataFieldNumber;
const int UavState::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UavState::UavState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_UavState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:UavState)
}
UavState::UavState(const UavState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      hmsalarmdata_(from.hmsalarmdata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  boxsn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.boxsn().size() > 0) {
    boxsn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.boxsn_);
  }
  if (from.has_flightcontrollerstate()) {
    flightcontrollerstate_ = new ::FlightControllerState(*from.flightcontrollerstate_);
  } else {
    flightcontrollerstate_ = NULL;
  }
  if (from.has_batterystate()) {
    batterystate_ = new ::BatteryState(*from.batterystate_);
  } else {
    batterystate_ = NULL;
  }
  if (from.has_ptzstate()) {
    ptzstate_ = new ::PtzState(*from.ptzstate_);
  } else {
    ptzstate_ = NULL;
  }
  if (from.has_camerastate()) {
    camerastate_ = new ::CameraState(*from.camerastate_);
  } else {
    camerastate_ = NULL;
  }
  if (from.has_missionstate()) {
    missionstate_ = new ::MissionState(*from.missionstate_);
  } else {
    missionstate_ = NULL;
  }
  if (from.has_avoidancedata()) {
    avoidancedata_ = new ::AvoidanceData(*from.avoidancedata_);
  } else {
    avoidancedata_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:UavState)
}

void UavState::SharedCtor() {
  boxsn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&flightcontrollerstate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&flightcontrollerstate_)) + sizeof(timestamp_));
}

UavState::~UavState() {
  // @@protoc_insertion_point(destructor:UavState)
  SharedDtor();
}

void UavState::SharedDtor() {
  boxsn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete flightcontrollerstate_;
  if (this != internal_default_instance()) delete batterystate_;
  if (this != internal_default_instance()) delete ptzstate_;
  if (this != internal_default_instance()) delete camerastate_;
  if (this != internal_default_instance()) delete missionstate_;
  if (this != internal_default_instance()) delete avoidancedata_;
}

void UavState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UavState::descriptor() {
  ::protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UavState& UavState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_UavState.base);
  return *internal_default_instance();
}


void UavState::Clear() {
// @@protoc_insertion_point(message_clear_start:UavState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hmsalarmdata_.Clear();
  boxsn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && flightcontrollerstate_ != NULL) {
    delete flightcontrollerstate_;
  }
  flightcontrollerstate_ = NULL;
  if (GetArenaNoVirtual() == NULL && batterystate_ != NULL) {
    delete batterystate_;
  }
  batterystate_ = NULL;
  if (GetArenaNoVirtual() == NULL && ptzstate_ != NULL) {
    delete ptzstate_;
  }
  ptzstate_ = NULL;
  if (GetArenaNoVirtual() == NULL && camerastate_ != NULL) {
    delete camerastate_;
  }
  camerastate_ = NULL;
  if (GetArenaNoVirtual() == NULL && missionstate_ != NULL) {
    delete missionstate_;
  }
  missionstate_ = NULL;
  if (GetArenaNoVirtual() == NULL && avoidancedata_ != NULL) {
    delete avoidancedata_;
  }
  avoidancedata_ = NULL;
  timestamp_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool UavState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UavState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .FlightControllerState flightControllerState = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_flightcontrollerstate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .BatteryState batteryState = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_batterystate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PtzState ptzState = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ptzstate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CameraState cameraState = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_camerastate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MissionState missionState = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_missionstate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string boxSn = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boxsn()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->boxsn().data(), static_cast<int>(this->boxsn().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "UavState.boxSn"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AvoidanceData avoidanceData = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_avoidancedata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .HmsAlarmData hmsAlarmData = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_hmsalarmdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UavState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UavState)
  return false;
#undef DO_
}

void UavState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UavState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .FlightControllerState flightControllerState = 1;
  if (this->has_flightcontrollerstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_flightcontrollerstate(), output);
  }

  // .BatteryState batteryState = 2;
  if (this->has_batterystate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_batterystate(), output);
  }

  // .PtzState ptzState = 3;
  if (this->has_ptzstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_ptzstate(), output);
  }

  // .CameraState cameraState = 4;
  if (this->has_camerastate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_camerastate(), output);
  }

  // .MissionState missionState = 5;
  if (this->has_missionstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_missionstate(), output);
  }

  // string boxSn = 6;
  if (this->boxsn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->boxsn().data(), static_cast<int>(this->boxsn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "UavState.boxSn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->boxsn(), output);
  }

  // .AvoidanceData avoidanceData = 7;
  if (this->has_avoidancedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_avoidancedata(), output);
  }

  // repeated .HmsAlarmData hmsAlarmData = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hmsalarmdata_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->hmsalarmdata(static_cast<int>(i)),
      output);
  }

  // uint64 timestamp = 9;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:UavState)
}

::google::protobuf::uint8* UavState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UavState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .FlightControllerState flightControllerState = 1;
  if (this->has_flightcontrollerstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_flightcontrollerstate(), deterministic, target);
  }

  // .BatteryState batteryState = 2;
  if (this->has_batterystate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_batterystate(), deterministic, target);
  }

  // .PtzState ptzState = 3;
  if (this->has_ptzstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_ptzstate(), deterministic, target);
  }

  // .CameraState cameraState = 4;
  if (this->has_camerastate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_camerastate(), deterministic, target);
  }

  // .MissionState missionState = 5;
  if (this->has_missionstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_missionstate(), deterministic, target);
  }

  // string boxSn = 6;
  if (this->boxsn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->boxsn().data(), static_cast<int>(this->boxsn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "UavState.boxSn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->boxsn(), target);
  }

  // .AvoidanceData avoidanceData = 7;
  if (this->has_avoidancedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_avoidancedata(), deterministic, target);
  }

  // repeated .HmsAlarmData hmsAlarmData = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hmsalarmdata_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->hmsalarmdata(static_cast<int>(i)), deterministic, target);
  }

  // uint64 timestamp = 9;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UavState)
  return target;
}

size_t UavState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UavState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .HmsAlarmData hmsAlarmData = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->hmsalarmdata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->hmsalarmdata(static_cast<int>(i)));
    }
  }

  // string boxSn = 6;
  if (this->boxsn().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->boxsn());
  }

  // .FlightControllerState flightControllerState = 1;
  if (this->has_flightcontrollerstate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *flightcontrollerstate_);
  }

  // .BatteryState batteryState = 2;
  if (this->has_batterystate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *batterystate_);
  }

  // .PtzState ptzState = 3;
  if (this->has_ptzstate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ptzstate_);
  }

  // .CameraState cameraState = 4;
  if (this->has_camerastate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *camerastate_);
  }

  // .MissionState missionState = 5;
  if (this->has_missionstate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *missionstate_);
  }

  // .AvoidanceData avoidanceData = 7;
  if (this->has_avoidancedata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *avoidancedata_);
  }

  // uint64 timestamp = 9;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UavState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UavState)
  GOOGLE_DCHECK_NE(&from, this);
  const UavState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UavState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UavState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UavState)
    MergeFrom(*source);
  }
}

void UavState::MergeFrom(const UavState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UavState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hmsalarmdata_.MergeFrom(from.hmsalarmdata_);
  if (from.boxsn().size() > 0) {

    boxsn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.boxsn_);
  }
  if (from.has_flightcontrollerstate()) {
    mutable_flightcontrollerstate()->::FlightControllerState::MergeFrom(from.flightcontrollerstate());
  }
  if (from.has_batterystate()) {
    mutable_batterystate()->::BatteryState::MergeFrom(from.batterystate());
  }
  if (from.has_ptzstate()) {
    mutable_ptzstate()->::PtzState::MergeFrom(from.ptzstate());
  }
  if (from.has_camerastate()) {
    mutable_camerastate()->::CameraState::MergeFrom(from.camerastate());
  }
  if (from.has_missionstate()) {
    mutable_missionstate()->::MissionState::MergeFrom(from.missionstate());
  }
  if (from.has_avoidancedata()) {
    mutable_avoidancedata()->::AvoidanceData::MergeFrom(from.avoidancedata());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void UavState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UavState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UavState::CopyFrom(const UavState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UavState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UavState::IsInitialized() const {
  return true;
}

void UavState::Swap(UavState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UavState::InternalSwap(UavState* other) {
  using std::swap;
  CastToBase(&hmsalarmdata_)->InternalSwap(CastToBase(&other->hmsalarmdata_));
  boxsn_.Swap(&other->boxsn_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flightcontrollerstate_, other->flightcontrollerstate_);
  swap(batterystate_, other->batterystate_);
  swap(ptzstate_, other->ptzstate_);
  swap(camerastate_, other->camerastate_);
  swap(missionstate_, other->missionstate_);
  swap(avoidancedata_, other->avoidancedata_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UavState::GetMetadata() const {
  protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FlightControllerState::InitAsDefaultInstance() {
  ::_FlightControllerState_default_instance_._instance.get_mutable()->startpoint_ = const_cast< ::PointData*>(
      ::PointData::internal_default_instance());
  ::_FlightControllerState_default_instance_._instance.get_mutable()->homepoint_ = const_cast< ::PointData*>(
      ::PointData::internal_default_instance());
  ::_FlightControllerState_default_instance_._instance.get_mutable()->targetpoint_ = const_cast< ::PointData*>(
      ::PointData::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlightControllerState::kSatelliteCountFieldNumber;
const int FlightControllerState::kGpsSignalLevelFieldNumber;
const int FlightControllerState::kFlightModeFieldNumber;
const int FlightControllerState::kFlightStatusFieldNumber;
const int FlightControllerState::kStartPointFieldNumber;
const int FlightControllerState::kHomePointFieldNumber;
const int FlightControllerState::kHomeHeightFieldNumber;
const int FlightControllerState::kSafeLineFieldNumber;
const int FlightControllerState::kDeviceStatusFieldNumber;
const int FlightControllerState::kUwbNodeCountFieldNumber;
const int FlightControllerState::kRcModeFieldNumber;
const int FlightControllerState::kIsEmergencyBrakeingFieldNumber;
const int FlightControllerState::kOutFlyAreaFlagFieldNumber;
const int FlightControllerState::kInNoFlyAreaFlagFieldNumber;
const int FlightControllerState::kTargetPointFieldNumber;
const int FlightControllerState::kBatteryGohomeFieldNumber;
const int FlightControllerState::kAutoLowGohomeFieldNumber;
const int FlightControllerState::kRcConnectedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlightControllerState::FlightControllerState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_FlightControllerState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:FlightControllerState)
}
FlightControllerState::FlightControllerState(const FlightControllerState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rcmode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rcmode().size() > 0) {
    rcmode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rcmode_);
  }
  if (from.has_startpoint()) {
    startpoint_ = new ::PointData(*from.startpoint_);
  } else {
    startpoint_ = NULL;
  }
  if (from.has_homepoint()) {
    homepoint_ = new ::PointData(*from.homepoint_);
  } else {
    homepoint_ = NULL;
  }
  if (from.has_targetpoint()) {
    targetpoint_ = new ::PointData(*from.targetpoint_);
  } else {
    targetpoint_ = NULL;
  }
  ::memcpy(&satellitecount_, &from.satellitecount_,
    static_cast<size_t>(reinterpret_cast<char*>(&rcconnected_) -
    reinterpret_cast<char*>(&satellitecount_)) + sizeof(rcconnected_));
  // @@protoc_insertion_point(copy_constructor:FlightControllerState)
}

void FlightControllerState::SharedCtor() {
  rcmode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&startpoint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rcconnected_) -
      reinterpret_cast<char*>(&startpoint_)) + sizeof(rcconnected_));
}

FlightControllerState::~FlightControllerState() {
  // @@protoc_insertion_point(destructor:FlightControllerState)
  SharedDtor();
}

void FlightControllerState::SharedDtor() {
  rcmode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete startpoint_;
  if (this != internal_default_instance()) delete homepoint_;
  if (this != internal_default_instance()) delete targetpoint_;
}

void FlightControllerState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FlightControllerState::descriptor() {
  ::protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FlightControllerState& FlightControllerState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_FlightControllerState.base);
  return *internal_default_instance();
}


void FlightControllerState::Clear() {
// @@protoc_insertion_point(message_clear_start:FlightControllerState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rcmode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && startpoint_ != NULL) {
    delete startpoint_;
  }
  startpoint_ = NULL;
  if (GetArenaNoVirtual() == NULL && homepoint_ != NULL) {
    delete homepoint_;
  }
  homepoint_ = NULL;
  if (GetArenaNoVirtual() == NULL && targetpoint_ != NULL) {
    delete targetpoint_;
  }
  targetpoint_ = NULL;
  ::memset(&satellitecount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rcconnected_) -
      reinterpret_cast<char*>(&satellitecount_)) + sizeof(rcconnected_));
  _internal_metadata_.Clear();
}

bool FlightControllerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FlightControllerState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 satelliteCount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &satellitecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gpsSignalLevel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gpssignallevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 flightMode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flightmode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 flightStatus = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flightstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PointData startPoint = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_startpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PointData homePoint = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_homepoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 homeHeight = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &homeheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 safeLine = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &safeline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 deviceStatus = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &devicestatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uwbNodeCount = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uwbnodecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rcMode = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rcmode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rcmode().data(), static_cast<int>(this->rcmode().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FlightControllerState.rcMode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 isEmergencyBrakeing = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isemergencybrakeing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 outFlyAreaFlag = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &outflyareaflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 inNoFlyAreaFlag = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &innoflyareaflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PointData targetPoint = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_targetpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 batteryGohome = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batterygohome_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 autoLowGohome = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &autolowgohome_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rcConnected = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rcconnected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FlightControllerState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FlightControllerState)
  return false;
#undef DO_
}

void FlightControllerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FlightControllerState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 satelliteCount = 1;
  if (this->satellitecount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->satellitecount(), output);
  }

  // uint32 gpsSignalLevel = 2;
  if (this->gpssignallevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gpssignallevel(), output);
  }

  // uint32 flightMode = 3;
  if (this->flightmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flightmode(), output);
  }

  // uint32 flightStatus = 4;
  if (this->flightstatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flightstatus(), output);
  }

  // .PointData startPoint = 5;
  if (this->has_startpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_startpoint(), output);
  }

  // .PointData homePoint = 6;
  if (this->has_homepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_homepoint(), output);
  }

  // int32 homeHeight = 7;
  if (this->homeheight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->homeheight(), output);
  }

  // uint32 safeLine = 8;
  if (this->safeline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->safeline(), output);
  }

  // uint32 deviceStatus = 9;
  if (this->devicestatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->devicestatus(), output);
  }

  // uint32 uwbNodeCount = 10;
  if (this->uwbnodecount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->uwbnodecount(), output);
  }

  // string rcMode = 11;
  if (this->rcmode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rcmode().data(), static_cast<int>(this->rcmode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FlightControllerState.rcMode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->rcmode(), output);
  }

  // uint32 isEmergencyBrakeing = 12;
  if (this->isemergencybrakeing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->isemergencybrakeing(), output);
  }

  // uint32 outFlyAreaFlag = 13;
  if (this->outflyareaflag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->outflyareaflag(), output);
  }

  // uint32 inNoFlyAreaFlag = 14;
  if (this->innoflyareaflag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->innoflyareaflag(), output);
  }

  // .PointData targetPoint = 15;
  if (this->has_targetpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_internal_targetpoint(), output);
  }

  // uint32 batteryGohome = 16;
  if (this->batterygohome() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->batterygohome(), output);
  }

  // uint32 autoLowGohome = 17;
  if (this->autolowgohome() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->autolowgohome(), output);
  }

  // uint32 rcConnected = 18;
  if (this->rcconnected() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->rcconnected(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:FlightControllerState)
}

::google::protobuf::uint8* FlightControllerState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FlightControllerState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 satelliteCount = 1;
  if (this->satellitecount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->satellitecount(), target);
  }

  // uint32 gpsSignalLevel = 2;
  if (this->gpssignallevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gpssignallevel(), target);
  }

  // uint32 flightMode = 3;
  if (this->flightmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flightmode(), target);
  }

  // uint32 flightStatus = 4;
  if (this->flightstatus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->flightstatus(), target);
  }

  // .PointData startPoint = 5;
  if (this->has_startpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_startpoint(), deterministic, target);
  }

  // .PointData homePoint = 6;
  if (this->has_homepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_homepoint(), deterministic, target);
  }

  // int32 homeHeight = 7;
  if (this->homeheight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->homeheight(), target);
  }

  // uint32 safeLine = 8;
  if (this->safeline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->safeline(), target);
  }

  // uint32 deviceStatus = 9;
  if (this->devicestatus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->devicestatus(), target);
  }

  // uint32 uwbNodeCount = 10;
  if (this->uwbnodecount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->uwbnodecount(), target);
  }

  // string rcMode = 11;
  if (this->rcmode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rcmode().data(), static_cast<int>(this->rcmode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FlightControllerState.rcMode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->rcmode(), target);
  }

  // uint32 isEmergencyBrakeing = 12;
  if (this->isemergencybrakeing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->isemergencybrakeing(), target);
  }

  // uint32 outFlyAreaFlag = 13;
  if (this->outflyareaflag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->outflyareaflag(), target);
  }

  // uint32 inNoFlyAreaFlag = 14;
  if (this->innoflyareaflag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->innoflyareaflag(), target);
  }

  // .PointData targetPoint = 15;
  if (this->has_targetpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->_internal_targetpoint(), deterministic, target);
  }

  // uint32 batteryGohome = 16;
  if (this->batterygohome() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->batterygohome(), target);
  }

  // uint32 autoLowGohome = 17;
  if (this->autolowgohome() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->autolowgohome(), target);
  }

  // uint32 rcConnected = 18;
  if (this->rcconnected() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->rcconnected(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FlightControllerState)
  return target;
}

size_t FlightControllerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FlightControllerState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string rcMode = 11;
  if (this->rcmode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rcmode());
  }

  // .PointData startPoint = 5;
  if (this->has_startpoint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *startpoint_);
  }

  // .PointData homePoint = 6;
  if (this->has_homepoint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *homepoint_);
  }

  // .PointData targetPoint = 15;
  if (this->has_targetpoint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *targetpoint_);
  }

  // uint32 satelliteCount = 1;
  if (this->satellitecount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->satellitecount());
  }

  // uint32 gpsSignalLevel = 2;
  if (this->gpssignallevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gpssignallevel());
  }

  // uint32 flightMode = 3;
  if (this->flightmode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flightmode());
  }

  // uint32 flightStatus = 4;
  if (this->flightstatus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flightstatus());
  }

  // int32 homeHeight = 7;
  if (this->homeheight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->homeheight());
  }

  // uint32 safeLine = 8;
  if (this->safeline() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->safeline());
  }

  // uint32 deviceStatus = 9;
  if (this->devicestatus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->devicestatus());
  }

  // uint32 uwbNodeCount = 10;
  if (this->uwbnodecount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uwbnodecount());
  }

  // uint32 isEmergencyBrakeing = 12;
  if (this->isemergencybrakeing() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->isemergencybrakeing());
  }

  // uint32 outFlyAreaFlag = 13;
  if (this->outflyareaflag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->outflyareaflag());
  }

  // uint32 inNoFlyAreaFlag = 14;
  if (this->innoflyareaflag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->innoflyareaflag());
  }

  // uint32 batteryGohome = 16;
  if (this->batterygohome() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->batterygohome());
  }

  // uint32 autoLowGohome = 17;
  if (this->autolowgohome() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->autolowgohome());
  }

  // uint32 rcConnected = 18;
  if (this->rcconnected() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rcconnected());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlightControllerState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FlightControllerState)
  GOOGLE_DCHECK_NE(&from, this);
  const FlightControllerState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FlightControllerState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FlightControllerState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FlightControllerState)
    MergeFrom(*source);
  }
}

void FlightControllerState::MergeFrom(const FlightControllerState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FlightControllerState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rcmode().size() > 0) {

    rcmode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rcmode_);
  }
  if (from.has_startpoint()) {
    mutable_startpoint()->::PointData::MergeFrom(from.startpoint());
  }
  if (from.has_homepoint()) {
    mutable_homepoint()->::PointData::MergeFrom(from.homepoint());
  }
  if (from.has_targetpoint()) {
    mutable_targetpoint()->::PointData::MergeFrom(from.targetpoint());
  }
  if (from.satellitecount() != 0) {
    set_satellitecount(from.satellitecount());
  }
  if (from.gpssignallevel() != 0) {
    set_gpssignallevel(from.gpssignallevel());
  }
  if (from.flightmode() != 0) {
    set_flightmode(from.flightmode());
  }
  if (from.flightstatus() != 0) {
    set_flightstatus(from.flightstatus());
  }
  if (from.homeheight() != 0) {
    set_homeheight(from.homeheight());
  }
  if (from.safeline() != 0) {
    set_safeline(from.safeline());
  }
  if (from.devicestatus() != 0) {
    set_devicestatus(from.devicestatus());
  }
  if (from.uwbnodecount() != 0) {
    set_uwbnodecount(from.uwbnodecount());
  }
  if (from.isemergencybrakeing() != 0) {
    set_isemergencybrakeing(from.isemergencybrakeing());
  }
  if (from.outflyareaflag() != 0) {
    set_outflyareaflag(from.outflyareaflag());
  }
  if (from.innoflyareaflag() != 0) {
    set_innoflyareaflag(from.innoflyareaflag());
  }
  if (from.batterygohome() != 0) {
    set_batterygohome(from.batterygohome());
  }
  if (from.autolowgohome() != 0) {
    set_autolowgohome(from.autolowgohome());
  }
  if (from.rcconnected() != 0) {
    set_rcconnected(from.rcconnected());
  }
}

void FlightControllerState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FlightControllerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlightControllerState::CopyFrom(const FlightControllerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FlightControllerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlightControllerState::IsInitialized() const {
  return true;
}

void FlightControllerState::Swap(FlightControllerState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlightControllerState::InternalSwap(FlightControllerState* other) {
  using std::swap;
  rcmode_.Swap(&other->rcmode_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(startpoint_, other->startpoint_);
  swap(homepoint_, other->homepoint_);
  swap(targetpoint_, other->targetpoint_);
  swap(satellitecount_, other->satellitecount_);
  swap(gpssignallevel_, other->gpssignallevel_);
  swap(flightmode_, other->flightmode_);
  swap(flightstatus_, other->flightstatus_);
  swap(homeheight_, other->homeheight_);
  swap(safeline_, other->safeline_);
  swap(devicestatus_, other->devicestatus_);
  swap(uwbnodecount_, other->uwbnodecount_);
  swap(isemergencybrakeing_, other->isemergencybrakeing_);
  swap(outflyareaflag_, other->outflyareaflag_);
  swap(innoflyareaflag_, other->innoflyareaflag_);
  swap(batterygohome_, other->batterygohome_);
  swap(autolowgohome_, other->autolowgohome_);
  swap(rcconnected_, other->rcconnected_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FlightControllerState::GetMetadata() const {
  protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BatteryState::InitAsDefaultInstance() {
  ::_BatteryState_default_instance_._instance.get_mutable()->firstbatteryinfo_ = const_cast< ::BatteryStateInfo*>(
      ::BatteryStateInfo::internal_default_instance());
  ::_BatteryState_default_instance_._instance.get_mutable()->secondbatteryinfo_ = const_cast< ::BatteryStateInfo*>(
      ::BatteryStateInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatteryState::kBatteryNumFieldNumber;
const int BatteryState::kBatteryPowerFieldNumber;
const int BatteryState::kBatteryVoltageFieldNumber;
const int BatteryState::kFirstBatteryInfoFieldNumber;
const int BatteryState::kSecondBatteryInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatteryState::BatteryState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_BatteryState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:BatteryState)
}
BatteryState::BatteryState(const BatteryState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  batterypower_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.batterypower().size() > 0) {
    batterypower_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.batterypower_);
  }
  batteryvoltage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.batteryvoltage().size() > 0) {
    batteryvoltage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.batteryvoltage_);
  }
  if (from.has_firstbatteryinfo()) {
    firstbatteryinfo_ = new ::BatteryStateInfo(*from.firstbatteryinfo_);
  } else {
    firstbatteryinfo_ = NULL;
  }
  if (from.has_secondbatteryinfo()) {
    secondbatteryinfo_ = new ::BatteryStateInfo(*from.secondbatteryinfo_);
  } else {
    secondbatteryinfo_ = NULL;
  }
  batterynum_ = from.batterynum_;
  // @@protoc_insertion_point(copy_constructor:BatteryState)
}

void BatteryState::SharedCtor() {
  batterypower_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batteryvoltage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&firstbatteryinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&batterynum_) -
      reinterpret_cast<char*>(&firstbatteryinfo_)) + sizeof(batterynum_));
}

BatteryState::~BatteryState() {
  // @@protoc_insertion_point(destructor:BatteryState)
  SharedDtor();
}

void BatteryState::SharedDtor() {
  batterypower_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batteryvoltage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete firstbatteryinfo_;
  if (this != internal_default_instance()) delete secondbatteryinfo_;
}

void BatteryState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BatteryState::descriptor() {
  ::protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatteryState& BatteryState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_BatteryState.base);
  return *internal_default_instance();
}


void BatteryState::Clear() {
// @@protoc_insertion_point(message_clear_start:BatteryState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  batterypower_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batteryvoltage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && firstbatteryinfo_ != NULL) {
    delete firstbatteryinfo_;
  }
  firstbatteryinfo_ = NULL;
  if (GetArenaNoVirtual() == NULL && secondbatteryinfo_ != NULL) {
    delete secondbatteryinfo_;
  }
  secondbatteryinfo_ = NULL;
  batterynum_ = 0u;
  _internal_metadata_.Clear();
}

bool BatteryState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BatteryState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 batteryNum = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batterynum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string batteryPower = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_batterypower()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->batterypower().data(), static_cast<int>(this->batterypower().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BatteryState.batteryPower"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string batteryVoltage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_batteryvoltage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->batteryvoltage().data(), static_cast<int>(this->batteryvoltage().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BatteryState.batteryVoltage"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .BatteryStateInfo firstBatteryInfo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_firstbatteryinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .BatteryStateInfo secondBatteryInfo = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_secondbatteryinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BatteryState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BatteryState)
  return false;
#undef DO_
}

void BatteryState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BatteryState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 batteryNum = 1;
  if (this->batterynum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->batterynum(), output);
  }

  // string batteryPower = 2;
  if (this->batterypower().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->batterypower().data(), static_cast<int>(this->batterypower().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BatteryState.batteryPower");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->batterypower(), output);
  }

  // string batteryVoltage = 3;
  if (this->batteryvoltage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->batteryvoltage().data(), static_cast<int>(this->batteryvoltage().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BatteryState.batteryVoltage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->batteryvoltage(), output);
  }

  // .BatteryStateInfo firstBatteryInfo = 4;
  if (this->has_firstbatteryinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_firstbatteryinfo(), output);
  }

  // .BatteryStateInfo secondBatteryInfo = 5;
  if (this->has_secondbatteryinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_secondbatteryinfo(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:BatteryState)
}

::google::protobuf::uint8* BatteryState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:BatteryState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 batteryNum = 1;
  if (this->batterynum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->batterynum(), target);
  }

  // string batteryPower = 2;
  if (this->batterypower().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->batterypower().data(), static_cast<int>(this->batterypower().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BatteryState.batteryPower");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->batterypower(), target);
  }

  // string batteryVoltage = 3;
  if (this->batteryvoltage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->batteryvoltage().data(), static_cast<int>(this->batteryvoltage().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BatteryState.batteryVoltage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->batteryvoltage(), target);
  }

  // .BatteryStateInfo firstBatteryInfo = 4;
  if (this->has_firstbatteryinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_firstbatteryinfo(), deterministic, target);
  }

  // .BatteryStateInfo secondBatteryInfo = 5;
  if (this->has_secondbatteryinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_secondbatteryinfo(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BatteryState)
  return target;
}

size_t BatteryState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BatteryState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string batteryPower = 2;
  if (this->batterypower().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->batterypower());
  }

  // string batteryVoltage = 3;
  if (this->batteryvoltage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->batteryvoltage());
  }

  // .BatteryStateInfo firstBatteryInfo = 4;
  if (this->has_firstbatteryinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *firstbatteryinfo_);
  }

  // .BatteryStateInfo secondBatteryInfo = 5;
  if (this->has_secondbatteryinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *secondbatteryinfo_);
  }

  // uint32 batteryNum = 1;
  if (this->batterynum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->batterynum());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatteryState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BatteryState)
  GOOGLE_DCHECK_NE(&from, this);
  const BatteryState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatteryState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BatteryState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BatteryState)
    MergeFrom(*source);
  }
}

void BatteryState::MergeFrom(const BatteryState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BatteryState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.batterypower().size() > 0) {

    batterypower_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.batterypower_);
  }
  if (from.batteryvoltage().size() > 0) {

    batteryvoltage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.batteryvoltage_);
  }
  if (from.has_firstbatteryinfo()) {
    mutable_firstbatteryinfo()->::BatteryStateInfo::MergeFrom(from.firstbatteryinfo());
  }
  if (from.has_secondbatteryinfo()) {
    mutable_secondbatteryinfo()->::BatteryStateInfo::MergeFrom(from.secondbatteryinfo());
  }
  if (from.batterynum() != 0) {
    set_batterynum(from.batterynum());
  }
}

void BatteryState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BatteryState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatteryState::CopyFrom(const BatteryState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BatteryState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatteryState::IsInitialized() const {
  return true;
}

void BatteryState::Swap(BatteryState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatteryState::InternalSwap(BatteryState* other) {
  using std::swap;
  batterypower_.Swap(&other->batterypower_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  batteryvoltage_.Swap(&other->batteryvoltage_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(firstbatteryinfo_, other->firstbatteryinfo_);
  swap(secondbatteryinfo_, other->secondbatteryinfo_);
  swap(batterynum_, other->batterynum_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BatteryState::GetMetadata() const {
  protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BatteryStateInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatteryStateInfo::kIsBatteryEmbedFieldNumber;
const int BatteryStateInfo::kBatteryCapacityPercentFieldNumber;
const int BatteryStateInfo::kCurrentVoltageFieldNumber;
const int BatteryStateInfo::kCurrentElectricFieldNumber;
const int BatteryStateInfo::kFullCapacityFieldNumber;
const int BatteryStateInfo::kRemainedCapacityFieldNumber;
const int BatteryStateInfo::kBatteryTemperatureFieldNumber;
const int BatteryStateInfo::kCellCountFieldNumber;
const int BatteryStateInfo::kBatSOHStateFieldNumber;
const int BatteryStateInfo::kSopFieldNumber;
const int BatteryStateInfo::kHeatStateFieldNumber;
const int BatteryStateInfo::kSocStateFieldNumber;
const int BatteryStateInfo::kSelfCheckErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatteryStateInfo::BatteryStateInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_BatteryStateInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:BatteryStateInfo)
}
BatteryStateInfo::BatteryStateInfo(const BatteryStateInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&isbatteryembed_, &from.isbatteryembed_,
    static_cast<size_t>(reinterpret_cast<char*>(&selfcheckerror_) -
    reinterpret_cast<char*>(&isbatteryembed_)) + sizeof(selfcheckerror_));
  // @@protoc_insertion_point(copy_constructor:BatteryStateInfo)
}

void BatteryStateInfo::SharedCtor() {
  ::memset(&isbatteryembed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&selfcheckerror_) -
      reinterpret_cast<char*>(&isbatteryembed_)) + sizeof(selfcheckerror_));
}

BatteryStateInfo::~BatteryStateInfo() {
  // @@protoc_insertion_point(destructor:BatteryStateInfo)
  SharedDtor();
}

void BatteryStateInfo::SharedDtor() {
}

void BatteryStateInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BatteryStateInfo::descriptor() {
  ::protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatteryStateInfo& BatteryStateInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_BatteryStateInfo.base);
  return *internal_default_instance();
}


void BatteryStateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:BatteryStateInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&isbatteryembed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&selfcheckerror_) -
      reinterpret_cast<char*>(&isbatteryembed_)) + sizeof(selfcheckerror_));
  _internal_metadata_.Clear();
}

bool BatteryStateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BatteryStateInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 isBatteryEmbed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isbatteryembed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 batteryCapacityPercent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batterycapacitypercent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 currentVoltage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentvoltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 currentElectric = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentelectric_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 fullCapacity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fullcapacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 remainedCapacity = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remainedcapacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float batteryTemperature = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &batterytemperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cellCount = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 batSOHState = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batsohstate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sop = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 heatState = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heatstate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 socState = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &socstate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 selfCheckError = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selfcheckerror_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BatteryStateInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BatteryStateInfo)
  return false;
#undef DO_
}

void BatteryStateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BatteryStateInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 isBatteryEmbed = 1;
  if (this->isbatteryembed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->isbatteryembed(), output);
  }

  // uint32 batteryCapacityPercent = 2;
  if (this->batterycapacitypercent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->batterycapacitypercent(), output);
  }

  // int32 currentVoltage = 3;
  if (this->currentvoltage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->currentvoltage(), output);
  }

  // int32 currentElectric = 4;
  if (this->currentelectric() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->currentelectric(), output);
  }

  // uint32 fullCapacity = 5;
  if (this->fullcapacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->fullcapacity(), output);
  }

  // uint32 remainedCapacity = 6;
  if (this->remainedcapacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->remainedcapacity(), output);
  }

  // float batteryTemperature = 7;
  if (this->batterytemperature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->batterytemperature(), output);
  }

  // uint32 cellCount = 8;
  if (this->cellcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->cellcount(), output);
  }

  // uint32 batSOHState = 9;
  if (this->batsohstate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->batsohstate(), output);
  }

  // uint32 sop = 10;
  if (this->sop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->sop(), output);
  }

  // uint32 heatState = 11;
  if (this->heatstate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->heatstate(), output);
  }

  // uint32 socState = 12;
  if (this->socstate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->socstate(), output);
  }

  // uint32 selfCheckError = 13;
  if (this->selfcheckerror() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->selfcheckerror(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:BatteryStateInfo)
}

::google::protobuf::uint8* BatteryStateInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:BatteryStateInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 isBatteryEmbed = 1;
  if (this->isbatteryembed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->isbatteryembed(), target);
  }

  // uint32 batteryCapacityPercent = 2;
  if (this->batterycapacitypercent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->batterycapacitypercent(), target);
  }

  // int32 currentVoltage = 3;
  if (this->currentvoltage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->currentvoltage(), target);
  }

  // int32 currentElectric = 4;
  if (this->currentelectric() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->currentelectric(), target);
  }

  // uint32 fullCapacity = 5;
  if (this->fullcapacity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->fullcapacity(), target);
  }

  // uint32 remainedCapacity = 6;
  if (this->remainedcapacity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->remainedcapacity(), target);
  }

  // float batteryTemperature = 7;
  if (this->batterytemperature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->batterytemperature(), target);
  }

  // uint32 cellCount = 8;
  if (this->cellcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->cellcount(), target);
  }

  // uint32 batSOHState = 9;
  if (this->batsohstate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->batsohstate(), target);
  }

  // uint32 sop = 10;
  if (this->sop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->sop(), target);
  }

  // uint32 heatState = 11;
  if (this->heatstate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->heatstate(), target);
  }

  // uint32 socState = 12;
  if (this->socstate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->socstate(), target);
  }

  // uint32 selfCheckError = 13;
  if (this->selfcheckerror() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->selfcheckerror(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BatteryStateInfo)
  return target;
}

size_t BatteryStateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BatteryStateInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 isBatteryEmbed = 1;
  if (this->isbatteryembed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->isbatteryembed());
  }

  // uint32 batteryCapacityPercent = 2;
  if (this->batterycapacitypercent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->batterycapacitypercent());
  }

  // int32 currentVoltage = 3;
  if (this->currentvoltage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->currentvoltage());
  }

  // int32 currentElectric = 4;
  if (this->currentelectric() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->currentelectric());
  }

  // uint32 fullCapacity = 5;
  if (this->fullcapacity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fullcapacity());
  }

  // uint32 remainedCapacity = 6;
  if (this->remainedcapacity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remainedcapacity());
  }

  // float batteryTemperature = 7;
  if (this->batterytemperature() != 0) {
    total_size += 1 + 4;
  }

  // uint32 cellCount = 8;
  if (this->cellcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cellcount());
  }

  // uint32 batSOHState = 9;
  if (this->batsohstate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->batsohstate());
  }

  // uint32 sop = 10;
  if (this->sop() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sop());
  }

  // uint32 heatState = 11;
  if (this->heatstate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->heatstate());
  }

  // uint32 socState = 12;
  if (this->socstate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->socstate());
  }

  // uint32 selfCheckError = 13;
  if (this->selfcheckerror() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->selfcheckerror());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatteryStateInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BatteryStateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BatteryStateInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatteryStateInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BatteryStateInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BatteryStateInfo)
    MergeFrom(*source);
  }
}

void BatteryStateInfo::MergeFrom(const BatteryStateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BatteryStateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.isbatteryembed() != 0) {
    set_isbatteryembed(from.isbatteryembed());
  }
  if (from.batterycapacitypercent() != 0) {
    set_batterycapacitypercent(from.batterycapacitypercent());
  }
  if (from.currentvoltage() != 0) {
    set_currentvoltage(from.currentvoltage());
  }
  if (from.currentelectric() != 0) {
    set_currentelectric(from.currentelectric());
  }
  if (from.fullcapacity() != 0) {
    set_fullcapacity(from.fullcapacity());
  }
  if (from.remainedcapacity() != 0) {
    set_remainedcapacity(from.remainedcapacity());
  }
  if (from.batterytemperature() != 0) {
    set_batterytemperature(from.batterytemperature());
  }
  if (from.cellcount() != 0) {
    set_cellcount(from.cellcount());
  }
  if (from.batsohstate() != 0) {
    set_batsohstate(from.batsohstate());
  }
  if (from.sop() != 0) {
    set_sop(from.sop());
  }
  if (from.heatstate() != 0) {
    set_heatstate(from.heatstate());
  }
  if (from.socstate() != 0) {
    set_socstate(from.socstate());
  }
  if (from.selfcheckerror() != 0) {
    set_selfcheckerror(from.selfcheckerror());
  }
}

void BatteryStateInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BatteryStateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatteryStateInfo::CopyFrom(const BatteryStateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BatteryStateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatteryStateInfo::IsInitialized() const {
  return true;
}

void BatteryStateInfo::Swap(BatteryStateInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatteryStateInfo::InternalSwap(BatteryStateInfo* other) {
  using std::swap;
  swap(isbatteryembed_, other->isbatteryembed_);
  swap(batterycapacitypercent_, other->batterycapacitypercent_);
  swap(currentvoltage_, other->currentvoltage_);
  swap(currentelectric_, other->currentelectric_);
  swap(fullcapacity_, other->fullcapacity_);
  swap(remainedcapacity_, other->remainedcapacity_);
  swap(batterytemperature_, other->batterytemperature_);
  swap(cellcount_, other->cellcount_);
  swap(batsohstate_, other->batsohstate_);
  swap(sop_, other->sop_);
  swap(heatstate_, other->heatstate_);
  swap(socstate_, other->socstate_);
  swap(selfcheckerror_, other->selfcheckerror_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BatteryStateInfo::GetMetadata() const {
  protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PtzState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PtzState::kPitchFieldNumber;
const int PtzState::kRollFieldNumber;
const int PtzState::kYawFieldNumber;
const int PtzState::kGimbalModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PtzState::PtzState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_PtzState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PtzState)
}
PtzState::PtzState(const PtzState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pitch_, &from.pitch_,
    static_cast<size_t>(reinterpret_cast<char*>(&gimbalmode_) -
    reinterpret_cast<char*>(&pitch_)) + sizeof(gimbalmode_));
  // @@protoc_insertion_point(copy_constructor:PtzState)
}

void PtzState::SharedCtor() {
  ::memset(&pitch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gimbalmode_) -
      reinterpret_cast<char*>(&pitch_)) + sizeof(gimbalmode_));
}

PtzState::~PtzState() {
  // @@protoc_insertion_point(destructor:PtzState)
  SharedDtor();
}

void PtzState::SharedDtor() {
}

void PtzState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PtzState::descriptor() {
  ::protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PtzState& PtzState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_PtzState.base);
  return *internal_default_instance();
}


void PtzState::Clear() {
// @@protoc_insertion_point(message_clear_start:PtzState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pitch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gimbalmode_) -
      reinterpret_cast<char*>(&pitch_)) + sizeof(gimbalmode_));
  _internal_metadata_.Clear();
}

bool PtzState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PtzState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float pitch = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float roll = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gimbalMode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gimbalmode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PtzState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PtzState)
  return false;
#undef DO_
}

void PtzState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PtzState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float pitch = 1;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->pitch(), output);
  }

  // float roll = 2;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->roll(), output);
  }

  // float yaw = 3;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->yaw(), output);
  }

  // uint32 gimbalMode = 4;
  if (this->gimbalmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gimbalmode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PtzState)
}

::google::protobuf::uint8* PtzState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PtzState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float pitch = 1;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->pitch(), target);
  }

  // float roll = 2;
  if (this->roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->roll(), target);
  }

  // float yaw = 3;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->yaw(), target);
  }

  // uint32 gimbalMode = 4;
  if (this->gimbalmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gimbalmode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PtzState)
  return target;
}

size_t PtzState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PtzState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float pitch = 1;
  if (this->pitch() != 0) {
    total_size += 1 + 4;
  }

  // float roll = 2;
  if (this->roll() != 0) {
    total_size += 1 + 4;
  }

  // float yaw = 3;
  if (this->yaw() != 0) {
    total_size += 1 + 4;
  }

  // uint32 gimbalMode = 4;
  if (this->gimbalmode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gimbalmode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PtzState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PtzState)
  GOOGLE_DCHECK_NE(&from, this);
  const PtzState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PtzState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PtzState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PtzState)
    MergeFrom(*source);
  }
}

void PtzState::MergeFrom(const PtzState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PtzState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.roll() != 0) {
    set_roll(from.roll());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
  if (from.gimbalmode() != 0) {
    set_gimbalmode(from.gimbalmode());
  }
}

void PtzState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PtzState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PtzState::CopyFrom(const PtzState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PtzState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PtzState::IsInitialized() const {
  return true;
}

void PtzState::Swap(PtzState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PtzState::InternalSwap(PtzState* other) {
  using std::swap;
  swap(pitch_, other->pitch_);
  swap(roll_, other->roll_);
  swap(yaw_, other->yaw_);
  swap(gimbalmode_, other->gimbalmode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PtzState::GetMetadata() const {
  protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CameraState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraState::kModeFieldNumber;
const int CameraState::kIsRecordingFieldNumber;
const int CameraState::kRecordDurationFieldNumber;
const int CameraState::kSourceFieldNumber;
const int CameraState::kCameraFieldNumber;
const int CameraState::kZoomfactorFieldNumber;
const int CameraState::kWidthFieldNumber;
const int CameraState::kHeightFieldNumber;
const int CameraState::kFrameRateFieldNumber;
const int CameraState::kBitstreamFieldNumber;
const int CameraState::kPointThermometryingFieldNumber;
const int CameraState::kAreaThermometryingFieldNumber;
const int CameraState::kLaserRangingFieldNumber;
const int CameraState::kStorePercentFieldNumber;
const int CameraState::kTotalPhotoFieldNumber;
const int CameraState::kRemainedPhotoFieldNumber;
const int CameraState::kSendPhotoOverFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraState::CameraState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_CameraState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CameraState)
}
CameraState::CameraState(const CameraState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&sendphotooverflag_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(sendphotooverflag_));
  // @@protoc_insertion_point(copy_constructor:CameraState)
}

void CameraState::SharedCtor() {
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sendphotooverflag_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(sendphotooverflag_));
}

CameraState::~CameraState() {
  // @@protoc_insertion_point(destructor:CameraState)
  SharedDtor();
}

void CameraState::SharedDtor() {
}

void CameraState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CameraState::descriptor() {
  ::protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraState& CameraState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_CameraState.base);
  return *internal_default_instance();
}


void CameraState::Clear() {
// @@protoc_insertion_point(message_clear_start:CameraState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sendphotooverflag_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(sendphotooverflag_));
  _internal_metadata_.Clear();
}

bool CameraState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CameraState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 isRecording = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isrecording_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 recordDuration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recordduration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 source = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 camera = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camera_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float zoomfactor = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zoomfactor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 width = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 height = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 frameRate = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &framerate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 bitstream = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bitstream_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pointThermometrying = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pointthermometrying_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 areaThermometrying = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areathermometrying_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 laserRanging = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &laserranging_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float storePercent = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &storepercent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 totalPhoto = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalphoto_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 remainedPhoto = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remainedphoto_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sendPhotoOverFlag = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sendphotooverflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CameraState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CameraState)
  return false;
#undef DO_
}

void CameraState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CameraState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mode = 1;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mode(), output);
  }

  // uint32 isRecording = 2;
  if (this->isrecording() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->isrecording(), output);
  }

  // uint32 recordDuration = 3;
  if (this->recordduration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->recordduration(), output);
  }

  // uint32 source = 4;
  if (this->source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->source(), output);
  }

  // uint32 camera = 5;
  if (this->camera() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->camera(), output);
  }

  // float zoomfactor = 6;
  if (this->zoomfactor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->zoomfactor(), output);
  }

  // uint32 width = 7;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->width(), output);
  }

  // uint32 height = 8;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->height(), output);
  }

  // uint32 frameRate = 9;
  if (this->framerate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->framerate(), output);
  }

  // uint32 bitstream = 10;
  if (this->bitstream() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->bitstream(), output);
  }

  // uint32 pointThermometrying = 11;
  if (this->pointthermometrying() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->pointthermometrying(), output);
  }

  // uint32 areaThermometrying = 12;
  if (this->areathermometrying() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->areathermometrying(), output);
  }

  // uint32 laserRanging = 13;
  if (this->laserranging() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->laserranging(), output);
  }

  // float storePercent = 14;
  if (this->storepercent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->storepercent(), output);
  }

  // uint32 totalPhoto = 15;
  if (this->totalphoto() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->totalphoto(), output);
  }

  // uint32 remainedPhoto = 16;
  if (this->remainedphoto() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->remainedphoto(), output);
  }

  // uint32 sendPhotoOverFlag = 17;
  if (this->sendphotooverflag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->sendphotooverflag(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CameraState)
}

::google::protobuf::uint8* CameraState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CameraState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mode = 1;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mode(), target);
  }

  // uint32 isRecording = 2;
  if (this->isrecording() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->isrecording(), target);
  }

  // uint32 recordDuration = 3;
  if (this->recordduration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->recordduration(), target);
  }

  // uint32 source = 4;
  if (this->source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->source(), target);
  }

  // uint32 camera = 5;
  if (this->camera() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->camera(), target);
  }

  // float zoomfactor = 6;
  if (this->zoomfactor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->zoomfactor(), target);
  }

  // uint32 width = 7;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->width(), target);
  }

  // uint32 height = 8;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->height(), target);
  }

  // uint32 frameRate = 9;
  if (this->framerate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->framerate(), target);
  }

  // uint32 bitstream = 10;
  if (this->bitstream() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->bitstream(), target);
  }

  // uint32 pointThermometrying = 11;
  if (this->pointthermometrying() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->pointthermometrying(), target);
  }

  // uint32 areaThermometrying = 12;
  if (this->areathermometrying() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->areathermometrying(), target);
  }

  // uint32 laserRanging = 13;
  if (this->laserranging() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->laserranging(), target);
  }

  // float storePercent = 14;
  if (this->storepercent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->storepercent(), target);
  }

  // uint32 totalPhoto = 15;
  if (this->totalphoto() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->totalphoto(), target);
  }

  // uint32 remainedPhoto = 16;
  if (this->remainedphoto() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->remainedphoto(), target);
  }

  // uint32 sendPhotoOverFlag = 17;
  if (this->sendphotooverflag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->sendphotooverflag(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CameraState)
  return target;
}

size_t CameraState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CameraState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mode());
  }

  // uint32 isRecording = 2;
  if (this->isrecording() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->isrecording());
  }

  // uint32 recordDuration = 3;
  if (this->recordduration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->recordduration());
  }

  // uint32 source = 4;
  if (this->source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->source());
  }

  // uint32 camera = 5;
  if (this->camera() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->camera());
  }

  // float zoomfactor = 6;
  if (this->zoomfactor() != 0) {
    total_size += 1 + 4;
  }

  // uint32 width = 7;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  // uint32 height = 8;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  // uint32 frameRate = 9;
  if (this->framerate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->framerate());
  }

  // uint32 bitstream = 10;
  if (this->bitstream() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bitstream());
  }

  // uint32 pointThermometrying = 11;
  if (this->pointthermometrying() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pointthermometrying());
  }

  // uint32 areaThermometrying = 12;
  if (this->areathermometrying() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->areathermometrying());
  }

  // uint32 laserRanging = 13;
  if (this->laserranging() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->laserranging());
  }

  // float storePercent = 14;
  if (this->storepercent() != 0) {
    total_size += 1 + 4;
  }

  // uint32 totalPhoto = 15;
  if (this->totalphoto() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totalphoto());
  }

  // uint32 remainedPhoto = 16;
  if (this->remainedphoto() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remainedphoto());
  }

  // uint32 sendPhotoOverFlag = 17;
  if (this->sendphotooverflag() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sendphotooverflag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CameraState)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CameraState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CameraState)
    MergeFrom(*source);
  }
}

void CameraState::MergeFrom(const CameraState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CameraState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.isrecording() != 0) {
    set_isrecording(from.isrecording());
  }
  if (from.recordduration() != 0) {
    set_recordduration(from.recordduration());
  }
  if (from.source() != 0) {
    set_source(from.source());
  }
  if (from.camera() != 0) {
    set_camera(from.camera());
  }
  if (from.zoomfactor() != 0) {
    set_zoomfactor(from.zoomfactor());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.framerate() != 0) {
    set_framerate(from.framerate());
  }
  if (from.bitstream() != 0) {
    set_bitstream(from.bitstream());
  }
  if (from.pointthermometrying() != 0) {
    set_pointthermometrying(from.pointthermometrying());
  }
  if (from.areathermometrying() != 0) {
    set_areathermometrying(from.areathermometrying());
  }
  if (from.laserranging() != 0) {
    set_laserranging(from.laserranging());
  }
  if (from.storepercent() != 0) {
    set_storepercent(from.storepercent());
  }
  if (from.totalphoto() != 0) {
    set_totalphoto(from.totalphoto());
  }
  if (from.remainedphoto() != 0) {
    set_remainedphoto(from.remainedphoto());
  }
  if (from.sendphotooverflag() != 0) {
    set_sendphotooverflag(from.sendphotooverflag());
  }
}

void CameraState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CameraState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraState::CopyFrom(const CameraState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CameraState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraState::IsInitialized() const {
  return true;
}

void CameraState::Swap(CameraState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraState::InternalSwap(CameraState* other) {
  using std::swap;
  swap(mode_, other->mode_);
  swap(isrecording_, other->isrecording_);
  swap(recordduration_, other->recordduration_);
  swap(source_, other->source_);
  swap(camera_, other->camera_);
  swap(zoomfactor_, other->zoomfactor_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(framerate_, other->framerate_);
  swap(bitstream_, other->bitstream_);
  swap(pointthermometrying_, other->pointthermometrying_);
  swap(areathermometrying_, other->areathermometrying_);
  swap(laserranging_, other->laserranging_);
  swap(storepercent_, other->storepercent_);
  swap(totalphoto_, other->totalphoto_);
  swap(remainedphoto_, other->remainedphoto_);
  swap(sendphotooverflag_, other->sendphotooverflag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CameraState::GetMetadata() const {
  protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MissionState::InitAsDefaultInstance() {
  ::_MissionState_default_instance_._instance.get_mutable()->breakpoint_ = const_cast< ::BreakPoint*>(
      ::BreakPoint::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MissionState::kIsPauseFieldNumber;
const int MissionState::kTargetWaypointIndexFieldNumber;
const int MissionState::kIsWaypointFinishedFieldNumber;
const int MissionState::kPushVideoFieldNumber;
const int MissionState::kLock4GFieldNumber;
const int MissionState::kBoxModelFieldNumber;
const int MissionState::kMapPlayFieldNumber;
const int MissionState::kLoseActionFieldNumber;
const int MissionState::kIsPointControlFieldNumber;
const int MissionState::kIsUwbLandingFieldNumber;
const int MissionState::kIsPushVideoingFieldNumber;
const int MissionState::kIsDLandingFieldNumber;
const int MissionState::kPerceptionFlagFieldNumber;
const int MissionState::kIsPositionControlFieldNumber;
const int MissionState::kSendImgRtpFieldNumber;
const int MissionState::kBreakPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MissionState::MissionState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_MissionState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MissionState)
}
MissionState::MissionState(const MissionState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_breakpoint()) {
    breakpoint_ = new ::BreakPoint(*from.breakpoint_);
  } else {
    breakpoint_ = NULL;
  }
  ::memcpy(&ispause_, &from.ispause_,
    static_cast<size_t>(reinterpret_cast<char*>(&sendimgrtp_) -
    reinterpret_cast<char*>(&ispause_)) + sizeof(sendimgrtp_));
  // @@protoc_insertion_point(copy_constructor:MissionState)
}

void MissionState::SharedCtor() {
  ::memset(&breakpoint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sendimgrtp_) -
      reinterpret_cast<char*>(&breakpoint_)) + sizeof(sendimgrtp_));
}

MissionState::~MissionState() {
  // @@protoc_insertion_point(destructor:MissionState)
  SharedDtor();
}

void MissionState::SharedDtor() {
  if (this != internal_default_instance()) delete breakpoint_;
}

void MissionState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MissionState::descriptor() {
  ::protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MissionState& MissionState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_MissionState.base);
  return *internal_default_instance();
}


void MissionState::Clear() {
// @@protoc_insertion_point(message_clear_start:MissionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && breakpoint_ != NULL) {
    delete breakpoint_;
  }
  breakpoint_ = NULL;
  ::memset(&ispause_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sendimgrtp_) -
      reinterpret_cast<char*>(&ispause_)) + sizeof(sendimgrtp_));
  _internal_metadata_.Clear();
}

bool MissionState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MissionState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 isPause = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispause_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 targetWaypointIndex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetwaypointindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 isWaypointFinished = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iswaypointfinished_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pushVideo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pushvideo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lock4g = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lock4g_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 boxModel = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boxmodel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mapPlay = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapplay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 loseAction = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loseaction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 isPointControl = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispointcontrol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 isUwbLanding = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isuwblanding_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 isPushVideoing = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispushvideoing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 isDLanding = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isdlanding_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 perceptionFlag = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &perceptionflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 isPositionControl = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispositioncontrol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sendImgRtp = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sendimgrtp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .BreakPoint breakPoint = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_breakpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MissionState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MissionState)
  return false;
#undef DO_
}

void MissionState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MissionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 isPause = 1;
  if (this->ispause() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ispause(), output);
  }

  // uint32 targetWaypointIndex = 2;
  if (this->targetwaypointindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->targetwaypointindex(), output);
  }

  // uint32 isWaypointFinished = 3;
  if (this->iswaypointfinished() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->iswaypointfinished(), output);
  }

  // uint32 pushVideo = 4;
  if (this->pushvideo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pushvideo(), output);
  }

  // uint32 lock4g = 5;
  if (this->lock4g() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lock4g(), output);
  }

  // uint32 boxModel = 6;
  if (this->boxmodel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->boxmodel(), output);
  }

  // uint32 mapPlay = 7;
  if (this->mapplay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->mapplay(), output);
  }

  // uint32 loseAction = 8;
  if (this->loseaction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->loseaction(), output);
  }

  // uint32 isPointControl = 9;
  if (this->ispointcontrol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->ispointcontrol(), output);
  }

  // uint32 isUwbLanding = 10;
  if (this->isuwblanding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->isuwblanding(), output);
  }

  // uint32 isPushVideoing = 11;
  if (this->ispushvideoing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->ispushvideoing(), output);
  }

  // uint32 isDLanding = 12;
  if (this->isdlanding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->isdlanding(), output);
  }

  // uint32 perceptionFlag = 13;
  if (this->perceptionflag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->perceptionflag(), output);
  }

  // uint32 isPositionControl = 14;
  if (this->ispositioncontrol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->ispositioncontrol(), output);
  }

  // uint32 sendImgRtp = 15;
  if (this->sendimgrtp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->sendimgrtp(), output);
  }

  // .BreakPoint breakPoint = 16;
  if (this->has_breakpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_internal_breakpoint(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MissionState)
}

::google::protobuf::uint8* MissionState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MissionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 isPause = 1;
  if (this->ispause() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ispause(), target);
  }

  // uint32 targetWaypointIndex = 2;
  if (this->targetwaypointindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->targetwaypointindex(), target);
  }

  // uint32 isWaypointFinished = 3;
  if (this->iswaypointfinished() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->iswaypointfinished(), target);
  }

  // uint32 pushVideo = 4;
  if (this->pushvideo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pushvideo(), target);
  }

  // uint32 lock4g = 5;
  if (this->lock4g() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lock4g(), target);
  }

  // uint32 boxModel = 6;
  if (this->boxmodel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->boxmodel(), target);
  }

  // uint32 mapPlay = 7;
  if (this->mapplay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->mapplay(), target);
  }

  // uint32 loseAction = 8;
  if (this->loseaction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->loseaction(), target);
  }

  // uint32 isPointControl = 9;
  if (this->ispointcontrol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->ispointcontrol(), target);
  }

  // uint32 isUwbLanding = 10;
  if (this->isuwblanding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->isuwblanding(), target);
  }

  // uint32 isPushVideoing = 11;
  if (this->ispushvideoing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->ispushvideoing(), target);
  }

  // uint32 isDLanding = 12;
  if (this->isdlanding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->isdlanding(), target);
  }

  // uint32 perceptionFlag = 13;
  if (this->perceptionflag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->perceptionflag(), target);
  }

  // uint32 isPositionControl = 14;
  if (this->ispositioncontrol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->ispositioncontrol(), target);
  }

  // uint32 sendImgRtp = 15;
  if (this->sendimgrtp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->sendimgrtp(), target);
  }

  // .BreakPoint breakPoint = 16;
  if (this->has_breakpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->_internal_breakpoint(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MissionState)
  return target;
}

size_t MissionState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MissionState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .BreakPoint breakPoint = 16;
  if (this->has_breakpoint()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *breakpoint_);
  }

  // uint32 isPause = 1;
  if (this->ispause() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ispause());
  }

  // uint32 targetWaypointIndex = 2;
  if (this->targetwaypointindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->targetwaypointindex());
  }

  // uint32 isWaypointFinished = 3;
  if (this->iswaypointfinished() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->iswaypointfinished());
  }

  // uint32 pushVideo = 4;
  if (this->pushvideo() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pushvideo());
  }

  // uint32 lock4g = 5;
  if (this->lock4g() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lock4g());
  }

  // uint32 boxModel = 6;
  if (this->boxmodel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->boxmodel());
  }

  // uint32 mapPlay = 7;
  if (this->mapplay() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mapplay());
  }

  // uint32 loseAction = 8;
  if (this->loseaction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->loseaction());
  }

  // uint32 isPointControl = 9;
  if (this->ispointcontrol() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ispointcontrol());
  }

  // uint32 isUwbLanding = 10;
  if (this->isuwblanding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->isuwblanding());
  }

  // uint32 isPushVideoing = 11;
  if (this->ispushvideoing() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ispushvideoing());
  }

  // uint32 isDLanding = 12;
  if (this->isdlanding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->isdlanding());
  }

  // uint32 perceptionFlag = 13;
  if (this->perceptionflag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->perceptionflag());
  }

  // uint32 isPositionControl = 14;
  if (this->ispositioncontrol() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ispositioncontrol());
  }

  // uint32 sendImgRtp = 15;
  if (this->sendimgrtp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sendimgrtp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MissionState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MissionState)
  GOOGLE_DCHECK_NE(&from, this);
  const MissionState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MissionState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MissionState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MissionState)
    MergeFrom(*source);
  }
}

void MissionState::MergeFrom(const MissionState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MissionState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_breakpoint()) {
    mutable_breakpoint()->::BreakPoint::MergeFrom(from.breakpoint());
  }
  if (from.ispause() != 0) {
    set_ispause(from.ispause());
  }
  if (from.targetwaypointindex() != 0) {
    set_targetwaypointindex(from.targetwaypointindex());
  }
  if (from.iswaypointfinished() != 0) {
    set_iswaypointfinished(from.iswaypointfinished());
  }
  if (from.pushvideo() != 0) {
    set_pushvideo(from.pushvideo());
  }
  if (from.lock4g() != 0) {
    set_lock4g(from.lock4g());
  }
  if (from.boxmodel() != 0) {
    set_boxmodel(from.boxmodel());
  }
  if (from.mapplay() != 0) {
    set_mapplay(from.mapplay());
  }
  if (from.loseaction() != 0) {
    set_loseaction(from.loseaction());
  }
  if (from.ispointcontrol() != 0) {
    set_ispointcontrol(from.ispointcontrol());
  }
  if (from.isuwblanding() != 0) {
    set_isuwblanding(from.isuwblanding());
  }
  if (from.ispushvideoing() != 0) {
    set_ispushvideoing(from.ispushvideoing());
  }
  if (from.isdlanding() != 0) {
    set_isdlanding(from.isdlanding());
  }
  if (from.perceptionflag() != 0) {
    set_perceptionflag(from.perceptionflag());
  }
  if (from.ispositioncontrol() != 0) {
    set_ispositioncontrol(from.ispositioncontrol());
  }
  if (from.sendimgrtp() != 0) {
    set_sendimgrtp(from.sendimgrtp());
  }
}

void MissionState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MissionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionState::CopyFrom(const MissionState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MissionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionState::IsInitialized() const {
  return true;
}

void MissionState::Swap(MissionState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MissionState::InternalSwap(MissionState* other) {
  using std::swap;
  swap(breakpoint_, other->breakpoint_);
  swap(ispause_, other->ispause_);
  swap(targetwaypointindex_, other->targetwaypointindex_);
  swap(iswaypointfinished_, other->iswaypointfinished_);
  swap(pushvideo_, other->pushvideo_);
  swap(lock4g_, other->lock4g_);
  swap(boxmodel_, other->boxmodel_);
  swap(mapplay_, other->mapplay_);
  swap(loseaction_, other->loseaction_);
  swap(ispointcontrol_, other->ispointcontrol_);
  swap(isuwblanding_, other->isuwblanding_);
  swap(ispushvideoing_, other->ispushvideoing_);
  swap(isdlanding_, other->isdlanding_);
  swap(perceptionflag_, other->perceptionflag_);
  swap(ispositioncontrol_, other->ispositioncontrol_);
  swap(sendimgrtp_, other->sendimgrtp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MissionState::GetMetadata() const {
  protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BreakPoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BreakPoint::kStatusFieldNumber;
const int BreakPoint::kPointFieldNumber;
const int BreakPoint::kLngFieldNumber;
const int BreakPoint::kLatFieldNumber;
const int BreakPoint::kHeightFieldNumber;
const int BreakPoint::kTaskIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BreakPoint::BreakPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_BreakPoint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:BreakPoint)
}
BreakPoint::BreakPoint(const BreakPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&status_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:BreakPoint)
}

void BreakPoint::SharedCtor() {
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&status_)) + sizeof(height_));
}

BreakPoint::~BreakPoint() {
  // @@protoc_insertion_point(destructor:BreakPoint)
  SharedDtor();
}

void BreakPoint::SharedDtor() {
}

void BreakPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BreakPoint::descriptor() {
  ::protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BreakPoint& BreakPoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_BreakPoint.base);
  return *internal_default_instance();
}


void BreakPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:BreakPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&status_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

bool BreakPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BreakPoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lng = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lng_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lat = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 taskId = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &taskid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BreakPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BreakPoint)
  return false;
#undef DO_
}

void BreakPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BreakPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  // uint32 point = 2;
  if (this->point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->point(), output);
  }

  // double lng = 3;
  if (this->lng() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lng(), output);
  }

  // double lat = 4;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lat(), output);
  }

  // float height = 5;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->height(), output);
  }

  // uint64 taskId = 6;
  if (this->taskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->taskid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:BreakPoint)
}

::google::protobuf::uint8* BreakPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:BreakPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  // uint32 point = 2;
  if (this->point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->point(), target);
  }

  // double lng = 3;
  if (this->lng() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lng(), target);
  }

  // double lat = 4;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->lat(), target);
  }

  // float height = 5;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->height(), target);
  }

  // uint64 taskId = 6;
  if (this->taskid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->taskid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BreakPoint)
  return target;
}

size_t BreakPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BreakPoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  // uint32 point = 2;
  if (this->point() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->point());
  }

  // double lng = 3;
  if (this->lng() != 0) {
    total_size += 1 + 8;
  }

  // double lat = 4;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  // uint64 taskId = 6;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->taskid());
  }

  // float height = 5;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BreakPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BreakPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const BreakPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BreakPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BreakPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BreakPoint)
    MergeFrom(*source);
  }
}

void BreakPoint::MergeFrom(const BreakPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BreakPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.point() != 0) {
    set_point(from.point());
  }
  if (from.lng() != 0) {
    set_lng(from.lng());
  }
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.taskid() != 0) {
    set_taskid(from.taskid());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void BreakPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BreakPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BreakPoint::CopyFrom(const BreakPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BreakPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BreakPoint::IsInitialized() const {
  return true;
}

void BreakPoint::Swap(BreakPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BreakPoint::InternalSwap(BreakPoint* other) {
  using std::swap;
  swap(status_, other->status_);
  swap(point_, other->point_);
  swap(lng_, other->lng_);
  swap(lat_, other->lat_);
  swap(taskid_, other->taskid_);
  swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BreakPoint::GetMetadata() const {
  protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AvoidanceData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvoidanceData::kDownHealthFieldNumber;
const int AvoidanceData::kDownFieldNumber;
const int AvoidanceData::kFrontHealthFieldNumber;
const int AvoidanceData::kFrontFieldNumber;
const int AvoidanceData::kRightHealthFieldNumber;
const int AvoidanceData::kRightFieldNumber;
const int AvoidanceData::kBackHealthFieldNumber;
const int AvoidanceData::kBackFieldNumber;
const int AvoidanceData::kLeftHealthFieldNumber;
const int AvoidanceData::kLeftFieldNumber;
const int AvoidanceData::kUpHealthFieldNumber;
const int AvoidanceData::kUpFieldNumber;
const int AvoidanceData::kAvoidanceEnableStatusDownFieldNumber;
const int AvoidanceData::kAvoidanceEnableStatusUpFieldNumber;
const int AvoidanceData::kAvoidanceEnableStatusHorizontalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvoidanceData::AvoidanceData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_AvoidanceData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:AvoidanceData)
}
AvoidanceData::AvoidanceData(const AvoidanceData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&downhealth_, &from.downhealth_,
    static_cast<size_t>(reinterpret_cast<char*>(&avoidanceenablestatushorizontal_) -
    reinterpret_cast<char*>(&downhealth_)) + sizeof(avoidanceenablestatushorizontal_));
  // @@protoc_insertion_point(copy_constructor:AvoidanceData)
}

void AvoidanceData::SharedCtor() {
  ::memset(&downhealth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avoidanceenablestatushorizontal_) -
      reinterpret_cast<char*>(&downhealth_)) + sizeof(avoidanceenablestatushorizontal_));
}

AvoidanceData::~AvoidanceData() {
  // @@protoc_insertion_point(destructor:AvoidanceData)
  SharedDtor();
}

void AvoidanceData::SharedDtor() {
}

void AvoidanceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AvoidanceData::descriptor() {
  ::protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AvoidanceData& AvoidanceData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_AvoidanceData.base);
  return *internal_default_instance();
}


void AvoidanceData::Clear() {
// @@protoc_insertion_point(message_clear_start:AvoidanceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&downhealth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avoidanceenablestatushorizontal_) -
      reinterpret_cast<char*>(&downhealth_)) + sizeof(avoidanceenablestatushorizontal_));
  _internal_metadata_.Clear();
}

bool AvoidanceData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AvoidanceData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 downHealth = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &downhealth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float down = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &down_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 frontHealth = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fronthealth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float front = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &front_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rightHealth = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &righthealth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float right = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 backHealth = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &backhealth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float back = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &back_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 leftHealth = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lefthealth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float left = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 upHealth = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uphealth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float up = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &up_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 avoidanceEnableStatusDown = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avoidanceenablestatusdown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 avoidanceEnableStatusUp = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avoidanceenablestatusup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 avoidanceEnableStatusHorizontal = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avoidanceenablestatushorizontal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AvoidanceData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AvoidanceData)
  return false;
#undef DO_
}

void AvoidanceData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AvoidanceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 downHealth = 1;
  if (this->downhealth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->downhealth(), output);
  }

  // float down = 2;
  if (this->down() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->down(), output);
  }

  // uint32 frontHealth = 3;
  if (this->fronthealth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fronthealth(), output);
  }

  // float front = 4;
  if (this->front() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->front(), output);
  }

  // uint32 rightHealth = 5;
  if (this->righthealth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->righthealth(), output);
  }

  // float right = 6;
  if (this->right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->right(), output);
  }

  // uint32 backHealth = 7;
  if (this->backhealth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->backhealth(), output);
  }

  // float back = 8;
  if (this->back() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->back(), output);
  }

  // uint32 leftHealth = 9;
  if (this->lefthealth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->lefthealth(), output);
  }

  // float left = 10;
  if (this->left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->left(), output);
  }

  // uint32 upHealth = 11;
  if (this->uphealth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->uphealth(), output);
  }

  // float up = 12;
  if (this->up() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->up(), output);
  }

  // uint32 avoidanceEnableStatusDown = 13;
  if (this->avoidanceenablestatusdown() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->avoidanceenablestatusdown(), output);
  }

  // uint32 avoidanceEnableStatusUp = 14;
  if (this->avoidanceenablestatusup() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->avoidanceenablestatusup(), output);
  }

  // uint32 avoidanceEnableStatusHorizontal = 15;
  if (this->avoidanceenablestatushorizontal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->avoidanceenablestatushorizontal(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AvoidanceData)
}

::google::protobuf::uint8* AvoidanceData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AvoidanceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 downHealth = 1;
  if (this->downhealth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->downhealth(), target);
  }

  // float down = 2;
  if (this->down() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->down(), target);
  }

  // uint32 frontHealth = 3;
  if (this->fronthealth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fronthealth(), target);
  }

  // float front = 4;
  if (this->front() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->front(), target);
  }

  // uint32 rightHealth = 5;
  if (this->righthealth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->righthealth(), target);
  }

  // float right = 6;
  if (this->right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->right(), target);
  }

  // uint32 backHealth = 7;
  if (this->backhealth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->backhealth(), target);
  }

  // float back = 8;
  if (this->back() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->back(), target);
  }

  // uint32 leftHealth = 9;
  if (this->lefthealth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->lefthealth(), target);
  }

  // float left = 10;
  if (this->left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->left(), target);
  }

  // uint32 upHealth = 11;
  if (this->uphealth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->uphealth(), target);
  }

  // float up = 12;
  if (this->up() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->up(), target);
  }

  // uint32 avoidanceEnableStatusDown = 13;
  if (this->avoidanceenablestatusdown() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->avoidanceenablestatusdown(), target);
  }

  // uint32 avoidanceEnableStatusUp = 14;
  if (this->avoidanceenablestatusup() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->avoidanceenablestatusup(), target);
  }

  // uint32 avoidanceEnableStatusHorizontal = 15;
  if (this->avoidanceenablestatushorizontal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->avoidanceenablestatushorizontal(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AvoidanceData)
  return target;
}

size_t AvoidanceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AvoidanceData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 downHealth = 1;
  if (this->downhealth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->downhealth());
  }

  // float down = 2;
  if (this->down() != 0) {
    total_size += 1 + 4;
  }

  // uint32 frontHealth = 3;
  if (this->fronthealth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fronthealth());
  }

  // float front = 4;
  if (this->front() != 0) {
    total_size += 1 + 4;
  }

  // uint32 rightHealth = 5;
  if (this->righthealth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->righthealth());
  }

  // float right = 6;
  if (this->right() != 0) {
    total_size += 1 + 4;
  }

  // uint32 backHealth = 7;
  if (this->backhealth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->backhealth());
  }

  // float back = 8;
  if (this->back() != 0) {
    total_size += 1 + 4;
  }

  // uint32 leftHealth = 9;
  if (this->lefthealth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lefthealth());
  }

  // float left = 10;
  if (this->left() != 0) {
    total_size += 1 + 4;
  }

  // uint32 upHealth = 11;
  if (this->uphealth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uphealth());
  }

  // float up = 12;
  if (this->up() != 0) {
    total_size += 1 + 4;
  }

  // uint32 avoidanceEnableStatusDown = 13;
  if (this->avoidanceenablestatusdown() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->avoidanceenablestatusdown());
  }

  // uint32 avoidanceEnableStatusUp = 14;
  if (this->avoidanceenablestatusup() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->avoidanceenablestatusup());
  }

  // uint32 avoidanceEnableStatusHorizontal = 15;
  if (this->avoidanceenablestatushorizontal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->avoidanceenablestatushorizontal());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AvoidanceData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AvoidanceData)
  GOOGLE_DCHECK_NE(&from, this);
  const AvoidanceData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AvoidanceData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AvoidanceData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AvoidanceData)
    MergeFrom(*source);
  }
}

void AvoidanceData::MergeFrom(const AvoidanceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AvoidanceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.downhealth() != 0) {
    set_downhealth(from.downhealth());
  }
  if (from.down() != 0) {
    set_down(from.down());
  }
  if (from.fronthealth() != 0) {
    set_fronthealth(from.fronthealth());
  }
  if (from.front() != 0) {
    set_front(from.front());
  }
  if (from.righthealth() != 0) {
    set_righthealth(from.righthealth());
  }
  if (from.right() != 0) {
    set_right(from.right());
  }
  if (from.backhealth() != 0) {
    set_backhealth(from.backhealth());
  }
  if (from.back() != 0) {
    set_back(from.back());
  }
  if (from.lefthealth() != 0) {
    set_lefthealth(from.lefthealth());
  }
  if (from.left() != 0) {
    set_left(from.left());
  }
  if (from.uphealth() != 0) {
    set_uphealth(from.uphealth());
  }
  if (from.up() != 0) {
    set_up(from.up());
  }
  if (from.avoidanceenablestatusdown() != 0) {
    set_avoidanceenablestatusdown(from.avoidanceenablestatusdown());
  }
  if (from.avoidanceenablestatusup() != 0) {
    set_avoidanceenablestatusup(from.avoidanceenablestatusup());
  }
  if (from.avoidanceenablestatushorizontal() != 0) {
    set_avoidanceenablestatushorizontal(from.avoidanceenablestatushorizontal());
  }
}

void AvoidanceData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AvoidanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvoidanceData::CopyFrom(const AvoidanceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AvoidanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvoidanceData::IsInitialized() const {
  return true;
}

void AvoidanceData::Swap(AvoidanceData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvoidanceData::InternalSwap(AvoidanceData* other) {
  using std::swap;
  swap(downhealth_, other->downhealth_);
  swap(down_, other->down_);
  swap(fronthealth_, other->fronthealth_);
  swap(front_, other->front_);
  swap(righthealth_, other->righthealth_);
  swap(right_, other->right_);
  swap(backhealth_, other->backhealth_);
  swap(back_, other->back_);
  swap(lefthealth_, other->lefthealth_);
  swap(left_, other->left_);
  swap(uphealth_, other->uphealth_);
  swap(up_, other->up_);
  swap(avoidanceenablestatusdown_, other->avoidanceenablestatusdown_);
  swap(avoidanceenablestatusup_, other->avoidanceenablestatusup_);
  swap(avoidanceenablestatushorizontal_, other->avoidanceenablestatushorizontal_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AvoidanceData::GetMetadata() const {
  protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HmsAlarmData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HmsAlarmData::kAlarmIdFieldNumber;
const int HmsAlarmData::kReportLevelFieldNumber;
const int HmsAlarmData::kAlarmMssInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HmsAlarmData::HmsAlarmData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_HmsAlarmData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:HmsAlarmData)
}
HmsAlarmData::HmsAlarmData(const HmsAlarmData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  alarmmssinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.alarmmssinfo().size() > 0) {
    alarmmssinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alarmmssinfo_);
  }
  ::memcpy(&alarmid_, &from.alarmid_,
    static_cast<size_t>(reinterpret_cast<char*>(&reportlevel_) -
    reinterpret_cast<char*>(&alarmid_)) + sizeof(reportlevel_));
  // @@protoc_insertion_point(copy_constructor:HmsAlarmData)
}

void HmsAlarmData::SharedCtor() {
  alarmmssinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&alarmid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reportlevel_) -
      reinterpret_cast<char*>(&alarmid_)) + sizeof(reportlevel_));
}

HmsAlarmData::~HmsAlarmData() {
  // @@protoc_insertion_point(destructor:HmsAlarmData)
  SharedDtor();
}

void HmsAlarmData::SharedDtor() {
  alarmmssinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HmsAlarmData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HmsAlarmData::descriptor() {
  ::protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HmsAlarmData& HmsAlarmData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_HmsAlarmData.base);
  return *internal_default_instance();
}


void HmsAlarmData::Clear() {
// @@protoc_insertion_point(message_clear_start:HmsAlarmData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alarmmssinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&alarmid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reportlevel_) -
      reinterpret_cast<char*>(&alarmid_)) + sizeof(reportlevel_));
  _internal_metadata_.Clear();
}

bool HmsAlarmData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HmsAlarmData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 alarmId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &alarmid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 reportLevel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reportlevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string alarmMssInfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alarmmssinfo()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alarmmssinfo().data(), static_cast<int>(this->alarmmssinfo().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "HmsAlarmData.alarmMssInfo"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HmsAlarmData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HmsAlarmData)
  return false;
#undef DO_
}

void HmsAlarmData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HmsAlarmData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 alarmId = 1;
  if (this->alarmid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->alarmid(), output);
  }

  // uint32 reportLevel = 2;
  if (this->reportlevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reportlevel(), output);
  }

  // string alarmMssInfo = 3;
  if (this->alarmmssinfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alarmmssinfo().data(), static_cast<int>(this->alarmmssinfo().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HmsAlarmData.alarmMssInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->alarmmssinfo(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:HmsAlarmData)
}

::google::protobuf::uint8* HmsAlarmData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HmsAlarmData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 alarmId = 1;
  if (this->alarmid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->alarmid(), target);
  }

  // uint32 reportLevel = 2;
  if (this->reportlevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reportlevel(), target);
  }

  // string alarmMssInfo = 3;
  if (this->alarmmssinfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alarmmssinfo().data(), static_cast<int>(this->alarmmssinfo().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HmsAlarmData.alarmMssInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->alarmmssinfo(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HmsAlarmData)
  return target;
}

size_t HmsAlarmData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HmsAlarmData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string alarmMssInfo = 3;
  if (this->alarmmssinfo().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->alarmmssinfo());
  }

  // uint32 alarmId = 1;
  if (this->alarmid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->alarmid());
  }

  // uint32 reportLevel = 2;
  if (this->reportlevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reportlevel());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HmsAlarmData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HmsAlarmData)
  GOOGLE_DCHECK_NE(&from, this);
  const HmsAlarmData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HmsAlarmData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HmsAlarmData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HmsAlarmData)
    MergeFrom(*source);
  }
}

void HmsAlarmData::MergeFrom(const HmsAlarmData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HmsAlarmData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.alarmmssinfo().size() > 0) {

    alarmmssinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alarmmssinfo_);
  }
  if (from.alarmid() != 0) {
    set_alarmid(from.alarmid());
  }
  if (from.reportlevel() != 0) {
    set_reportlevel(from.reportlevel());
  }
}

void HmsAlarmData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HmsAlarmData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HmsAlarmData::CopyFrom(const HmsAlarmData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HmsAlarmData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HmsAlarmData::IsInitialized() const {
  return true;
}

void HmsAlarmData::Swap(HmsAlarmData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HmsAlarmData::InternalSwap(HmsAlarmData* other) {
  using std::swap;
  alarmmssinfo_.Swap(&other->alarmmssinfo_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(alarmid_, other->alarmid_);
  swap(reportlevel_, other->reportlevel_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HmsAlarmData::GetMetadata() const {
  protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UavStateList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UavStateList::kUavStatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UavStateList::UavStateList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_UavStateList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:UavStateList)
}
UavStateList::UavStateList(const UavStateList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      uavstates_(from.uavstates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:UavStateList)
}

void UavStateList::SharedCtor() {
}

UavStateList::~UavStateList() {
  // @@protoc_insertion_point(destructor:UavStateList)
  SharedDtor();
}

void UavStateList::SharedDtor() {
}

void UavStateList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UavStateList::descriptor() {
  ::protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UavStateList& UavStateList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_UavStateList.base);
  return *internal_default_instance();
}


void UavStateList::Clear() {
// @@protoc_insertion_point(message_clear_start:UavStateList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uavstates_.Clear();
  _internal_metadata_.Clear();
}

bool UavStateList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UavStateList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .UavState uavStates = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_uavstates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UavStateList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UavStateList)
  return false;
#undef DO_
}

void UavStateList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UavStateList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .UavState uavStates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->uavstates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->uavstates(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:UavStateList)
}

::google::protobuf::uint8* UavStateList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UavStateList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .UavState uavStates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->uavstates_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->uavstates(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UavStateList)
  return target;
}

size_t UavStateList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UavStateList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .UavState uavStates = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->uavstates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->uavstates(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UavStateList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UavStateList)
  GOOGLE_DCHECK_NE(&from, this);
  const UavStateList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UavStateList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UavStateList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UavStateList)
    MergeFrom(*source);
  }
}

void UavStateList::MergeFrom(const UavStateList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UavStateList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uavstates_.MergeFrom(from.uavstates_);
}

void UavStateList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UavStateList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UavStateList::CopyFrom(const UavStateList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UavStateList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UavStateList::IsInitialized() const {
  return true;
}

void UavStateList::Swap(UavStateList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UavStateList::InternalSwap(UavStateList* other) {
  using std::swap;
  CastToBase(&uavstates_)->InternalSwap(CastToBase(&other->uavstates_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UavStateList::GetMetadata() const {
  protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlanLineData::InitAsDefaultInstance() {
  ::_PlanLineData_default_instance_._instance.get_mutable()->takepoint_ = const_cast< ::HangarPoint*>(
      ::HangarPoint::internal_default_instance());
  ::_PlanLineData_default_instance_._instance.get_mutable()->landpoint_ = const_cast< ::HangarPoint*>(
      ::HangarPoint::internal_default_instance());
  ::_PlanLineData_default_instance_._instance.get_mutable()->normalmodel_ = const_cast< ::NormalModel*>(
      ::NormalModel::internal_default_instance());
  ::_PlanLineData_default_instance_._instance.get_mutable()->surroundmodel_ = const_cast< ::SurroundModel*>(
      ::SurroundModel::internal_default_instance());
  ::_PlanLineData_default_instance_._instance.get_mutable()->takeoffpoint_ = const_cast< ::PointData*>(
      ::PointData::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanLineData::kFinishedActionFieldNumber;
const int PlanLineData::kMaxSpeedFieldNumber;
const int PlanLineData::kAutoSpeedFieldNumber;
const int PlanLineData::kPointsFieldNumber;
const int PlanLineData::kLoseActionFieldNumber;
const int PlanLineData::kHomeHeightFieldNumber;
const int PlanLineData::kIsSaveEnergyModeFieldNumber;
const int PlanLineData::kTakePointFieldNumber;
const int PlanLineData::kLandPointFieldNumber;
const int PlanLineData::kInterestsFieldNumber;
const int PlanLineData::kNormalModelFieldNumber;
const int PlanLineData::kSurroundModelFieldNumber;
const int PlanLineData::kTakeOffPointFieldNumber;
const int PlanLineData::kSecurityHeightFieldNumber;
const int PlanLineData::kTemplateIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanLineData::PlanLineData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_PlanLineData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlanLineData)
}
PlanLineData::PlanLineData(const PlanLineData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      points_(from.points_),
      interests_(from.interests_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_takepoint()) {
    takepoint_ = new ::HangarPoint(*from.takepoint_);
  } else {
    takepoint_ = NULL;
  }
  if (from.has_landpoint()) {
    landpoint_ = new ::HangarPoint(*from.landpoint_);
  } else {
    landpoint_ = NULL;
  }
  if (from.has_normalmodel()) {
    normalmodel_ = new ::NormalModel(*from.normalmodel_);
  } else {
    normalmodel_ = NULL;
  }
  if (from.has_surroundmodel()) {
    surroundmodel_ = new ::SurroundModel(*from.surroundmodel_);
  } else {
    surroundmodel_ = NULL;
  }
  if (from.has_takeoffpoint()) {
    takeoffpoint_ = new ::PointData(*from.takeoffpoint_);
  } else {
    takeoffpoint_ = NULL;
  }
  ::memcpy(&finishedaction_, &from.finishedaction_,
    static_cast<size_t>(reinterpret_cast<char*>(&templateid_) -
    reinterpret_cast<char*>(&finishedaction_)) + sizeof(templateid_));
  // @@protoc_insertion_point(copy_constructor:PlanLineData)
}

void PlanLineData::SharedCtor() {
  ::memset(&takepoint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&templateid_) -
      reinterpret_cast<char*>(&takepoint_)) + sizeof(templateid_));
}

PlanLineData::~PlanLineData() {
  // @@protoc_insertion_point(destructor:PlanLineData)
  SharedDtor();
}

void PlanLineData::SharedDtor() {
  if (this != internal_default_instance()) delete takepoint_;
  if (this != internal_default_instance()) delete landpoint_;
  if (this != internal_default_instance()) delete normalmodel_;
  if (this != internal_default_instance()) delete surroundmodel_;
  if (this != internal_default_instance()) delete takeoffpoint_;
}

void PlanLineData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlanLineData::descriptor() {
  ::protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlanLineData& PlanLineData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_PlanLineData.base);
  return *internal_default_instance();
}


void PlanLineData::Clear() {
// @@protoc_insertion_point(message_clear_start:PlanLineData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  interests_.Clear();
  if (GetArenaNoVirtual() == NULL && takepoint_ != NULL) {
    delete takepoint_;
  }
  takepoint_ = NULL;
  if (GetArenaNoVirtual() == NULL && landpoint_ != NULL) {
    delete landpoint_;
  }
  landpoint_ = NULL;
  if (GetArenaNoVirtual() == NULL && normalmodel_ != NULL) {
    delete normalmodel_;
  }
  normalmodel_ = NULL;
  if (GetArenaNoVirtual() == NULL && surroundmodel_ != NULL) {
    delete surroundmodel_;
  }
  surroundmodel_ = NULL;
  if (GetArenaNoVirtual() == NULL && takeoffpoint_ != NULL) {
    delete takeoffpoint_;
  }
  takeoffpoint_ = NULL;
  ::memset(&finishedaction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&templateid_) -
      reinterpret_cast<char*>(&finishedaction_)) + sizeof(templateid_));
  _internal_metadata_.Clear();
}

bool PlanLineData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlanLineData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 finishedAction = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finishedaction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float maxSpeed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float autoSpeed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &autospeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .PointData points = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 loseAction = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loseaction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 homeHeight = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &homeheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 isSaveEnergyMode = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &issaveenergymode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .HangarPoint takePoint = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_takepoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .HangarPoint landPoint = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_landpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .PointData interests = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_interests()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NormalModel normalModel = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_normalmodel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SurroundModel surroundModel = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_surroundmodel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PointData takeOffPoint = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_takeoffpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 securityHeight = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &securityheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 templateId = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &templateid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlanLineData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlanLineData)
  return false;
#undef DO_
}

void PlanLineData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlanLineData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 finishedAction = 1;
  if (this->finishedaction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->finishedaction(), output);
  }

  // float maxSpeed = 2;
  if (this->maxspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->maxspeed(), output);
  }

  // float autoSpeed = 3;
  if (this->autospeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->autospeed(), output);
  }

  // repeated .PointData points = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->points(static_cast<int>(i)),
      output);
  }

  // uint32 loseAction = 5;
  if (this->loseaction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->loseaction(), output);
  }

  // uint32 homeHeight = 6;
  if (this->homeheight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->homeheight(), output);
  }

  // uint32 isSaveEnergyMode = 7;
  if (this->issaveenergymode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->issaveenergymode(), output);
  }

  // .HangarPoint takePoint = 8;
  if (this->has_takepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_takepoint(), output);
  }

  // .HangarPoint landPoint = 9;
  if (this->has_landpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_landpoint(), output);
  }

  // repeated .PointData interests = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->interests_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->interests(static_cast<int>(i)),
      output);
  }

  // .NormalModel normalModel = 11;
  if (this->has_normalmodel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_normalmodel(), output);
  }

  // .SurroundModel surroundModel = 12;
  if (this->has_surroundmodel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_surroundmodel(), output);
  }

  // .PointData takeOffPoint = 13;
  if (this->has_takeoffpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_takeoffpoint(), output);
  }

  // uint32 securityHeight = 14;
  if (this->securityheight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->securityheight(), output);
  }

  // uint32 templateId = 15;
  if (this->templateid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->templateid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PlanLineData)
}

::google::protobuf::uint8* PlanLineData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PlanLineData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 finishedAction = 1;
  if (this->finishedaction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->finishedaction(), target);
  }

  // float maxSpeed = 2;
  if (this->maxspeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->maxspeed(), target);
  }

  // float autoSpeed = 3;
  if (this->autospeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->autospeed(), target);
  }

  // repeated .PointData points = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->points(static_cast<int>(i)), deterministic, target);
  }

  // uint32 loseAction = 5;
  if (this->loseaction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->loseaction(), target);
  }

  // uint32 homeHeight = 6;
  if (this->homeheight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->homeheight(), target);
  }

  // uint32 isSaveEnergyMode = 7;
  if (this->issaveenergymode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->issaveenergymode(), target);
  }

  // .HangarPoint takePoint = 8;
  if (this->has_takepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_takepoint(), deterministic, target);
  }

  // .HangarPoint landPoint = 9;
  if (this->has_landpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_landpoint(), deterministic, target);
  }

  // repeated .PointData interests = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->interests_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->interests(static_cast<int>(i)), deterministic, target);
  }

  // .NormalModel normalModel = 11;
  if (this->has_normalmodel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_normalmodel(), deterministic, target);
  }

  // .SurroundModel surroundModel = 12;
  if (this->has_surroundmodel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_surroundmodel(), deterministic, target);
  }

  // .PointData takeOffPoint = 13;
  if (this->has_takeoffpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_takeoffpoint(), deterministic, target);
  }

  // uint32 securityHeight = 14;
  if (this->securityheight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->securityheight(), target);
  }

  // uint32 templateId = 15;
  if (this->templateid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->templateid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlanLineData)
  return target;
}

size_t PlanLineData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlanLineData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .PointData points = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->points(static_cast<int>(i)));
    }
  }

  // repeated .PointData interests = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->interests_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->interests(static_cast<int>(i)));
    }
  }

  // .HangarPoint takePoint = 8;
  if (this->has_takepoint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *takepoint_);
  }

  // .HangarPoint landPoint = 9;
  if (this->has_landpoint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *landpoint_);
  }

  // .NormalModel normalModel = 11;
  if (this->has_normalmodel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *normalmodel_);
  }

  // .SurroundModel surroundModel = 12;
  if (this->has_surroundmodel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *surroundmodel_);
  }

  // .PointData takeOffPoint = 13;
  if (this->has_takeoffpoint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *takeoffpoint_);
  }

  // uint32 finishedAction = 1;
  if (this->finishedaction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->finishedaction());
  }

  // float maxSpeed = 2;
  if (this->maxspeed() != 0) {
    total_size += 1 + 4;
  }

  // float autoSpeed = 3;
  if (this->autospeed() != 0) {
    total_size += 1 + 4;
  }

  // uint32 loseAction = 5;
  if (this->loseaction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->loseaction());
  }

  // uint32 homeHeight = 6;
  if (this->homeheight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->homeheight());
  }

  // uint32 isSaveEnergyMode = 7;
  if (this->issaveenergymode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->issaveenergymode());
  }

  // uint32 securityHeight = 14;
  if (this->securityheight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->securityheight());
  }

  // uint32 templateId = 15;
  if (this->templateid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->templateid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanLineData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlanLineData)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanLineData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanLineData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlanLineData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlanLineData)
    MergeFrom(*source);
  }
}

void PlanLineData::MergeFrom(const PlanLineData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlanLineData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  interests_.MergeFrom(from.interests_);
  if (from.has_takepoint()) {
    mutable_takepoint()->::HangarPoint::MergeFrom(from.takepoint());
  }
  if (from.has_landpoint()) {
    mutable_landpoint()->::HangarPoint::MergeFrom(from.landpoint());
  }
  if (from.has_normalmodel()) {
    mutable_normalmodel()->::NormalModel::MergeFrom(from.normalmodel());
  }
  if (from.has_surroundmodel()) {
    mutable_surroundmodel()->::SurroundModel::MergeFrom(from.surroundmodel());
  }
  if (from.has_takeoffpoint()) {
    mutable_takeoffpoint()->::PointData::MergeFrom(from.takeoffpoint());
  }
  if (from.finishedaction() != 0) {
    set_finishedaction(from.finishedaction());
  }
  if (from.maxspeed() != 0) {
    set_maxspeed(from.maxspeed());
  }
  if (from.autospeed() != 0) {
    set_autospeed(from.autospeed());
  }
  if (from.loseaction() != 0) {
    set_loseaction(from.loseaction());
  }
  if (from.homeheight() != 0) {
    set_homeheight(from.homeheight());
  }
  if (from.issaveenergymode() != 0) {
    set_issaveenergymode(from.issaveenergymode());
  }
  if (from.securityheight() != 0) {
    set_securityheight(from.securityheight());
  }
  if (from.templateid() != 0) {
    set_templateid(from.templateid());
  }
}

void PlanLineData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlanLineData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanLineData::CopyFrom(const PlanLineData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlanLineData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanLineData::IsInitialized() const {
  return true;
}

void PlanLineData::Swap(PlanLineData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanLineData::InternalSwap(PlanLineData* other) {
  using std::swap;
  CastToBase(&points_)->InternalSwap(CastToBase(&other->points_));
  CastToBase(&interests_)->InternalSwap(CastToBase(&other->interests_));
  swap(takepoint_, other->takepoint_);
  swap(landpoint_, other->landpoint_);
  swap(normalmodel_, other->normalmodel_);
  swap(surroundmodel_, other->surroundmodel_);
  swap(takeoffpoint_, other->takeoffpoint_);
  swap(finishedaction_, other->finishedaction_);
  swap(maxspeed_, other->maxspeed_);
  swap(autospeed_, other->autospeed_);
  swap(loseaction_, other->loseaction_);
  swap(homeheight_, other->homeheight_);
  swap(issaveenergymode_, other->issaveenergymode_);
  swap(securityheight_, other->securityheight_);
  swap(templateid_, other->templateid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlanLineData::GetMetadata() const {
  protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PointData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointData::kLngFieldNumber;
const int PointData::kLatFieldNumber;
const int PointData::kHeightFieldNumber;
const int PointData::kSpeedFieldNumber;
const int PointData::kActionsFieldNumber;
const int PointData::kFlightPathModeFieldNumber;
const int PointData::kDampingDistanceFieldNumber;
const int PointData::kSafeGohomeFlagFieldNumber;
const int PointData::kHeadingModeFieldNumber;
const int PointData::kHeadingFieldNumber;
const int PointData::kInterestIndexFieldNumber;
const int PointData::kGroupIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointData::PointData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_PointData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PointData)
}
PointData::PointData(const PointData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      actions_(from.actions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lng_, &from.lng_,
    static_cast<size_t>(reinterpret_cast<char*>(&groupindex_) -
    reinterpret_cast<char*>(&lng_)) + sizeof(groupindex_));
  // @@protoc_insertion_point(copy_constructor:PointData)
}

void PointData::SharedCtor() {
  ::memset(&lng_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&groupindex_) -
      reinterpret_cast<char*>(&lng_)) + sizeof(groupindex_));
}

PointData::~PointData() {
  // @@protoc_insertion_point(destructor:PointData)
  SharedDtor();
}

void PointData::SharedDtor() {
}

void PointData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PointData::descriptor() {
  ::protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PointData& PointData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_PointData.base);
  return *internal_default_instance();
}


void PointData::Clear() {
// @@protoc_insertion_point(message_clear_start:PointData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actions_.Clear();
  ::memset(&lng_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&groupindex_) -
      reinterpret_cast<char*>(&lng_)) + sizeof(groupindex_));
  _internal_metadata_.Clear();
}

bool PointData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PointData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double lng = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lng_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .PointAction actions = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_actions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 flightPathMode = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flightpathmode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dampingDistance = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dampingdistance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 safeGohomeFlag = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &safegohomeflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 headingMode = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headingmode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float heading = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 interestIndex = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interestindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 groupIndex = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PointData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PointData)
  return false;
#undef DO_
}

void PointData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PointData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lng = 1;
  if (this->lng() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lng(), output);
  }

  // double lat = 2;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lat(), output);
  }

  // float height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->height(), output);
  }

  // float speed = 4;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->speed(), output);
  }

  // repeated .PointAction actions = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->actions(static_cast<int>(i)),
      output);
  }

  // uint32 flightPathMode = 6;
  if (this->flightpathmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->flightpathmode(), output);
  }

  // float dampingDistance = 7;
  if (this->dampingdistance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->dampingdistance(), output);
  }

  // uint32 safeGohomeFlag = 8;
  if (this->safegohomeflag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->safegohomeflag(), output);
  }

  // uint32 headingMode = 9;
  if (this->headingmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->headingmode(), output);
  }

  // float heading = 10;
  if (this->heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->heading(), output);
  }

  // int32 interestIndex = 11;
  if (this->interestindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->interestindex(), output);
  }

  // uint32 groupIndex = 12;
  if (this->groupindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->groupindex(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PointData)
}

::google::protobuf::uint8* PointData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PointData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lng = 1;
  if (this->lng() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lng(), target);
  }

  // double lat = 2;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lat(), target);
  }

  // float height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->height(), target);
  }

  // float speed = 4;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->speed(), target);
  }

  // repeated .PointAction actions = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->actions(static_cast<int>(i)), deterministic, target);
  }

  // uint32 flightPathMode = 6;
  if (this->flightpathmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->flightpathmode(), target);
  }

  // float dampingDistance = 7;
  if (this->dampingdistance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->dampingdistance(), target);
  }

  // uint32 safeGohomeFlag = 8;
  if (this->safegohomeflag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->safegohomeflag(), target);
  }

  // uint32 headingMode = 9;
  if (this->headingmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->headingmode(), target);
  }

  // float heading = 10;
  if (this->heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->heading(), target);
  }

  // int32 interestIndex = 11;
  if (this->interestindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->interestindex(), target);
  }

  // uint32 groupIndex = 12;
  if (this->groupindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->groupindex(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PointData)
  return target;
}

size_t PointData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PointData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .PointAction actions = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->actions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->actions(static_cast<int>(i)));
    }
  }

  // double lng = 1;
  if (this->lng() != 0) {
    total_size += 1 + 8;
  }

  // double lat = 2;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  // float height = 3;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  // float speed = 4;
  if (this->speed() != 0) {
    total_size += 1 + 4;
  }

  // uint32 flightPathMode = 6;
  if (this->flightpathmode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flightpathmode());
  }

  // float dampingDistance = 7;
  if (this->dampingdistance() != 0) {
    total_size += 1 + 4;
  }

  // uint32 safeGohomeFlag = 8;
  if (this->safegohomeflag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->safegohomeflag());
  }

  // uint32 headingMode = 9;
  if (this->headingmode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->headingmode());
  }

  // float heading = 10;
  if (this->heading() != 0) {
    total_size += 1 + 4;
  }

  // int32 interestIndex = 11;
  if (this->interestindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->interestindex());
  }

  // uint32 groupIndex = 12;
  if (this->groupindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->groupindex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PointData)
  GOOGLE_DCHECK_NE(&from, this);
  const PointData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PointData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PointData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PointData)
    MergeFrom(*source);
  }
}

void PointData::MergeFrom(const PointData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PointData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actions_.MergeFrom(from.actions_);
  if (from.lng() != 0) {
    set_lng(from.lng());
  }
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.flightpathmode() != 0) {
    set_flightpathmode(from.flightpathmode());
  }
  if (from.dampingdistance() != 0) {
    set_dampingdistance(from.dampingdistance());
  }
  if (from.safegohomeflag() != 0) {
    set_safegohomeflag(from.safegohomeflag());
  }
  if (from.headingmode() != 0) {
    set_headingmode(from.headingmode());
  }
  if (from.heading() != 0) {
    set_heading(from.heading());
  }
  if (from.interestindex() != 0) {
    set_interestindex(from.interestindex());
  }
  if (from.groupindex() != 0) {
    set_groupindex(from.groupindex());
  }
}

void PointData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PointData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointData::CopyFrom(const PointData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PointData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointData::IsInitialized() const {
  return true;
}

void PointData::Swap(PointData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointData::InternalSwap(PointData* other) {
  using std::swap;
  CastToBase(&actions_)->InternalSwap(CastToBase(&other->actions_));
  swap(lng_, other->lng_);
  swap(lat_, other->lat_);
  swap(height_, other->height_);
  swap(speed_, other->speed_);
  swap(flightpathmode_, other->flightpathmode_);
  swap(dampingdistance_, other->dampingdistance_);
  swap(safegohomeflag_, other->safegohomeflag_);
  swap(headingmode_, other->headingmode_);
  swap(heading_, other->heading_);
  swap(interestindex_, other->interestindex_);
  swap(groupindex_, other->groupindex_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PointData::GetMetadata() const {
  protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PointAction::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointAction::kTypeFieldNumber;
const int PointAction::kParamFieldNumber;
const int PointAction::kWaitTimeFieldNumber;
const int PointAction::kSpeakInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointAction::PointAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_PointAction.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PointAction)
}
PointAction::PointAction(const PointAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  speakinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.speakinfo().size() > 0) {
    speakinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.speakinfo_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&waittime_) -
    reinterpret_cast<char*>(&type_)) + sizeof(waittime_));
  // @@protoc_insertion_point(copy_constructor:PointAction)
}

void PointAction::SharedCtor() {
  speakinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&waittime_) -
      reinterpret_cast<char*>(&type_)) + sizeof(waittime_));
}

PointAction::~PointAction() {
  // @@protoc_insertion_point(destructor:PointAction)
  SharedDtor();
}

void PointAction::SharedDtor() {
  speakinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PointAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PointAction::descriptor() {
  ::protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PointAction& PointAction::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_PointAction.base);
  return *internal_default_instance();
}


void PointAction::Clear() {
// @@protoc_insertion_point(message_clear_start:PointAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  speakinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&waittime_) -
      reinterpret_cast<char*>(&type_)) + sizeof(waittime_));
  _internal_metadata_.Clear();
}

bool PointAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PointAction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float param = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &param_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 waitTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &waittime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string speakInfo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_speakinfo()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->speakinfo().data(), static_cast<int>(this->speakinfo().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PointAction.speakInfo"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PointAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PointAction)
  return false;
#undef DO_
}

void PointAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PointAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // float param = 2;
  if (this->param() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->param(), output);
  }

  // int32 waitTime = 3;
  if (this->waittime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->waittime(), output);
  }

  // string speakInfo = 4;
  if (this->speakinfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->speakinfo().data(), static_cast<int>(this->speakinfo().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PointAction.speakInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->speakinfo(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PointAction)
}

::google::protobuf::uint8* PointAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PointAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // float param = 2;
  if (this->param() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->param(), target);
  }

  // int32 waitTime = 3;
  if (this->waittime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->waittime(), target);
  }

  // string speakInfo = 4;
  if (this->speakinfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->speakinfo().data(), static_cast<int>(this->speakinfo().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PointAction.speakInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->speakinfo(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PointAction)
  return target;
}

size_t PointAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PointAction)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string speakInfo = 4;
  if (this->speakinfo().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->speakinfo());
  }

  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // float param = 2;
  if (this->param() != 0) {
    total_size += 1 + 4;
  }

  // int32 waitTime = 3;
  if (this->waittime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->waittime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PointAction)
  GOOGLE_DCHECK_NE(&from, this);
  const PointAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PointAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PointAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PointAction)
    MergeFrom(*source);
  }
}

void PointAction::MergeFrom(const PointAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PointAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.speakinfo().size() > 0) {

    speakinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.speakinfo_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.param() != 0) {
    set_param(from.param());
  }
  if (from.waittime() != 0) {
    set_waittime(from.waittime());
  }
}

void PointAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PointAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointAction::CopyFrom(const PointAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PointAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointAction::IsInitialized() const {
  return true;
}

void PointAction::Swap(PointAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointAction::InternalSwap(PointAction* other) {
  using std::swap;
  speakinfo_.Swap(&other->speakinfo_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(param_, other->param_);
  swap(waittime_, other->waittime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PointAction::GetMetadata() const {
  protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HangarPoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HangarPoint::kHangarIdFieldNumber;
const int HangarPoint::kHangarLngFieldNumber;
const int HangarPoint::kHangarLatFieldNumber;
const int HangarPoint::kAlternateLngFieldNumber;
const int HangarPoint::kAlternateLatFieldNumber;
const int HangarPoint::kMediaUploadFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HangarPoint::HangarPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_HangarPoint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:HangarPoint)
}
HangarPoint::HangarPoint(const HangarPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hangarid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hangarid().size() > 0) {
    hangarid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hangarid_);
  }
  ::memcpy(&hangarlng_, &from.hangarlng_,
    static_cast<size_t>(reinterpret_cast<char*>(&mediauploadflag_) -
    reinterpret_cast<char*>(&hangarlng_)) + sizeof(mediauploadflag_));
  // @@protoc_insertion_point(copy_constructor:HangarPoint)
}

void HangarPoint::SharedCtor() {
  hangarid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hangarlng_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mediauploadflag_) -
      reinterpret_cast<char*>(&hangarlng_)) + sizeof(mediauploadflag_));
}

HangarPoint::~HangarPoint() {
  // @@protoc_insertion_point(destructor:HangarPoint)
  SharedDtor();
}

void HangarPoint::SharedDtor() {
  hangarid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HangarPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HangarPoint::descriptor() {
  ::protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HangarPoint& HangarPoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_HangarPoint.base);
  return *internal_default_instance();
}


void HangarPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:HangarPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hangarid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hangarlng_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mediauploadflag_) -
      reinterpret_cast<char*>(&hangarlng_)) + sizeof(mediauploadflag_));
  _internal_metadata_.Clear();
}

bool HangarPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HangarPoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string hangarId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hangarid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hangarid().data(), static_cast<int>(this->hangarid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "HangarPoint.hangarId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double hangarLng = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hangarlng_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double hangarLat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hangarlat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double alternateLng = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &alternatelng_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double alternateLat = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &alternatelat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mediaUploadFlag = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mediauploadflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HangarPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HangarPoint)
  return false;
#undef DO_
}

void HangarPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HangarPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hangarId = 1;
  if (this->hangarid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hangarid().data(), static_cast<int>(this->hangarid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HangarPoint.hangarId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hangarid(), output);
  }

  // double hangarLng = 2;
  if (this->hangarlng() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->hangarlng(), output);
  }

  // double hangarLat = 3;
  if (this->hangarlat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->hangarlat(), output);
  }

  // double alternateLng = 4;
  if (this->alternatelng() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->alternatelng(), output);
  }

  // double alternateLat = 5;
  if (this->alternatelat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->alternatelat(), output);
  }

  // uint32 mediaUploadFlag = 6;
  if (this->mediauploadflag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->mediauploadflag(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:HangarPoint)
}

::google::protobuf::uint8* HangarPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HangarPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hangarId = 1;
  if (this->hangarid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hangarid().data(), static_cast<int>(this->hangarid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HangarPoint.hangarId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hangarid(), target);
  }

  // double hangarLng = 2;
  if (this->hangarlng() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->hangarlng(), target);
  }

  // double hangarLat = 3;
  if (this->hangarlat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->hangarlat(), target);
  }

  // double alternateLng = 4;
  if (this->alternatelng() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->alternatelng(), target);
  }

  // double alternateLat = 5;
  if (this->alternatelat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->alternatelat(), target);
  }

  // uint32 mediaUploadFlag = 6;
  if (this->mediauploadflag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->mediauploadflag(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HangarPoint)
  return target;
}

size_t HangarPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HangarPoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string hangarId = 1;
  if (this->hangarid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hangarid());
  }

  // double hangarLng = 2;
  if (this->hangarlng() != 0) {
    total_size += 1 + 8;
  }

  // double hangarLat = 3;
  if (this->hangarlat() != 0) {
    total_size += 1 + 8;
  }

  // double alternateLng = 4;
  if (this->alternatelng() != 0) {
    total_size += 1 + 8;
  }

  // double alternateLat = 5;
  if (this->alternatelat() != 0) {
    total_size += 1 + 8;
  }

  // uint32 mediaUploadFlag = 6;
  if (this->mediauploadflag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mediauploadflag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HangarPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HangarPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const HangarPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HangarPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HangarPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HangarPoint)
    MergeFrom(*source);
  }
}

void HangarPoint::MergeFrom(const HangarPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HangarPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hangarid().size() > 0) {

    hangarid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hangarid_);
  }
  if (from.hangarlng() != 0) {
    set_hangarlng(from.hangarlng());
  }
  if (from.hangarlat() != 0) {
    set_hangarlat(from.hangarlat());
  }
  if (from.alternatelng() != 0) {
    set_alternatelng(from.alternatelng());
  }
  if (from.alternatelat() != 0) {
    set_alternatelat(from.alternatelat());
  }
  if (from.mediauploadflag() != 0) {
    set_mediauploadflag(from.mediauploadflag());
  }
}

void HangarPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HangarPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HangarPoint::CopyFrom(const HangarPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HangarPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HangarPoint::IsInitialized() const {
  return true;
}

void HangarPoint::Swap(HangarPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HangarPoint::InternalSwap(HangarPoint* other) {
  using std::swap;
  hangarid_.Swap(&other->hangarid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hangarlng_, other->hangarlng_);
  swap(hangarlat_, other->hangarlat_);
  swap(alternatelng_, other->alternatelng_);
  swap(alternatelat_, other->alternatelat_);
  swap(mediauploadflag_, other->mediauploadflag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HangarPoint::GetMetadata() const {
  protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NormalModel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NormalModel::kAreaFieldNumber;
const int NormalModel::kServiceIdFieldNumber;
const int NormalModel::kCameraIdFieldNumber;
const int NormalModel::kIsModelingFieldNumber;
const int NormalModel::kModeFieldNumber;
const int NormalModel::kHOverlapFieldNumber;
const int NormalModel::kVOverlapFieldNumber;
const int NormalModel::kMirrorFieldNumber;
const int NormalModel::kDirectionFieldNumber;
const int NormalModel::kFlightPathModeFieldNumber;
const int NormalModel::kHeightFieldNumber;
const int NormalModel::kPitchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NormalModel::NormalModel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_NormalModel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NormalModel)
}
NormalModel::NormalModel(const NormalModel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      area_(from.area_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&serviceid_, &from.serviceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&pitch_) -
    reinterpret_cast<char*>(&serviceid_)) + sizeof(pitch_));
  // @@protoc_insertion_point(copy_constructor:NormalModel)
}

void NormalModel::SharedCtor() {
  ::memset(&serviceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pitch_) -
      reinterpret_cast<char*>(&serviceid_)) + sizeof(pitch_));
}

NormalModel::~NormalModel() {
  // @@protoc_insertion_point(destructor:NormalModel)
  SharedDtor();
}

void NormalModel::SharedDtor() {
}

void NormalModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NormalModel::descriptor() {
  ::protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NormalModel& NormalModel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_NormalModel.base);
  return *internal_default_instance();
}


void NormalModel::Clear() {
// @@protoc_insertion_point(message_clear_start:NormalModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  area_.Clear();
  ::memset(&serviceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pitch_) -
      reinterpret_cast<char*>(&serviceid_)) + sizeof(pitch_));
  _internal_metadata_.Clear();
}

bool NormalModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NormalModel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PointData area = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_area()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 serviceId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serviceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cameraId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cameraid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 isModeling = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ismodeling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hOverlap = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hoverlap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 vOverlap = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &voverlap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mirror = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mirror_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 direction = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 flightPathMode = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flightpathmode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 height = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pitch = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NormalModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NormalModel)
  return false;
#undef DO_
}

void NormalModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NormalModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PointData area = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->area_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->area(static_cast<int>(i)),
      output);
  }

  // uint32 serviceId = 2;
  if (this->serviceid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serviceid(), output);
  }

  // uint32 cameraId = 3;
  if (this->cameraid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cameraid(), output);
  }

  // uint32 isModeling = 4;
  if (this->ismodeling() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ismodeling(), output);
  }

  // uint32 mode = 5;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mode(), output);
  }

  // uint32 hOverlap = 6;
  if (this->hoverlap() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->hoverlap(), output);
  }

  // uint32 vOverlap = 7;
  if (this->voverlap() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->voverlap(), output);
  }

  // uint32 mirror = 8;
  if (this->mirror() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->mirror(), output);
  }

  // uint32 direction = 9;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->direction(), output);
  }

  // uint32 flightPathMode = 10;
  if (this->flightpathmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->flightpathmode(), output);
  }

  // uint32 height = 11;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->height(), output);
  }

  // uint32 pitch = 12;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->pitch(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NormalModel)
}

::google::protobuf::uint8* NormalModel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NormalModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PointData area = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->area_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->area(static_cast<int>(i)), deterministic, target);
  }

  // uint32 serviceId = 2;
  if (this->serviceid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serviceid(), target);
  }

  // uint32 cameraId = 3;
  if (this->cameraid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cameraid(), target);
  }

  // uint32 isModeling = 4;
  if (this->ismodeling() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ismodeling(), target);
  }

  // uint32 mode = 5;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mode(), target);
  }

  // uint32 hOverlap = 6;
  if (this->hoverlap() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->hoverlap(), target);
  }

  // uint32 vOverlap = 7;
  if (this->voverlap() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->voverlap(), target);
  }

  // uint32 mirror = 8;
  if (this->mirror() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->mirror(), target);
  }

  // uint32 direction = 9;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->direction(), target);
  }

  // uint32 flightPathMode = 10;
  if (this->flightpathmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->flightpathmode(), target);
  }

  // uint32 height = 11;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->height(), target);
  }

  // uint32 pitch = 12;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->pitch(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NormalModel)
  return target;
}

size_t NormalModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NormalModel)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .PointData area = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->area_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->area(static_cast<int>(i)));
    }
  }

  // uint32 serviceId = 2;
  if (this->serviceid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->serviceid());
  }

  // uint32 cameraId = 3;
  if (this->cameraid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cameraid());
  }

  // uint32 isModeling = 4;
  if (this->ismodeling() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ismodeling());
  }

  // uint32 mode = 5;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mode());
  }

  // uint32 hOverlap = 6;
  if (this->hoverlap() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hoverlap());
  }

  // uint32 vOverlap = 7;
  if (this->voverlap() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->voverlap());
  }

  // uint32 mirror = 8;
  if (this->mirror() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mirror());
  }

  // uint32 direction = 9;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->direction());
  }

  // uint32 flightPathMode = 10;
  if (this->flightpathmode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flightpathmode());
  }

  // uint32 height = 11;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  // uint32 pitch = 12;
  if (this->pitch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pitch());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NormalModel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NormalModel)
  GOOGLE_DCHECK_NE(&from, this);
  const NormalModel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NormalModel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NormalModel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NormalModel)
    MergeFrom(*source);
  }
}

void NormalModel::MergeFrom(const NormalModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NormalModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  area_.MergeFrom(from.area_);
  if (from.serviceid() != 0) {
    set_serviceid(from.serviceid());
  }
  if (from.cameraid() != 0) {
    set_cameraid(from.cameraid());
  }
  if (from.ismodeling() != 0) {
    set_ismodeling(from.ismodeling());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.hoverlap() != 0) {
    set_hoverlap(from.hoverlap());
  }
  if (from.voverlap() != 0) {
    set_voverlap(from.voverlap());
  }
  if (from.mirror() != 0) {
    set_mirror(from.mirror());
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
  if (from.flightpathmode() != 0) {
    set_flightpathmode(from.flightpathmode());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
}

void NormalModel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NormalModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalModel::CopyFrom(const NormalModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NormalModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalModel::IsInitialized() const {
  return true;
}

void NormalModel::Swap(NormalModel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NormalModel::InternalSwap(NormalModel* other) {
  using std::swap;
  CastToBase(&area_)->InternalSwap(CastToBase(&other->area_));
  swap(serviceid_, other->serviceid_);
  swap(cameraid_, other->cameraid_);
  swap(ismodeling_, other->ismodeling_);
  swap(mode_, other->mode_);
  swap(hoverlap_, other->hoverlap_);
  swap(voverlap_, other->voverlap_);
  swap(mirror_, other->mirror_);
  swap(direction_, other->direction_);
  swap(flightpathmode_, other->flightpathmode_);
  swap(height_, other->height_);
  swap(pitch_, other->pitch_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NormalModel::GetMetadata() const {
  protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SurroundModel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SurroundModel::kAreaFieldNumber;
const int SurroundModel::kServiceIdFieldNumber;
const int SurroundModel::kCameraIdFieldNumber;
const int SurroundModel::kIsModelingFieldNumber;
const int SurroundModel::kHeightFieldNumber;
const int SurroundModel::kBoundaryFieldNumber;
const int SurroundModel::kExposureCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SurroundModel::SurroundModel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_SurroundModel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SurroundModel)
}
SurroundModel::SurroundModel(const SurroundModel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      area_(from.area_),
      boundary_(from.boundary_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&serviceid_, &from.serviceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&exposurecount_) -
    reinterpret_cast<char*>(&serviceid_)) + sizeof(exposurecount_));
  // @@protoc_insertion_point(copy_constructor:SurroundModel)
}

void SurroundModel::SharedCtor() {
  ::memset(&serviceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exposurecount_) -
      reinterpret_cast<char*>(&serviceid_)) + sizeof(exposurecount_));
}

SurroundModel::~SurroundModel() {
  // @@protoc_insertion_point(destructor:SurroundModel)
  SharedDtor();
}

void SurroundModel::SharedDtor() {
}

void SurroundModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SurroundModel::descriptor() {
  ::protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SurroundModel& SurroundModel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_SurroundModel.base);
  return *internal_default_instance();
}


void SurroundModel::Clear() {
// @@protoc_insertion_point(message_clear_start:SurroundModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  area_.Clear();
  boundary_.Clear();
  ::memset(&serviceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exposurecount_) -
      reinterpret_cast<char*>(&serviceid_)) + sizeof(exposurecount_));
  _internal_metadata_.Clear();
}

bool SurroundModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SurroundModel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PointData area = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_area()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 serviceId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serviceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cameraId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cameraid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 isModeling = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ismodeling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 height = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .PointData boundary = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 exposureCount = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exposurecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SurroundModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SurroundModel)
  return false;
#undef DO_
}

void SurroundModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SurroundModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PointData area = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->area_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->area(static_cast<int>(i)),
      output);
  }

  // uint32 serviceId = 2;
  if (this->serviceid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serviceid(), output);
  }

  // uint32 cameraId = 3;
  if (this->cameraid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cameraid(), output);
  }

  // uint32 isModeling = 4;
  if (this->ismodeling() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ismodeling(), output);
  }

  // uint32 height = 5;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->height(), output);
  }

  // repeated .PointData boundary = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boundary_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->boundary(static_cast<int>(i)),
      output);
  }

  // uint32 exposureCount = 7;
  if (this->exposurecount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->exposurecount(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:SurroundModel)
}

::google::protobuf::uint8* SurroundModel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SurroundModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PointData area = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->area_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->area(static_cast<int>(i)), deterministic, target);
  }

  // uint32 serviceId = 2;
  if (this->serviceid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serviceid(), target);
  }

  // uint32 cameraId = 3;
  if (this->cameraid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cameraid(), target);
  }

  // uint32 isModeling = 4;
  if (this->ismodeling() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ismodeling(), target);
  }

  // uint32 height = 5;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->height(), target);
  }

  // repeated .PointData boundary = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boundary_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->boundary(static_cast<int>(i)), deterministic, target);
  }

  // uint32 exposureCount = 7;
  if (this->exposurecount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->exposurecount(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SurroundModel)
  return target;
}

size_t SurroundModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SurroundModel)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .PointData area = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->area_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->area(static_cast<int>(i)));
    }
  }

  // repeated .PointData boundary = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->boundary_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->boundary(static_cast<int>(i)));
    }
  }

  // uint32 serviceId = 2;
  if (this->serviceid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->serviceid());
  }

  // uint32 cameraId = 3;
  if (this->cameraid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cameraid());
  }

  // uint32 isModeling = 4;
  if (this->ismodeling() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ismodeling());
  }

  // uint32 height = 5;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  // uint32 exposureCount = 7;
  if (this->exposurecount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->exposurecount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SurroundModel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SurroundModel)
  GOOGLE_DCHECK_NE(&from, this);
  const SurroundModel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SurroundModel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SurroundModel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SurroundModel)
    MergeFrom(*source);
  }
}

void SurroundModel::MergeFrom(const SurroundModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SurroundModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  area_.MergeFrom(from.area_);
  boundary_.MergeFrom(from.boundary_);
  if (from.serviceid() != 0) {
    set_serviceid(from.serviceid());
  }
  if (from.cameraid() != 0) {
    set_cameraid(from.cameraid());
  }
  if (from.ismodeling() != 0) {
    set_ismodeling(from.ismodeling());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.exposurecount() != 0) {
    set_exposurecount(from.exposurecount());
  }
}

void SurroundModel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SurroundModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SurroundModel::CopyFrom(const SurroundModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SurroundModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurroundModel::IsInitialized() const {
  return true;
}

void SurroundModel::Swap(SurroundModel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SurroundModel::InternalSwap(SurroundModel* other) {
  using std::swap;
  CastToBase(&area_)->InternalSwap(CastToBase(&other->area_));
  CastToBase(&boundary_)->InternalSwap(CastToBase(&other->boundary_));
  swap(serviceid_, other->serviceid_);
  swap(cameraid_, other->cameraid_);
  swap(ismodeling_, other->ismodeling_);
  swap(height_, other->height_);
  swap(exposurecount_, other->exposurecount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SurroundModel::GetMetadata() const {
  protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UavInitInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UavInitInfo::kUavModelFieldNumber;
const int UavInitInfo::kUavSnFieldNumber;
const int UavInitInfo::kUavVersionFieldNumber;
const int UavInitInfo::kPtModelFieldNumber;
const int UavInitInfo::kPtVersionFieldNumber;
const int UavInitInfo::kPtPositionFieldNumber;
const int UavInitInfo::kModuleVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UavInitInfo::UavInitInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_UavInitInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:UavInitInfo)
}
UavInitInfo::UavInitInfo(const UavInitInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uavmodel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uavmodel().size() > 0) {
    uavmodel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uavmodel_);
  }
  uavsn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uavsn().size() > 0) {
    uavsn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uavsn_);
  }
  uavversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uavversion().size() > 0) {
    uavversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uavversion_);
  }
  ptmodel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ptmodel().size() > 0) {
    ptmodel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ptmodel_);
  }
  ptversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ptversion().size() > 0) {
    ptversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ptversion_);
  }
  moduleversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.moduleversion().size() > 0) {
    moduleversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.moduleversion_);
  }
  ptposition_ = from.ptposition_;
  // @@protoc_insertion_point(copy_constructor:UavInitInfo)
}

void UavInitInfo::SharedCtor() {
  uavmodel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uavsn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uavversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ptmodel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ptversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  moduleversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ptposition_ = 0u;
}

UavInitInfo::~UavInitInfo() {
  // @@protoc_insertion_point(destructor:UavInitInfo)
  SharedDtor();
}

void UavInitInfo::SharedDtor() {
  uavmodel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uavsn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uavversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ptmodel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ptversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  moduleversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UavInitInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UavInitInfo::descriptor() {
  ::protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UavInitInfo& UavInitInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_UavInitInfo.base);
  return *internal_default_instance();
}


void UavInitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:UavInitInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uavmodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uavsn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uavversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ptmodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ptversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  moduleversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ptposition_ = 0u;
  _internal_metadata_.Clear();
}

bool UavInitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UavInitInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string uavModel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uavmodel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uavmodel().data(), static_cast<int>(this->uavmodel().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "UavInitInfo.uavModel"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uavSn = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uavsn()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uavsn().data(), static_cast<int>(this->uavsn().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "UavInitInfo.uavSn"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uavVersion = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uavversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uavversion().data(), static_cast<int>(this->uavversion().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "UavInitInfo.uavVersion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ptModel = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ptmodel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ptmodel().data(), static_cast<int>(this->ptmodel().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "UavInitInfo.ptModel"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ptVersion = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ptversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ptversion().data(), static_cast<int>(this->ptversion().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "UavInitInfo.ptVersion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ptPosition = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ptposition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string moduleVersion = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_moduleversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->moduleversion().data(), static_cast<int>(this->moduleversion().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "UavInitInfo.moduleVersion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UavInitInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UavInitInfo)
  return false;
#undef DO_
}

void UavInitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UavInitInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uavModel = 1;
  if (this->uavmodel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uavmodel().data(), static_cast<int>(this->uavmodel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "UavInitInfo.uavModel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uavmodel(), output);
  }

  // string uavSn = 2;
  if (this->uavsn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uavsn().data(), static_cast<int>(this->uavsn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "UavInitInfo.uavSn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uavsn(), output);
  }

  // string uavVersion = 3;
  if (this->uavversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uavversion().data(), static_cast<int>(this->uavversion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "UavInitInfo.uavVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uavversion(), output);
  }

  // string ptModel = 4;
  if (this->ptmodel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ptmodel().data(), static_cast<int>(this->ptmodel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "UavInitInfo.ptModel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ptmodel(), output);
  }

  // string ptVersion = 5;
  if (this->ptversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ptversion().data(), static_cast<int>(this->ptversion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "UavInitInfo.ptVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ptversion(), output);
  }

  // uint32 ptPosition = 6;
  if (this->ptposition() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ptposition(), output);
  }

  // string moduleVersion = 7;
  if (this->moduleversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->moduleversion().data(), static_cast<int>(this->moduleversion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "UavInitInfo.moduleVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->moduleversion(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:UavInitInfo)
}

::google::protobuf::uint8* UavInitInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UavInitInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uavModel = 1;
  if (this->uavmodel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uavmodel().data(), static_cast<int>(this->uavmodel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "UavInitInfo.uavModel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uavmodel(), target);
  }

  // string uavSn = 2;
  if (this->uavsn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uavsn().data(), static_cast<int>(this->uavsn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "UavInitInfo.uavSn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uavsn(), target);
  }

  // string uavVersion = 3;
  if (this->uavversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uavversion().data(), static_cast<int>(this->uavversion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "UavInitInfo.uavVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uavversion(), target);
  }

  // string ptModel = 4;
  if (this->ptmodel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ptmodel().data(), static_cast<int>(this->ptmodel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "UavInitInfo.ptModel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ptmodel(), target);
  }

  // string ptVersion = 5;
  if (this->ptversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ptversion().data(), static_cast<int>(this->ptversion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "UavInitInfo.ptVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ptversion(), target);
  }

  // uint32 ptPosition = 6;
  if (this->ptposition() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ptposition(), target);
  }

  // string moduleVersion = 7;
  if (this->moduleversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->moduleversion().data(), static_cast<int>(this->moduleversion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "UavInitInfo.moduleVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->moduleversion(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UavInitInfo)
  return target;
}

size_t UavInitInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UavInitInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string uavModel = 1;
  if (this->uavmodel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uavmodel());
  }

  // string uavSn = 2;
  if (this->uavsn().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uavsn());
  }

  // string uavVersion = 3;
  if (this->uavversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uavversion());
  }

  // string ptModel = 4;
  if (this->ptmodel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ptmodel());
  }

  // string ptVersion = 5;
  if (this->ptversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ptversion());
  }

  // string moduleVersion = 7;
  if (this->moduleversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->moduleversion());
  }

  // uint32 ptPosition = 6;
  if (this->ptposition() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ptposition());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UavInitInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UavInitInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UavInitInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UavInitInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UavInitInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UavInitInfo)
    MergeFrom(*source);
  }
}

void UavInitInfo::MergeFrom(const UavInitInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UavInitInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uavmodel().size() > 0) {

    uavmodel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uavmodel_);
  }
  if (from.uavsn().size() > 0) {

    uavsn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uavsn_);
  }
  if (from.uavversion().size() > 0) {

    uavversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uavversion_);
  }
  if (from.ptmodel().size() > 0) {

    ptmodel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ptmodel_);
  }
  if (from.ptversion().size() > 0) {

    ptversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ptversion_);
  }
  if (from.moduleversion().size() > 0) {

    moduleversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.moduleversion_);
  }
  if (from.ptposition() != 0) {
    set_ptposition(from.ptposition());
  }
}

void UavInitInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UavInitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UavInitInfo::CopyFrom(const UavInitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UavInitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UavInitInfo::IsInitialized() const {
  return true;
}

void UavInitInfo::Swap(UavInitInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UavInitInfo::InternalSwap(UavInitInfo* other) {
  using std::swap;
  uavmodel_.Swap(&other->uavmodel_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uavsn_.Swap(&other->uavsn_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uavversion_.Swap(&other->uavversion_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ptmodel_.Swap(&other->ptmodel_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ptversion_.Swap(&other->ptversion_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  moduleversion_.Swap(&other->moduleversion_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ptposition_, other->ptposition_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UavInitInfo::GetMetadata() const {
  protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PayloadState::InitAsDefaultInstance() {
  ::_PayloadState_default_instance_._instance.get_mutable()->stickstate_ = const_cast< ::StickState*>(
      ::StickState::internal_default_instance());
  ::_PayloadState_default_instance_._instance.get_mutable()->parachutestate_ = const_cast< ::ParachuteState*>(
      ::ParachuteState::internal_default_instance());
  ::_PayloadState_default_instance_._instance.get_mutable()->sprayfirestate_ = const_cast< ::SprayFireState*>(
      ::SprayFireState::internal_default_instance());
  ::_PayloadState_default_instance_._instance.get_mutable()->airanalysis_ = const_cast< ::AirAnalysis*>(
      ::AirAnalysis::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PayloadState::kStickStateFieldNumber;
const int PayloadState::kParachuteStateFieldNumber;
const int PayloadState::kSprayFireStateFieldNumber;
const int PayloadState::kAirAnalysisFieldNumber;
const int PayloadState::kBoxSnFieldNumber;
const int PayloadState::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PayloadState::PayloadState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_PayloadState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PayloadState)
}
PayloadState::PayloadState(const PayloadState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  boxsn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.boxsn().size() > 0) {
    boxsn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.boxsn_);
  }
  if (from.has_stickstate()) {
    stickstate_ = new ::StickState(*from.stickstate_);
  } else {
    stickstate_ = NULL;
  }
  if (from.has_parachutestate()) {
    parachutestate_ = new ::ParachuteState(*from.parachutestate_);
  } else {
    parachutestate_ = NULL;
  }
  if (from.has_sprayfirestate()) {
    sprayfirestate_ = new ::SprayFireState(*from.sprayfirestate_);
  } else {
    sprayfirestate_ = NULL;
  }
  if (from.has_airanalysis()) {
    airanalysis_ = new ::AirAnalysis(*from.airanalysis_);
  } else {
    airanalysis_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:PayloadState)
}

void PayloadState::SharedCtor() {
  boxsn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stickstate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&stickstate_)) + sizeof(timestamp_));
}

PayloadState::~PayloadState() {
  // @@protoc_insertion_point(destructor:PayloadState)
  SharedDtor();
}

void PayloadState::SharedDtor() {
  boxsn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stickstate_;
  if (this != internal_default_instance()) delete parachutestate_;
  if (this != internal_default_instance()) delete sprayfirestate_;
  if (this != internal_default_instance()) delete airanalysis_;
}

void PayloadState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PayloadState::descriptor() {
  ::protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PayloadState& PayloadState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_PayloadState.base);
  return *internal_default_instance();
}


void PayloadState::Clear() {
// @@protoc_insertion_point(message_clear_start:PayloadState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boxsn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && stickstate_ != NULL) {
    delete stickstate_;
  }
  stickstate_ = NULL;
  if (GetArenaNoVirtual() == NULL && parachutestate_ != NULL) {
    delete parachutestate_;
  }
  parachutestate_ = NULL;
  if (GetArenaNoVirtual() == NULL && sprayfirestate_ != NULL) {
    delete sprayfirestate_;
  }
  sprayfirestate_ = NULL;
  if (GetArenaNoVirtual() == NULL && airanalysis_ != NULL) {
    delete airanalysis_;
  }
  airanalysis_ = NULL;
  timestamp_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool PayloadState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PayloadState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .StickState stickState = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stickstate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ParachuteState parachuteState = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parachutestate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SprayFireState sprayFireState = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sprayfirestate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AirAnalysis airAnalysis = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_airanalysis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string boxSn = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boxsn()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->boxsn().data(), static_cast<int>(this->boxsn().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PayloadState.boxSn"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PayloadState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PayloadState)
  return false;
#undef DO_
}

void PayloadState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PayloadState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .StickState stickState = 1;
  if (this->has_stickstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_stickstate(), output);
  }

  // .ParachuteState parachuteState = 2;
  if (this->has_parachutestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_parachutestate(), output);
  }

  // .SprayFireState sprayFireState = 3;
  if (this->has_sprayfirestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_sprayfirestate(), output);
  }

  // .AirAnalysis airAnalysis = 4;
  if (this->has_airanalysis()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_airanalysis(), output);
  }

  // string boxSn = 5;
  if (this->boxsn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->boxsn().data(), static_cast<int>(this->boxsn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PayloadState.boxSn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->boxsn(), output);
  }

  // uint64 timestamp = 6;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PayloadState)
}

::google::protobuf::uint8* PayloadState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PayloadState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .StickState stickState = 1;
  if (this->has_stickstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_stickstate(), deterministic, target);
  }

  // .ParachuteState parachuteState = 2;
  if (this->has_parachutestate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_parachutestate(), deterministic, target);
  }

  // .SprayFireState sprayFireState = 3;
  if (this->has_sprayfirestate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_sprayfirestate(), deterministic, target);
  }

  // .AirAnalysis airAnalysis = 4;
  if (this->has_airanalysis()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_airanalysis(), deterministic, target);
  }

  // string boxSn = 5;
  if (this->boxsn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->boxsn().data(), static_cast<int>(this->boxsn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PayloadState.boxSn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->boxsn(), target);
  }

  // uint64 timestamp = 6;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PayloadState)
  return target;
}

size_t PayloadState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PayloadState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string boxSn = 5;
  if (this->boxsn().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->boxsn());
  }

  // .StickState stickState = 1;
  if (this->has_stickstate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *stickstate_);
  }

  // .ParachuteState parachuteState = 2;
  if (this->has_parachutestate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *parachutestate_);
  }

  // .SprayFireState sprayFireState = 3;
  if (this->has_sprayfirestate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sprayfirestate_);
  }

  // .AirAnalysis airAnalysis = 4;
  if (this->has_airanalysis()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *airanalysis_);
  }

  // uint64 timestamp = 6;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PayloadState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PayloadState)
  GOOGLE_DCHECK_NE(&from, this);
  const PayloadState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PayloadState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PayloadState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PayloadState)
    MergeFrom(*source);
  }
}

void PayloadState::MergeFrom(const PayloadState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PayloadState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.boxsn().size() > 0) {

    boxsn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.boxsn_);
  }
  if (from.has_stickstate()) {
    mutable_stickstate()->::StickState::MergeFrom(from.stickstate());
  }
  if (from.has_parachutestate()) {
    mutable_parachutestate()->::ParachuteState::MergeFrom(from.parachutestate());
  }
  if (from.has_sprayfirestate()) {
    mutable_sprayfirestate()->::SprayFireState::MergeFrom(from.sprayfirestate());
  }
  if (from.has_airanalysis()) {
    mutable_airanalysis()->::AirAnalysis::MergeFrom(from.airanalysis());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void PayloadState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PayloadState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayloadState::CopyFrom(const PayloadState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PayloadState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayloadState::IsInitialized() const {
  return true;
}

void PayloadState::Swap(PayloadState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PayloadState::InternalSwap(PayloadState* other) {
  using std::swap;
  boxsn_.Swap(&other->boxsn_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(stickstate_, other->stickstate_);
  swap(parachutestate_, other->parachutestate_);
  swap(sprayfirestate_, other->sprayfirestate_);
  swap(airanalysis_, other->airanalysis_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PayloadState::GetMetadata() const {
  protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PayloadStateList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PayloadStateList::kPayloadStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PayloadStateList::PayloadStateList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_PayloadStateList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PayloadStateList)
}
PayloadStateList::PayloadStateList(const PayloadStateList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      payloadstate_(from.payloadstate_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PayloadStateList)
}

void PayloadStateList::SharedCtor() {
}

PayloadStateList::~PayloadStateList() {
  // @@protoc_insertion_point(destructor:PayloadStateList)
  SharedDtor();
}

void PayloadStateList::SharedDtor() {
}

void PayloadStateList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PayloadStateList::descriptor() {
  ::protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PayloadStateList& PayloadStateList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_PayloadStateList.base);
  return *internal_default_instance();
}


void PayloadStateList::Clear() {
// @@protoc_insertion_point(message_clear_start:PayloadStateList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payloadstate_.Clear();
  _internal_metadata_.Clear();
}

bool PayloadStateList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PayloadStateList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PayloadState payloadState = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_payloadstate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PayloadStateList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PayloadStateList)
  return false;
#undef DO_
}

void PayloadStateList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PayloadStateList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PayloadState payloadState = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->payloadstate_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->payloadstate(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PayloadStateList)
}

::google::protobuf::uint8* PayloadStateList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PayloadStateList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PayloadState payloadState = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->payloadstate_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->payloadstate(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PayloadStateList)
  return target;
}

size_t PayloadStateList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PayloadStateList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .PayloadState payloadState = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->payloadstate_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->payloadstate(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PayloadStateList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PayloadStateList)
  GOOGLE_DCHECK_NE(&from, this);
  const PayloadStateList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PayloadStateList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PayloadStateList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PayloadStateList)
    MergeFrom(*source);
  }
}

void PayloadStateList::MergeFrom(const PayloadStateList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PayloadStateList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  payloadstate_.MergeFrom(from.payloadstate_);
}

void PayloadStateList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PayloadStateList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayloadStateList::CopyFrom(const PayloadStateList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PayloadStateList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayloadStateList::IsInitialized() const {
  return true;
}

void PayloadStateList::Swap(PayloadStateList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PayloadStateList::InternalSwap(PayloadStateList* other) {
  using std::swap;
  CastToBase(&payloadstate_)->InternalSwap(CastToBase(&other->payloadstate_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PayloadStateList::GetMetadata() const {
  protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StickState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StickState::kIdFieldNumber;
const int StickState::kPositionFieldNumber;
const int StickState::kStickIdFieldNumber;
const int StickState::kOpenAiFlagFieldNumber;
const int StickState::kOpenAiPhotoReportFieldNumber;
const int StickState::kModelSnFieldNumber;
const int StickState::kProbFieldNumber;
const int StickState::kTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StickState::StickState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_StickState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:StickState)
}
StickState::StickState(const StickState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stickid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stickid().size() > 0) {
    stickid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stickid_);
  }
  modelsn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.modelsn().size() > 0) {
    modelsn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modelsn_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&prob_) -
    reinterpret_cast<char*>(&id_)) + sizeof(prob_));
  // @@protoc_insertion_point(copy_constructor:StickState)
}

void StickState::SharedCtor() {
  stickid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modelsn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prob_) -
      reinterpret_cast<char*>(&id_)) + sizeof(prob_));
}

StickState::~StickState() {
  // @@protoc_insertion_point(destructor:StickState)
  SharedDtor();
}

void StickState::SharedDtor() {
  stickid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modelsn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StickState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StickState::descriptor() {
  ::protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StickState& StickState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_StickState.base);
  return *internal_default_instance();
}


void StickState::Clear() {
// @@protoc_insertion_point(message_clear_start:StickState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  stickid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modelsn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prob_) -
      reinterpret_cast<char*>(&id_)) + sizeof(prob_));
  _internal_metadata_.Clear();
}

bool StickState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StickState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stickId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stickid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stickid().data(), static_cast<int>(this->stickid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "StickState.stickId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 openAiFlag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &openaiflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 openAiPhotoReport = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &openaiphotoreport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string modelSn = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modelsn()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->modelsn().data(), static_cast<int>(this->modelsn().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "StickState.modelSn"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float prob = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tags(this->tags_size() - 1).data(),
            static_cast<int>(this->tags(this->tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "StickState.tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StickState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StickState)
  return false;
#undef DO_
}

void StickState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StickState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // uint32 position = 2;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position(), output);
  }

  // string stickId = 3;
  if (this->stickid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stickid().data(), static_cast<int>(this->stickid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StickState.stickId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->stickid(), output);
  }

  // uint32 openAiFlag = 4;
  if (this->openaiflag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->openaiflag(), output);
  }

  // uint32 openAiPhotoReport = 5;
  if (this->openaiphotoreport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->openaiphotoreport(), output);
  }

  // string modelSn = 6;
  if (this->modelsn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modelsn().data(), static_cast<int>(this->modelsn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StickState.modelSn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->modelsn(), output);
  }

  // float prob = 7;
  if (this->prob() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->prob(), output);
  }

  // repeated string tags = 8;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StickState.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->tags(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:StickState)
}

::google::protobuf::uint8* StickState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:StickState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // uint32 position = 2;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->position(), target);
  }

  // string stickId = 3;
  if (this->stickid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stickid().data(), static_cast<int>(this->stickid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StickState.stickId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stickid(), target);
  }

  // uint32 openAiFlag = 4;
  if (this->openaiflag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->openaiflag(), target);
  }

  // uint32 openAiPhotoReport = 5;
  if (this->openaiphotoreport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->openaiphotoreport(), target);
  }

  // string modelSn = 6;
  if (this->modelsn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modelsn().data(), static_cast<int>(this->modelsn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StickState.modelSn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->modelsn(), target);
  }

  // float prob = 7;
  if (this->prob() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->prob(), target);
  }

  // repeated string tags = 8;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StickState.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->tags(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StickState)
  return target;
}

size_t StickState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StickState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string tags = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // string stickId = 3;
  if (this->stickid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stickid());
  }

  // string modelSn = 6;
  if (this->modelsn().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->modelsn());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // uint32 position = 2;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());
  }

  // uint32 openAiFlag = 4;
  if (this->openaiflag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->openaiflag());
  }

  // uint32 openAiPhotoReport = 5;
  if (this->openaiphotoreport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->openaiphotoreport());
  }

  // float prob = 7;
  if (this->prob() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StickState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StickState)
  GOOGLE_DCHECK_NE(&from, this);
  const StickState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StickState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StickState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StickState)
    MergeFrom(*source);
  }
}

void StickState::MergeFrom(const StickState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StickState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from.stickid().size() > 0) {

    stickid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stickid_);
  }
  if (from.modelsn().size() > 0) {

    modelsn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modelsn_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.openaiflag() != 0) {
    set_openaiflag(from.openaiflag());
  }
  if (from.openaiphotoreport() != 0) {
    set_openaiphotoreport(from.openaiphotoreport());
  }
  if (from.prob() != 0) {
    set_prob(from.prob());
  }
}

void StickState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StickState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StickState::CopyFrom(const StickState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StickState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StickState::IsInitialized() const {
  return true;
}

void StickState::Swap(StickState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StickState::InternalSwap(StickState* other) {
  using std::swap;
  tags_.InternalSwap(CastToBase(&other->tags_));
  stickid_.Swap(&other->stickid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  modelsn_.Swap(&other->modelsn_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(position_, other->position_);
  swap(openaiflag_, other->openaiflag_);
  swap(openaiphotoreport_, other->openaiphotoreport_);
  swap(prob_, other->prob_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StickState::GetMetadata() const {
  protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ParachuteState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParachuteState::kIdFieldNumber;
const int ParachuteState::kPositionFieldNumber;
const int ParachuteState::kConnectStatusFieldNumber;
const int ParachuteState::kIsOpenFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParachuteState::ParachuteState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_ParachuteState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ParachuteState)
}
ParachuteState::ParachuteState(const ParachuteState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&isopenflag_) -
    reinterpret_cast<char*>(&id_)) + sizeof(isopenflag_));
  // @@protoc_insertion_point(copy_constructor:ParachuteState)
}

void ParachuteState::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isopenflag_) -
      reinterpret_cast<char*>(&id_)) + sizeof(isopenflag_));
}

ParachuteState::~ParachuteState() {
  // @@protoc_insertion_point(destructor:ParachuteState)
  SharedDtor();
}

void ParachuteState::SharedDtor() {
}

void ParachuteState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ParachuteState::descriptor() {
  ::protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParachuteState& ParachuteState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_ParachuteState.base);
  return *internal_default_instance();
}


void ParachuteState::Clear() {
// @@protoc_insertion_point(message_clear_start:ParachuteState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isopenflag_) -
      reinterpret_cast<char*>(&id_)) + sizeof(isopenflag_));
  _internal_metadata_.Clear();
}

bool ParachuteState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ParachuteState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 connectStatus = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connectstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 isOpenFlag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isopenflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ParachuteState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ParachuteState)
  return false;
#undef DO_
}

void ParachuteState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ParachuteState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // uint32 position = 2;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position(), output);
  }

  // uint32 connectStatus = 3;
  if (this->connectstatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->connectstatus(), output);
  }

  // uint32 isOpenFlag = 4;
  if (this->isopenflag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->isopenflag(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ParachuteState)
}

::google::protobuf::uint8* ParachuteState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ParachuteState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // uint32 position = 2;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->position(), target);
  }

  // uint32 connectStatus = 3;
  if (this->connectstatus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->connectstatus(), target);
  }

  // uint32 isOpenFlag = 4;
  if (this->isopenflag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->isopenflag(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ParachuteState)
  return target;
}

size_t ParachuteState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ParachuteState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // uint32 position = 2;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());
  }

  // uint32 connectStatus = 3;
  if (this->connectstatus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->connectstatus());
  }

  // uint32 isOpenFlag = 4;
  if (this->isopenflag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->isopenflag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParachuteState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ParachuteState)
  GOOGLE_DCHECK_NE(&from, this);
  const ParachuteState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParachuteState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ParachuteState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ParachuteState)
    MergeFrom(*source);
  }
}

void ParachuteState::MergeFrom(const ParachuteState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ParachuteState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.connectstatus() != 0) {
    set_connectstatus(from.connectstatus());
  }
  if (from.isopenflag() != 0) {
    set_isopenflag(from.isopenflag());
  }
}

void ParachuteState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ParachuteState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParachuteState::CopyFrom(const ParachuteState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ParachuteState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParachuteState::IsInitialized() const {
  return true;
}

void ParachuteState::Swap(ParachuteState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParachuteState::InternalSwap(ParachuteState* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(position_, other->position_);
  swap(connectstatus_, other->connectstatus_);
  swap(isopenflag_, other->isopenflag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ParachuteState::GetMetadata() const {
  protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SprayFireState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SprayFireState::kIdFieldNumber;
const int SprayFireState::kPositionFieldNumber;
const int SprayFireState::kSprayStateFieldNumber;
const int SprayFireState::kFuelStateFieldNumber;
const int SprayFireState::kIgnitionStateFieldNumber;
const int SprayFireState::kLockStateFieldNumber;
const int SprayFireState::kGearFieldNumber;
const int SprayFireState::kLaserStateFieldNumber;
const int SprayFireState::kPressStateFieldNumber;
const int SprayFireState::kFireTimeFieldNumber;
const int SprayFireState::kExtendRcFieldNumber;
const int SprayFireState::kClaspStateFieldNumber;
const int SprayFireState::kYawFieldNumber;
const int SprayFireState::kPitchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SprayFireState::SprayFireState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_SprayFireState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SprayFireState)
}
SprayFireState::SprayFireState(const SprayFireState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pitch_) -
    reinterpret_cast<char*>(&id_)) + sizeof(pitch_));
  // @@protoc_insertion_point(copy_constructor:SprayFireState)
}

void SprayFireState::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pitch_) -
      reinterpret_cast<char*>(&id_)) + sizeof(pitch_));
}

SprayFireState::~SprayFireState() {
  // @@protoc_insertion_point(destructor:SprayFireState)
  SharedDtor();
}

void SprayFireState::SharedDtor() {
}

void SprayFireState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SprayFireState::descriptor() {
  ::protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SprayFireState& SprayFireState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_SprayFireState.base);
  return *internal_default_instance();
}


void SprayFireState::Clear() {
// @@protoc_insertion_point(message_clear_start:SprayFireState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pitch_) -
      reinterpret_cast<char*>(&id_)) + sizeof(pitch_));
  _internal_metadata_.Clear();
}

bool SprayFireState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SprayFireState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sprayState = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spraystate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 fuelState = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fuelstate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ignitionState = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ignitionstate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lockState = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lockstate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gear = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 laserState = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &laserstate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pressState = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pressstate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 fireTime = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &firetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 extendRc = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extendrc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 claspState = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &claspstate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 yaw = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pitch = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SprayFireState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SprayFireState)
  return false;
#undef DO_
}

void SprayFireState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SprayFireState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // uint32 position = 2;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position(), output);
  }

  // uint32 sprayState = 3;
  if (this->spraystate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->spraystate(), output);
  }

  // uint32 fuelState = 4;
  if (this->fuelstate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fuelstate(), output);
  }

  // uint32 ignitionState = 5;
  if (this->ignitionstate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ignitionstate(), output);
  }

  // uint32 lockState = 6;
  if (this->lockstate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->lockstate(), output);
  }

  // uint32 gear = 7;
  if (this->gear() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->gear(), output);
  }

  // uint32 laserState = 8;
  if (this->laserstate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->laserstate(), output);
  }

  // uint32 pressState = 9;
  if (this->pressstate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pressstate(), output);
  }

  // uint32 fireTime = 10;
  if (this->firetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->firetime(), output);
  }

  // uint32 extendRc = 11;
  if (this->extendrc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->extendrc(), output);
  }

  // uint32 claspState = 12;
  if (this->claspstate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->claspstate(), output);
  }

  // uint32 yaw = 13;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->yaw(), output);
  }

  // uint32 pitch = 14;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->pitch(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:SprayFireState)
}

::google::protobuf::uint8* SprayFireState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SprayFireState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // uint32 position = 2;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->position(), target);
  }

  // uint32 sprayState = 3;
  if (this->spraystate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->spraystate(), target);
  }

  // uint32 fuelState = 4;
  if (this->fuelstate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fuelstate(), target);
  }

  // uint32 ignitionState = 5;
  if (this->ignitionstate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ignitionstate(), target);
  }

  // uint32 lockState = 6;
  if (this->lockstate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->lockstate(), target);
  }

  // uint32 gear = 7;
  if (this->gear() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->gear(), target);
  }

  // uint32 laserState = 8;
  if (this->laserstate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->laserstate(), target);
  }

  // uint32 pressState = 9;
  if (this->pressstate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pressstate(), target);
  }

  // uint32 fireTime = 10;
  if (this->firetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->firetime(), target);
  }

  // uint32 extendRc = 11;
  if (this->extendrc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->extendrc(), target);
  }

  // uint32 claspState = 12;
  if (this->claspstate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->claspstate(), target);
  }

  // uint32 yaw = 13;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->yaw(), target);
  }

  // uint32 pitch = 14;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->pitch(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SprayFireState)
  return target;
}

size_t SprayFireState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SprayFireState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // uint32 position = 2;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());
  }

  // uint32 sprayState = 3;
  if (this->spraystate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->spraystate());
  }

  // uint32 fuelState = 4;
  if (this->fuelstate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fuelstate());
  }

  // uint32 ignitionState = 5;
  if (this->ignitionstate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ignitionstate());
  }

  // uint32 lockState = 6;
  if (this->lockstate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lockstate());
  }

  // uint32 gear = 7;
  if (this->gear() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gear());
  }

  // uint32 laserState = 8;
  if (this->laserstate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->laserstate());
  }

  // uint32 pressState = 9;
  if (this->pressstate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pressstate());
  }

  // uint32 fireTime = 10;
  if (this->firetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->firetime());
  }

  // uint32 extendRc = 11;
  if (this->extendrc() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->extendrc());
  }

  // uint32 claspState = 12;
  if (this->claspstate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->claspstate());
  }

  // uint32 yaw = 13;
  if (this->yaw() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->yaw());
  }

  // uint32 pitch = 14;
  if (this->pitch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pitch());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SprayFireState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SprayFireState)
  GOOGLE_DCHECK_NE(&from, this);
  const SprayFireState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SprayFireState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SprayFireState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SprayFireState)
    MergeFrom(*source);
  }
}

void SprayFireState::MergeFrom(const SprayFireState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SprayFireState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.spraystate() != 0) {
    set_spraystate(from.spraystate());
  }
  if (from.fuelstate() != 0) {
    set_fuelstate(from.fuelstate());
  }
  if (from.ignitionstate() != 0) {
    set_ignitionstate(from.ignitionstate());
  }
  if (from.lockstate() != 0) {
    set_lockstate(from.lockstate());
  }
  if (from.gear() != 0) {
    set_gear(from.gear());
  }
  if (from.laserstate() != 0) {
    set_laserstate(from.laserstate());
  }
  if (from.pressstate() != 0) {
    set_pressstate(from.pressstate());
  }
  if (from.firetime() != 0) {
    set_firetime(from.firetime());
  }
  if (from.extendrc() != 0) {
    set_extendrc(from.extendrc());
  }
  if (from.claspstate() != 0) {
    set_claspstate(from.claspstate());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
}

void SprayFireState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SprayFireState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SprayFireState::CopyFrom(const SprayFireState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SprayFireState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SprayFireState::IsInitialized() const {
  return true;
}

void SprayFireState::Swap(SprayFireState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SprayFireState::InternalSwap(SprayFireState* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(position_, other->position_);
  swap(spraystate_, other->spraystate_);
  swap(fuelstate_, other->fuelstate_);
  swap(ignitionstate_, other->ignitionstate_);
  swap(lockstate_, other->lockstate_);
  swap(gear_, other->gear_);
  swap(laserstate_, other->laserstate_);
  swap(pressstate_, other->pressstate_);
  swap(firetime_, other->firetime_);
  swap(extendrc_, other->extendrc_);
  swap(claspstate_, other->claspstate_);
  swap(yaw_, other->yaw_);
  swap(pitch_, other->pitch_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SprayFireState::GetMetadata() const {
  protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AirAnalysis::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AirAnalysis::kSnFieldNumber;
const int AirAnalysis::kSatFieldNumber;
const int AirAnalysis::kLngFieldNumber;
const int AirAnalysis::kLatFieldNumber;
const int AirAnalysis::kHeightFieldNumber;
const int AirAnalysis::kPm25FieldNumber;
const int AirAnalysis::kPm10FieldNumber;
const int AirAnalysis::kSo2FieldNumber;
const int AirAnalysis::kCoFieldNumber;
const int AirAnalysis::kNo2FieldNumber;
const int AirAnalysis::kO3FieldNumber;
const int AirAnalysis::kTempFieldNumber;
const int AirAnalysis::kHumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AirAnalysis::AirAnalysis()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_AirAnalysis.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:AirAnalysis)
}
AirAnalysis::AirAnalysis(const AirAnalysis& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sn().size() > 0) {
    sn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sn_);
  }
  ::memcpy(&lng_, &from.lng_,
    static_cast<size_t>(reinterpret_cast<char*>(&hum_) -
    reinterpret_cast<char*>(&lng_)) + sizeof(hum_));
  // @@protoc_insertion_point(copy_constructor:AirAnalysis)
}

void AirAnalysis::SharedCtor() {
  sn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lng_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hum_) -
      reinterpret_cast<char*>(&lng_)) + sizeof(hum_));
}

AirAnalysis::~AirAnalysis() {
  // @@protoc_insertion_point(destructor:AirAnalysis)
  SharedDtor();
}

void AirAnalysis::SharedDtor() {
  sn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AirAnalysis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AirAnalysis::descriptor() {
  ::protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AirAnalysis& AirAnalysis::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_TelemetryDataBuf_2dnew_2eproto::scc_info_AirAnalysis.base);
  return *internal_default_instance();
}


void AirAnalysis::Clear() {
// @@protoc_insertion_point(message_clear_start:AirAnalysis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lng_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hum_) -
      reinterpret_cast<char*>(&lng_)) + sizeof(hum_));
  _internal_metadata_.Clear();
}

bool AirAnalysis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AirAnalysis)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sn = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sn()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sn().data(), static_cast<int>(this->sn().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AirAnalysis.sn"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lng = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lng_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lat = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pm25 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pm25_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pm10 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pm10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float so2 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &so2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float co = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &co_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float no2 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &no2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float o3 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &o3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float temp = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &temp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float hum = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AirAnalysis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AirAnalysis)
  return false;
#undef DO_
}

void AirAnalysis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AirAnalysis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sn = 1;
  if (this->sn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sn().data(), static_cast<int>(this->sn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AirAnalysis.sn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sn(), output);
  }

  // uint32 sat = 2;
  if (this->sat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sat(), output);
  }

  // double lng = 3;
  if (this->lng() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lng(), output);
  }

  // double lat = 4;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lat(), output);
  }

  // float height = 5;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->height(), output);
  }

  // float pm25 = 6;
  if (this->pm25() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->pm25(), output);
  }

  // float pm10 = 7;
  if (this->pm10() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->pm10(), output);
  }

  // float so2 = 8;
  if (this->so2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->so2(), output);
  }

  // float co = 9;
  if (this->co() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->co(), output);
  }

  // float no2 = 10;
  if (this->no2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->no2(), output);
  }

  // float o3 = 11;
  if (this->o3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->o3(), output);
  }

  // float temp = 12;
  if (this->temp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->temp(), output);
  }

  // float hum = 13;
  if (this->hum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->hum(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AirAnalysis)
}

::google::protobuf::uint8* AirAnalysis::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AirAnalysis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sn = 1;
  if (this->sn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sn().data(), static_cast<int>(this->sn().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AirAnalysis.sn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sn(), target);
  }

  // uint32 sat = 2;
  if (this->sat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sat(), target);
  }

  // double lng = 3;
  if (this->lng() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lng(), target);
  }

  // double lat = 4;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->lat(), target);
  }

  // float height = 5;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->height(), target);
  }

  // float pm25 = 6;
  if (this->pm25() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->pm25(), target);
  }

  // float pm10 = 7;
  if (this->pm10() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->pm10(), target);
  }

  // float so2 = 8;
  if (this->so2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->so2(), target);
  }

  // float co = 9;
  if (this->co() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->co(), target);
  }

  // float no2 = 10;
  if (this->no2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->no2(), target);
  }

  // float o3 = 11;
  if (this->o3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->o3(), target);
  }

  // float temp = 12;
  if (this->temp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->temp(), target);
  }

  // float hum = 13;
  if (this->hum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->hum(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AirAnalysis)
  return target;
}

size_t AirAnalysis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AirAnalysis)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sn = 1;
  if (this->sn().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sn());
  }

  // double lng = 3;
  if (this->lng() != 0) {
    total_size += 1 + 8;
  }

  // uint32 sat = 2;
  if (this->sat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sat());
  }

  // float height = 5;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  // double lat = 4;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  // float pm25 = 6;
  if (this->pm25() != 0) {
    total_size += 1 + 4;
  }

  // float pm10 = 7;
  if (this->pm10() != 0) {
    total_size += 1 + 4;
  }

  // float so2 = 8;
  if (this->so2() != 0) {
    total_size += 1 + 4;
  }

  // float co = 9;
  if (this->co() != 0) {
    total_size += 1 + 4;
  }

  // float no2 = 10;
  if (this->no2() != 0) {
    total_size += 1 + 4;
  }

  // float o3 = 11;
  if (this->o3() != 0) {
    total_size += 1 + 4;
  }

  // float temp = 12;
  if (this->temp() != 0) {
    total_size += 1 + 4;
  }

  // float hum = 13;
  if (this->hum() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AirAnalysis::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AirAnalysis)
  GOOGLE_DCHECK_NE(&from, this);
  const AirAnalysis* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AirAnalysis>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AirAnalysis)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AirAnalysis)
    MergeFrom(*source);
  }
}

void AirAnalysis::MergeFrom(const AirAnalysis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AirAnalysis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sn().size() > 0) {

    sn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sn_);
  }
  if (from.lng() != 0) {
    set_lng(from.lng());
  }
  if (from.sat() != 0) {
    set_sat(from.sat());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.pm25() != 0) {
    set_pm25(from.pm25());
  }
  if (from.pm10() != 0) {
    set_pm10(from.pm10());
  }
  if (from.so2() != 0) {
    set_so2(from.so2());
  }
  if (from.co() != 0) {
    set_co(from.co());
  }
  if (from.no2() != 0) {
    set_no2(from.no2());
  }
  if (from.o3() != 0) {
    set_o3(from.o3());
  }
  if (from.temp() != 0) {
    set_temp(from.temp());
  }
  if (from.hum() != 0) {
    set_hum(from.hum());
  }
}

void AirAnalysis::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AirAnalysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AirAnalysis::CopyFrom(const AirAnalysis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AirAnalysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AirAnalysis::IsInitialized() const {
  return true;
}

void AirAnalysis::Swap(AirAnalysis* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AirAnalysis::InternalSwap(AirAnalysis* other) {
  using std::swap;
  sn_.Swap(&other->sn_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lng_, other->lng_);
  swap(sat_, other->sat_);
  swap(height_, other->height_);
  swap(lat_, other->lat_);
  swap(pm25_, other->pm25_);
  swap(pm10_, other->pm10_);
  swap(so2_, other->so2_);
  swap(co_, other->co_);
  swap(no2_, other->no2_);
  swap(o3_, other->o3_);
  swap(temp_, other->temp_);
  swap(hum_, other->hum_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AirAnalysis::GetMetadata() const {
  protobuf_TelemetryDataBuf_2dnew_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TelemetryDataBuf_2dnew_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TelemetryData* Arena::CreateMaybeMessage< ::TelemetryData >(Arena* arena) {
  return Arena::CreateInternal< ::TelemetryData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TelemetryList* Arena::CreateMaybeMessage< ::TelemetryList >(Arena* arena) {
  return Arena::CreateInternal< ::TelemetryList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SignalInfo* Arena::CreateMaybeMessage< ::SignalInfo >(Arena* arena) {
  return Arena::CreateInternal< ::SignalInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SignalList* Arena::CreateMaybeMessage< ::SignalList >(Arena* arena) {
  return Arena::CreateInternal< ::SignalList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::UavState* Arena::CreateMaybeMessage< ::UavState >(Arena* arena) {
  return Arena::CreateInternal< ::UavState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::FlightControllerState* Arena::CreateMaybeMessage< ::FlightControllerState >(Arena* arena) {
  return Arena::CreateInternal< ::FlightControllerState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::BatteryState* Arena::CreateMaybeMessage< ::BatteryState >(Arena* arena) {
  return Arena::CreateInternal< ::BatteryState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::BatteryStateInfo* Arena::CreateMaybeMessage< ::BatteryStateInfo >(Arena* arena) {
  return Arena::CreateInternal< ::BatteryStateInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PtzState* Arena::CreateMaybeMessage< ::PtzState >(Arena* arena) {
  return Arena::CreateInternal< ::PtzState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CameraState* Arena::CreateMaybeMessage< ::CameraState >(Arena* arena) {
  return Arena::CreateInternal< ::CameraState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MissionState* Arena::CreateMaybeMessage< ::MissionState >(Arena* arena) {
  return Arena::CreateInternal< ::MissionState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::BreakPoint* Arena::CreateMaybeMessage< ::BreakPoint >(Arena* arena) {
  return Arena::CreateInternal< ::BreakPoint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AvoidanceData* Arena::CreateMaybeMessage< ::AvoidanceData >(Arena* arena) {
  return Arena::CreateInternal< ::AvoidanceData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::HmsAlarmData* Arena::CreateMaybeMessage< ::HmsAlarmData >(Arena* arena) {
  return Arena::CreateInternal< ::HmsAlarmData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::UavStateList* Arena::CreateMaybeMessage< ::UavStateList >(Arena* arena) {
  return Arena::CreateInternal< ::UavStateList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PlanLineData* Arena::CreateMaybeMessage< ::PlanLineData >(Arena* arena) {
  return Arena::CreateInternal< ::PlanLineData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PointData* Arena::CreateMaybeMessage< ::PointData >(Arena* arena) {
  return Arena::CreateInternal< ::PointData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PointAction* Arena::CreateMaybeMessage< ::PointAction >(Arena* arena) {
  return Arena::CreateInternal< ::PointAction >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::HangarPoint* Arena::CreateMaybeMessage< ::HangarPoint >(Arena* arena) {
  return Arena::CreateInternal< ::HangarPoint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NormalModel* Arena::CreateMaybeMessage< ::NormalModel >(Arena* arena) {
  return Arena::CreateInternal< ::NormalModel >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SurroundModel* Arena::CreateMaybeMessage< ::SurroundModel >(Arena* arena) {
  return Arena::CreateInternal< ::SurroundModel >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::UavInitInfo* Arena::CreateMaybeMessage< ::UavInitInfo >(Arena* arena) {
  return Arena::CreateInternal< ::UavInitInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PayloadState* Arena::CreateMaybeMessage< ::PayloadState >(Arena* arena) {
  return Arena::CreateInternal< ::PayloadState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PayloadStateList* Arena::CreateMaybeMessage< ::PayloadStateList >(Arena* arena) {
  return Arena::CreateInternal< ::PayloadStateList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::StickState* Arena::CreateMaybeMessage< ::StickState >(Arena* arena) {
  return Arena::CreateInternal< ::StickState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ParachuteState* Arena::CreateMaybeMessage< ::ParachuteState >(Arena* arena) {
  return Arena::CreateInternal< ::ParachuteState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SprayFireState* Arena::CreateMaybeMessage< ::SprayFireState >(Arena* arena) {
  return Arena::CreateInternal< ::SprayFireState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AirAnalysis* Arena::CreateMaybeMessage< ::AirAnalysis >(Arena* arena) {
  return Arena::CreateInternal< ::AirAnalysis >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
