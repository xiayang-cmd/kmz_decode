// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TelemetryDataBuf-new.proto

#ifndef PROTOBUF_INCLUDED_TelemetryDataBuf_2dnew_2eproto
#define PROTOBUF_INCLUDED_TelemetryDataBuf_2dnew_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_TelemetryDataBuf_2dnew_2eproto 

namespace protobuf_TelemetryDataBuf_2dnew_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[28];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_TelemetryDataBuf_2dnew_2eproto
class AirAnalysis;
class AirAnalysisDefaultTypeInternal;
extern AirAnalysisDefaultTypeInternal _AirAnalysis_default_instance_;
class AvoidanceData;
class AvoidanceDataDefaultTypeInternal;
extern AvoidanceDataDefaultTypeInternal _AvoidanceData_default_instance_;
class BatteryState;
class BatteryStateDefaultTypeInternal;
extern BatteryStateDefaultTypeInternal _BatteryState_default_instance_;
class BatteryStateInfo;
class BatteryStateInfoDefaultTypeInternal;
extern BatteryStateInfoDefaultTypeInternal _BatteryStateInfo_default_instance_;
class BreakPoint;
class BreakPointDefaultTypeInternal;
extern BreakPointDefaultTypeInternal _BreakPoint_default_instance_;
class CameraState;
class CameraStateDefaultTypeInternal;
extern CameraStateDefaultTypeInternal _CameraState_default_instance_;
class FlightControllerState;
class FlightControllerStateDefaultTypeInternal;
extern FlightControllerStateDefaultTypeInternal _FlightControllerState_default_instance_;
class HangarPoint;
class HangarPointDefaultTypeInternal;
extern HangarPointDefaultTypeInternal _HangarPoint_default_instance_;
class HmsAlarmData;
class HmsAlarmDataDefaultTypeInternal;
extern HmsAlarmDataDefaultTypeInternal _HmsAlarmData_default_instance_;
class MissionState;
class MissionStateDefaultTypeInternal;
extern MissionStateDefaultTypeInternal _MissionState_default_instance_;
class NormalModel;
class NormalModelDefaultTypeInternal;
extern NormalModelDefaultTypeInternal _NormalModel_default_instance_;
class ParachuteState;
class ParachuteStateDefaultTypeInternal;
extern ParachuteStateDefaultTypeInternal _ParachuteState_default_instance_;
class PayloadState;
class PayloadStateDefaultTypeInternal;
extern PayloadStateDefaultTypeInternal _PayloadState_default_instance_;
class PayloadStateList;
class PayloadStateListDefaultTypeInternal;
extern PayloadStateListDefaultTypeInternal _PayloadStateList_default_instance_;
class PlanLineData;
class PlanLineDataDefaultTypeInternal;
extern PlanLineDataDefaultTypeInternal _PlanLineData_default_instance_;
class PointAction;
class PointActionDefaultTypeInternal;
extern PointActionDefaultTypeInternal _PointAction_default_instance_;
class PointData;
class PointDataDefaultTypeInternal;
extern PointDataDefaultTypeInternal _PointData_default_instance_;
class PtzState;
class PtzStateDefaultTypeInternal;
extern PtzStateDefaultTypeInternal _PtzState_default_instance_;
class SignalInfo;
class SignalInfoDefaultTypeInternal;
extern SignalInfoDefaultTypeInternal _SignalInfo_default_instance_;
class SignalList;
class SignalListDefaultTypeInternal;
extern SignalListDefaultTypeInternal _SignalList_default_instance_;
class SprayFireState;
class SprayFireStateDefaultTypeInternal;
extern SprayFireStateDefaultTypeInternal _SprayFireState_default_instance_;
class StickState;
class StickStateDefaultTypeInternal;
extern StickStateDefaultTypeInternal _StickState_default_instance_;
class SurroundModel;
class SurroundModelDefaultTypeInternal;
extern SurroundModelDefaultTypeInternal _SurroundModel_default_instance_;
class TelemetryData;
class TelemetryDataDefaultTypeInternal;
extern TelemetryDataDefaultTypeInternal _TelemetryData_default_instance_;
class TelemetryList;
class TelemetryListDefaultTypeInternal;
extern TelemetryListDefaultTypeInternal _TelemetryList_default_instance_;
class UavInitInfo;
class UavInitInfoDefaultTypeInternal;
extern UavInitInfoDefaultTypeInternal _UavInitInfo_default_instance_;
class UavState;
class UavStateDefaultTypeInternal;
extern UavStateDefaultTypeInternal _UavState_default_instance_;
class UavStateList;
class UavStateListDefaultTypeInternal;
extern UavStateListDefaultTypeInternal _UavStateList_default_instance_;
namespace google {
namespace protobuf {
template<> ::AirAnalysis* Arena::CreateMaybeMessage<::AirAnalysis>(Arena*);
template<> ::AvoidanceData* Arena::CreateMaybeMessage<::AvoidanceData>(Arena*);
template<> ::BatteryState* Arena::CreateMaybeMessage<::BatteryState>(Arena*);
template<> ::BatteryStateInfo* Arena::CreateMaybeMessage<::BatteryStateInfo>(Arena*);
template<> ::BreakPoint* Arena::CreateMaybeMessage<::BreakPoint>(Arena*);
template<> ::CameraState* Arena::CreateMaybeMessage<::CameraState>(Arena*);
template<> ::FlightControllerState* Arena::CreateMaybeMessage<::FlightControllerState>(Arena*);
template<> ::HangarPoint* Arena::CreateMaybeMessage<::HangarPoint>(Arena*);
template<> ::HmsAlarmData* Arena::CreateMaybeMessage<::HmsAlarmData>(Arena*);
template<> ::MissionState* Arena::CreateMaybeMessage<::MissionState>(Arena*);
template<> ::NormalModel* Arena::CreateMaybeMessage<::NormalModel>(Arena*);
template<> ::ParachuteState* Arena::CreateMaybeMessage<::ParachuteState>(Arena*);
template<> ::PayloadState* Arena::CreateMaybeMessage<::PayloadState>(Arena*);
template<> ::PayloadStateList* Arena::CreateMaybeMessage<::PayloadStateList>(Arena*);
template<> ::PlanLineData* Arena::CreateMaybeMessage<::PlanLineData>(Arena*);
template<> ::PointAction* Arena::CreateMaybeMessage<::PointAction>(Arena*);
template<> ::PointData* Arena::CreateMaybeMessage<::PointData>(Arena*);
template<> ::PtzState* Arena::CreateMaybeMessage<::PtzState>(Arena*);
template<> ::SignalInfo* Arena::CreateMaybeMessage<::SignalInfo>(Arena*);
template<> ::SignalList* Arena::CreateMaybeMessage<::SignalList>(Arena*);
template<> ::SprayFireState* Arena::CreateMaybeMessage<::SprayFireState>(Arena*);
template<> ::StickState* Arena::CreateMaybeMessage<::StickState>(Arena*);
template<> ::SurroundModel* Arena::CreateMaybeMessage<::SurroundModel>(Arena*);
template<> ::TelemetryData* Arena::CreateMaybeMessage<::TelemetryData>(Arena*);
template<> ::TelemetryList* Arena::CreateMaybeMessage<::TelemetryList>(Arena*);
template<> ::UavInitInfo* Arena::CreateMaybeMessage<::UavInitInfo>(Arena*);
template<> ::UavState* Arena::CreateMaybeMessage<::UavState>(Arena*);
template<> ::UavStateList* Arena::CreateMaybeMessage<::UavStateList>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class TelemetryData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TelemetryData) */ {
 public:
  TelemetryData();
  virtual ~TelemetryData();

  TelemetryData(const TelemetryData& from);

  inline TelemetryData& operator=(const TelemetryData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TelemetryData(TelemetryData&& from) noexcept
    : TelemetryData() {
    *this = ::std::move(from);
  }

  inline TelemetryData& operator=(TelemetryData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TelemetryData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TelemetryData* internal_default_instance() {
    return reinterpret_cast<const TelemetryData*>(
               &_TelemetryData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TelemetryData* other);
  friend void swap(TelemetryData& a, TelemetryData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TelemetryData* New() const final {
    return CreateMaybeMessage<TelemetryData>(NULL);
  }

  TelemetryData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TelemetryData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TelemetryData& from);
  void MergeFrom(const TelemetryData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TelemetryData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string boxSn = 15;
  void clear_boxsn();
  static const int kBoxSnFieldNumber = 15;
  const ::std::string& boxsn() const;
  void set_boxsn(const ::std::string& value);
  #if LANG_CXX11
  void set_boxsn(::std::string&& value);
  #endif
  void set_boxsn(const char* value);
  void set_boxsn(const char* value, size_t size);
  ::std::string* mutable_boxsn();
  ::std::string* release_boxsn();
  void set_allocated_boxsn(::std::string* boxsn);

  // string batteryPower = 16;
  void clear_batterypower();
  static const int kBatteryPowerFieldNumber = 16;
  const ::std::string& batterypower() const;
  void set_batterypower(const ::std::string& value);
  #if LANG_CXX11
  void set_batterypower(::std::string&& value);
  #endif
  void set_batterypower(const char* value);
  void set_batterypower(const char* value, size_t size);
  ::std::string* mutable_batterypower();
  ::std::string* release_batterypower();
  void set_allocated_batterypower(::std::string* batterypower);

  // string uavSn = 25;
  void clear_uavsn();
  static const int kUavSnFieldNumber = 25;
  const ::std::string& uavsn() const;
  void set_uavsn(const ::std::string& value);
  #if LANG_CXX11
  void set_uavsn(::std::string&& value);
  #endif
  void set_uavsn(const char* value);
  void set_uavsn(const char* value, size_t size);
  ::std::string* mutable_uavsn();
  ::std::string* release_uavsn();
  void set_allocated_uavsn(::std::string* uavsn);

  // string uavModel = 26;
  void clear_uavmodel();
  static const int kUavModelFieldNumber = 26;
  const ::std::string& uavmodel() const;
  void set_uavmodel(const ::std::string& value);
  #if LANG_CXX11
  void set_uavmodel(::std::string&& value);
  #endif
  void set_uavmodel(const char* value);
  void set_uavmodel(const char* value, size_t size);
  ::std::string* mutable_uavmodel();
  ::std::string* release_uavmodel();
  void set_allocated_uavmodel(::std::string* uavmodel);

  // string boxName = 36;
  void clear_boxname();
  static const int kBoxNameFieldNumber = 36;
  const ::std::string& boxname() const;
  void set_boxname(const ::std::string& value);
  #if LANG_CXX11
  void set_boxname(::std::string&& value);
  #endif
  void set_boxname(const char* value);
  void set_boxname(const char* value, size_t size);
  ::std::string* mutable_boxname();
  ::std::string* release_boxname();
  void set_allocated_boxname(::std::string* boxname);

  // double lng = 1;
  void clear_lng();
  static const int kLngFieldNumber = 1;
  double lng() const;
  void set_lng(double value);

  // double lat = 2;
  void clear_lat();
  static const int kLatFieldNumber = 2;
  double lat() const;
  void set_lat(double value);

  // float altitude = 3;
  void clear_altitude();
  static const int kAltitudeFieldNumber = 3;
  float altitude() const;
  void set_altitude(float value);

  // float ultrasonic = 4;
  void clear_ultrasonic();
  static const int kUltrasonicFieldNumber = 4;
  float ultrasonic() const;
  void set_ultrasonic(float value);

  // float pitch = 5;
  void clear_pitch();
  static const int kPitchFieldNumber = 5;
  float pitch() const;
  void set_pitch(float value);

  // float roll = 6;
  void clear_roll();
  static const int kRollFieldNumber = 6;
  float roll() const;
  void set_roll(float value);

  // float yaw = 7;
  void clear_yaw();
  static const int kYawFieldNumber = 7;
  float yaw() const;
  void set_yaw(float value);

  // float airspeed = 8;
  void clear_airspeed();
  static const int kAirspeedFieldNumber = 8;
  float airspeed() const;
  void set_airspeed(float value);

  // uint64 timestamp = 10;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 10;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // float velocity = 9;
  void clear_velocity();
  static const int kVelocityFieldNumber = 9;
  float velocity() const;
  void set_velocity(float value);

  // float ptpitch = 11;
  void clear_ptpitch();
  static const int kPtpitchFieldNumber = 11;
  float ptpitch() const;
  void set_ptpitch(float value);

  // float ptroll = 12;
  void clear_ptroll();
  static const int kPtrollFieldNumber = 12;
  float ptroll() const;
  void set_ptroll(float value);

  // float ptyaw = 13;
  void clear_ptyaw();
  static const int kPtyawFieldNumber = 13;
  float ptyaw() const;
  void set_ptyaw(float value);

  // float zoomfactor = 14;
  void clear_zoomfactor();
  static const int kZoomfactorFieldNumber = 14;
  float zoomfactor() const;
  void set_zoomfactor(float value);

  // uint32 satelliteCount = 17;
  void clear_satellitecount();
  static const int kSatelliteCountFieldNumber = 17;
  ::google::protobuf::uint32 satellitecount() const;
  void set_satellitecount(::google::protobuf::uint32 value);

  // uint64 taskId = 18;
  void clear_taskid();
  static const int kTaskIdFieldNumber = 18;
  ::google::protobuf::uint64 taskid() const;
  void set_taskid(::google::protobuf::uint64 value);

  // double rtkLng = 19;
  void clear_rtklng();
  static const int kRtkLngFieldNumber = 19;
  double rtklng() const;
  void set_rtklng(double value);

  // double rtkLat = 20;
  void clear_rtklat();
  static const int kRtkLatFieldNumber = 20;
  double rtklat() const;
  void set_rtklat(double value);

  // float rtkHFSL = 21;
  void clear_rtkhfsl();
  static const int kRtkHFSLFieldNumber = 21;
  float rtkhfsl() const;
  void set_rtkhfsl(float value);

  // uint32 rtkPositionInfo = 22;
  void clear_rtkpositioninfo();
  static const int kRtkPositionInfoFieldNumber = 22;
  ::google::protobuf::uint32 rtkpositioninfo() const;
  void set_rtkpositioninfo(::google::protobuf::uint32 value);

  // uint32 airFlyTimes = 23;
  void clear_airflytimes();
  static const int kAirFlyTimesFieldNumber = 23;
  ::google::protobuf::uint32 airflytimes() const;
  void set_airflytimes(::google::protobuf::uint32 value);

  // float airFlyDistance = 24;
  void clear_airflydistance();
  static const int kAirFlyDistanceFieldNumber = 24;
  float airflydistance() const;
  void set_airflydistance(float value);

  // float homeRange = 27;
  void clear_homerange();
  static const int kHomeRangeFieldNumber = 27;
  float homerange() const;
  void set_homerange(float value);

  // uint32 flightMode = 28;
  void clear_flightmode();
  static const int kFlightModeFieldNumber = 28;
  ::google::protobuf::uint32 flightmode() const;
  void set_flightmode(::google::protobuf::uint32 value);

  // float targetDistance = 29;
  void clear_targetdistance();
  static const int kTargetDistanceFieldNumber = 29;
  float targetdistance() const;
  void set_targetdistance(float value);

  // uint32 predictFlyTime = 30;
  void clear_predictflytime();
  static const int kPredictFlyTimeFieldNumber = 30;
  ::google::protobuf::uint32 predictflytime() const;
  void set_predictflytime(::google::protobuf::uint32 value);

  // float ultrasonicMax = 31;
  void clear_ultrasonicmax();
  static const int kUltrasonicMaxFieldNumber = 31;
  float ultrasonicmax() const;
  void set_ultrasonicmax(float value);

  // float ultrasonicMin = 32;
  void clear_ultrasonicmin();
  static const int kUltrasonicMinFieldNumber = 32;
  float ultrasonicmin() const;
  void set_ultrasonicmin(float value);

  // float xVelocity = 33;
  void clear_xvelocity();
  static const int kXVelocityFieldNumber = 33;
  float xvelocity() const;
  void set_xvelocity(float value);

  // float yVelocity = 34;
  void clear_yvelocity();
  static const int kYVelocityFieldNumber = 34;
  float yvelocity() const;
  void set_yvelocity(float value);

  // float zVelocity = 35;
  void clear_zvelocity();
  static const int kZVelocityFieldNumber = 35;
  float zvelocity() const;
  void set_zvelocity(float value);

  // uint32 predictFlyTimes = 37;
  void clear_predictflytimes();
  static const int kPredictFlyTimesFieldNumber = 37;
  ::google::protobuf::uint32 predictflytimes() const;
  void set_predictflytimes(::google::protobuf::uint32 value);

  // uint32 predictGohomeBattery = 38;
  void clear_predictgohomebattery();
  static const int kPredictGohomeBatteryFieldNumber = 38;
  ::google::protobuf::uint32 predictgohomebattery() const;
  void set_predictgohomebattery(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TelemetryData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr boxsn_;
  ::google::protobuf::internal::ArenaStringPtr batterypower_;
  ::google::protobuf::internal::ArenaStringPtr uavsn_;
  ::google::protobuf::internal::ArenaStringPtr uavmodel_;
  ::google::protobuf::internal::ArenaStringPtr boxname_;
  double lng_;
  double lat_;
  float altitude_;
  float ultrasonic_;
  float pitch_;
  float roll_;
  float yaw_;
  float airspeed_;
  ::google::protobuf::uint64 timestamp_;
  float velocity_;
  float ptpitch_;
  float ptroll_;
  float ptyaw_;
  float zoomfactor_;
  ::google::protobuf::uint32 satellitecount_;
  ::google::protobuf::uint64 taskid_;
  double rtklng_;
  double rtklat_;
  float rtkhfsl_;
  ::google::protobuf::uint32 rtkpositioninfo_;
  ::google::protobuf::uint32 airflytimes_;
  float airflydistance_;
  float homerange_;
  ::google::protobuf::uint32 flightmode_;
  float targetdistance_;
  ::google::protobuf::uint32 predictflytime_;
  float ultrasonicmax_;
  float ultrasonicmin_;
  float xvelocity_;
  float yvelocity_;
  float zvelocity_;
  ::google::protobuf::uint32 predictflytimes_;
  ::google::protobuf::uint32 predictgohomebattery_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_TelemetryDataBuf_2dnew_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TelemetryList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TelemetryList) */ {
 public:
  TelemetryList();
  virtual ~TelemetryList();

  TelemetryList(const TelemetryList& from);

  inline TelemetryList& operator=(const TelemetryList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TelemetryList(TelemetryList&& from) noexcept
    : TelemetryList() {
    *this = ::std::move(from);
  }

  inline TelemetryList& operator=(TelemetryList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TelemetryList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TelemetryList* internal_default_instance() {
    return reinterpret_cast<const TelemetryList*>(
               &_TelemetryList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TelemetryList* other);
  friend void swap(TelemetryList& a, TelemetryList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TelemetryList* New() const final {
    return CreateMaybeMessage<TelemetryList>(NULL);
  }

  TelemetryList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TelemetryList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TelemetryList& from);
  void MergeFrom(const TelemetryList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TelemetryList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TelemetryData telemetryList = 1;
  int telemetrylist_size() const;
  void clear_telemetrylist();
  static const int kTelemetryListFieldNumber = 1;
  ::TelemetryData* mutable_telemetrylist(int index);
  ::google::protobuf::RepeatedPtrField< ::TelemetryData >*
      mutable_telemetrylist();
  const ::TelemetryData& telemetrylist(int index) const;
  ::TelemetryData* add_telemetrylist();
  const ::google::protobuf::RepeatedPtrField< ::TelemetryData >&
      telemetrylist() const;

  // @@protoc_insertion_point(class_scope:TelemetryList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TelemetryData > telemetrylist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_TelemetryDataBuf_2dnew_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SignalInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SignalInfo) */ {
 public:
  SignalInfo();
  virtual ~SignalInfo();

  SignalInfo(const SignalInfo& from);

  inline SignalInfo& operator=(const SignalInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignalInfo(SignalInfo&& from) noexcept
    : SignalInfo() {
    *this = ::std::move(from);
  }

  inline SignalInfo& operator=(SignalInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SignalInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignalInfo* internal_default_instance() {
    return reinterpret_cast<const SignalInfo*>(
               &_SignalInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SignalInfo* other);
  friend void swap(SignalInfo& a, SignalInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignalInfo* New() const final {
    return CreateMaybeMessage<SignalInfo>(NULL);
  }

  SignalInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SignalInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SignalInfo& from);
  void MergeFrom(const SignalInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignalInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string mode = 1;
  void clear_mode();
  static const int kModeFieldNumber = 1;
  const ::std::string& mode() const;
  void set_mode(const ::std::string& value);
  #if LANG_CXX11
  void set_mode(::std::string&& value);
  #endif
  void set_mode(const char* value);
  void set_mode(const char* value, size_t size);
  ::std::string* mutable_mode();
  ::std::string* release_mode();
  void set_allocated_mode(::std::string* mode);

  // string mcc = 2;
  void clear_mcc();
  static const int kMccFieldNumber = 2;
  const ::std::string& mcc() const;
  void set_mcc(const ::std::string& value);
  #if LANG_CXX11
  void set_mcc(::std::string&& value);
  #endif
  void set_mcc(const char* value);
  void set_mcc(const char* value, size_t size);
  ::std::string* mutable_mcc();
  ::std::string* release_mcc();
  void set_allocated_mcc(::std::string* mcc);

  // string mnc = 3;
  void clear_mnc();
  static const int kMncFieldNumber = 3;
  const ::std::string& mnc() const;
  void set_mnc(const ::std::string& value);
  #if LANG_CXX11
  void set_mnc(::std::string&& value);
  #endif
  void set_mnc(const char* value);
  void set_mnc(const char* value, size_t size);
  ::std::string* mutable_mnc();
  ::std::string* release_mnc();
  void set_allocated_mnc(::std::string* mnc);

  // string cellid = 4;
  void clear_cellid();
  static const int kCellidFieldNumber = 4;
  const ::std::string& cellid() const;
  void set_cellid(const ::std::string& value);
  #if LANG_CXX11
  void set_cellid(::std::string&& value);
  #endif
  void set_cellid(const char* value);
  void set_cellid(const char* value, size_t size);
  ::std::string* mutable_cellid();
  ::std::string* release_cellid();
  void set_allocated_cellid(::std::string* cellid);

  // string pcid = 5;
  void clear_pcid();
  static const int kPcidFieldNumber = 5;
  const ::std::string& pcid() const;
  void set_pcid(const ::std::string& value);
  #if LANG_CXX11
  void set_pcid(::std::string&& value);
  #endif
  void set_pcid(const char* value);
  void set_pcid(const char* value, size_t size);
  ::std::string* mutable_pcid();
  ::std::string* release_pcid();
  void set_allocated_pcid(::std::string* pcid);

  // string tac = 6;
  void clear_tac();
  static const int kTacFieldNumber = 6;
  const ::std::string& tac() const;
  void set_tac(const ::std::string& value);
  #if LANG_CXX11
  void set_tac(::std::string&& value);
  #endif
  void set_tac(const char* value);
  void set_tac(const char* value, size_t size);
  ::std::string* mutable_tac();
  ::std::string* release_tac();
  void set_allocated_tac(::std::string* tac);

  // string arfcn = 7;
  void clear_arfcn();
  static const int kArfcnFieldNumber = 7;
  const ::std::string& arfcn() const;
  void set_arfcn(const ::std::string& value);
  #if LANG_CXX11
  void set_arfcn(::std::string&& value);
  #endif
  void set_arfcn(const char* value);
  void set_arfcn(const char* value, size_t size);
  ::std::string* mutable_arfcn();
  ::std::string* release_arfcn();
  void set_allocated_arfcn(::std::string* arfcn);

  // string band = 8;
  void clear_band();
  static const int kBandFieldNumber = 8;
  const ::std::string& band() const;
  void set_band(const ::std::string& value);
  #if LANG_CXX11
  void set_band(::std::string&& value);
  #endif
  void set_band(const char* value);
  void set_band(const char* value, size_t size);
  ::std::string* mutable_band();
  ::std::string* release_band();
  void set_allocated_band(::std::string* band);

  // string nr_dl_bandwidth = 9;
  void clear_nr_dl_bandwidth();
  static const int kNrDlBandwidthFieldNumber = 9;
  const ::std::string& nr_dl_bandwidth() const;
  void set_nr_dl_bandwidth(const ::std::string& value);
  #if LANG_CXX11
  void set_nr_dl_bandwidth(::std::string&& value);
  #endif
  void set_nr_dl_bandwidth(const char* value);
  void set_nr_dl_bandwidth(const char* value, size_t size);
  ::std::string* mutable_nr_dl_bandwidth();
  ::std::string* release_nr_dl_bandwidth();
  void set_allocated_nr_dl_bandwidth(::std::string* nr_dl_bandwidth);

  // string rsrp = 10;
  void clear_rsrp();
  static const int kRsrpFieldNumber = 10;
  const ::std::string& rsrp() const;
  void set_rsrp(const ::std::string& value);
  #if LANG_CXX11
  void set_rsrp(::std::string&& value);
  #endif
  void set_rsrp(const char* value);
  void set_rsrp(const char* value, size_t size);
  ::std::string* mutable_rsrp();
  ::std::string* release_rsrp();
  void set_allocated_rsrp(::std::string* rsrp);

  // string rsrq = 11;
  void clear_rsrq();
  static const int kRsrqFieldNumber = 11;
  const ::std::string& rsrq() const;
  void set_rsrq(const ::std::string& value);
  #if LANG_CXX11
  void set_rsrq(::std::string&& value);
  #endif
  void set_rsrq(const char* value);
  void set_rsrq(const char* value, size_t size);
  ::std::string* mutable_rsrq();
  ::std::string* release_rsrq();
  void set_allocated_rsrq(::std::string* rsrq);

  // string sinr = 12;
  void clear_sinr();
  static const int kSinrFieldNumber = 12;
  const ::std::string& sinr() const;
  void set_sinr(const ::std::string& value);
  #if LANG_CXX11
  void set_sinr(::std::string&& value);
  #endif
  void set_sinr(const char* value);
  void set_sinr(const char* value, size_t size);
  ::std::string* mutable_sinr();
  ::std::string* release_sinr();
  void set_allocated_sinr(::std::string* sinr);

  // string tx_power = 13;
  void clear_tx_power();
  static const int kTxPowerFieldNumber = 13;
  const ::std::string& tx_power() const;
  void set_tx_power(const ::std::string& value);
  #if LANG_CXX11
  void set_tx_power(::std::string&& value);
  #endif
  void set_tx_power(const char* value);
  void set_tx_power(const char* value, size_t size);
  ::std::string* mutable_tx_power();
  ::std::string* release_tx_power();
  void set_allocated_tx_power(::std::string* tx_power);

  // string srxlev = 14;
  void clear_srxlev();
  static const int kSrxlevFieldNumber = 14;
  const ::std::string& srxlev() const;
  void set_srxlev(const ::std::string& value);
  #if LANG_CXX11
  void set_srxlev(::std::string&& value);
  #endif
  void set_srxlev(const char* value);
  void set_srxlev(const char* value, size_t size);
  ::std::string* mutable_srxlev();
  ::std::string* release_srxlev();
  void set_allocated_srxlev(::std::string* srxlev);

  // string cqi = 15;
  void clear_cqi();
  static const int kCqiFieldNumber = 15;
  const ::std::string& cqi() const;
  void set_cqi(const ::std::string& value);
  #if LANG_CXX11
  void set_cqi(::std::string&& value);
  #endif
  void set_cqi(const char* value);
  void set_cqi(const char* value, size_t size);
  ::std::string* mutable_cqi();
  ::std::string* release_cqi();
  void set_allocated_cqi(::std::string* cqi);

  // string earfcn = 16;
  void clear_earfcn();
  static const int kEarfcnFieldNumber = 16;
  const ::std::string& earfcn() const;
  void set_earfcn(const ::std::string& value);
  #if LANG_CXX11
  void set_earfcn(::std::string&& value);
  #endif
  void set_earfcn(const char* value);
  void set_earfcn(const char* value, size_t size);
  ::std::string* mutable_earfcn();
  ::std::string* release_earfcn();
  void set_allocated_earfcn(::std::string* earfcn);

  // string freq_band_ind = 17;
  void clear_freq_band_ind();
  static const int kFreqBandIndFieldNumber = 17;
  const ::std::string& freq_band_ind() const;
  void set_freq_band_ind(const ::std::string& value);
  #if LANG_CXX11
  void set_freq_band_ind(::std::string&& value);
  #endif
  void set_freq_band_ind(const char* value);
  void set_freq_band_ind(const char* value, size_t size);
  ::std::string* mutable_freq_band_ind();
  ::std::string* release_freq_band_ind();
  void set_allocated_freq_band_ind(::std::string* freq_band_ind);

  // string ul_bandwidth = 18;
  void clear_ul_bandwidth();
  static const int kUlBandwidthFieldNumber = 18;
  const ::std::string& ul_bandwidth() const;
  void set_ul_bandwidth(const ::std::string& value);
  #if LANG_CXX11
  void set_ul_bandwidth(::std::string&& value);
  #endif
  void set_ul_bandwidth(const char* value);
  void set_ul_bandwidth(const char* value, size_t size);
  ::std::string* mutable_ul_bandwidth();
  ::std::string* release_ul_bandwidth();
  void set_allocated_ul_bandwidth(::std::string* ul_bandwidth);

  // string dl_bandwidth = 19;
  void clear_dl_bandwidth();
  static const int kDlBandwidthFieldNumber = 19;
  const ::std::string& dl_bandwidth() const;
  void set_dl_bandwidth(const ::std::string& value);
  #if LANG_CXX11
  void set_dl_bandwidth(::std::string&& value);
  #endif
  void set_dl_bandwidth(const char* value);
  void set_dl_bandwidth(const char* value, size_t size);
  ::std::string* mutable_dl_bandwidth();
  ::std::string* release_dl_bandwidth();
  void set_allocated_dl_bandwidth(::std::string* dl_bandwidth);

  // string is_tdd = 20;
  void clear_is_tdd();
  static const int kIsTddFieldNumber = 20;
  const ::std::string& is_tdd() const;
  void set_is_tdd(const ::std::string& value);
  #if LANG_CXX11
  void set_is_tdd(::std::string&& value);
  #endif
  void set_is_tdd(const char* value);
  void set_is_tdd(const char* value, size_t size);
  ::std::string* mutable_is_tdd();
  ::std::string* release_is_tdd();
  void set_allocated_is_tdd(::std::string* is_tdd);

  // string rssi = 21;
  void clear_rssi();
  static const int kRssiFieldNumber = 21;
  const ::std::string& rssi() const;
  void set_rssi(const ::std::string& value);
  #if LANG_CXX11
  void set_rssi(::std::string&& value);
  #endif
  void set_rssi(const char* value);
  void set_rssi(const char* value, size_t size);
  ::std::string* mutable_rssi();
  ::std::string* release_rssi();
  void set_allocated_rssi(::std::string* rssi);

  // string duplex_mode = 22;
  void clear_duplex_mode();
  static const int kDuplexModeFieldNumber = 22;
  const ::std::string& duplex_mode() const;
  void set_duplex_mode(const ::std::string& value);
  #if LANG_CXX11
  void set_duplex_mode(::std::string&& value);
  #endif
  void set_duplex_mode(const char* value);
  void set_duplex_mode(const char* value, size_t size);
  ::std::string* mutable_duplex_mode();
  ::std::string* release_duplex_mode();
  void set_allocated_duplex_mode(::std::string* duplex_mode);

  // string isp = 28;
  void clear_isp();
  static const int kIspFieldNumber = 28;
  const ::std::string& isp() const;
  void set_isp(const ::std::string& value);
  #if LANG_CXX11
  void set_isp(::std::string&& value);
  #endif
  void set_isp(const char* value);
  void set_isp(const char* value, size_t size);
  ::std::string* mutable_isp();
  ::std::string* release_isp();
  void set_allocated_isp(::std::string* isp);

  // string prx_rsrp = 30;
  void clear_prx_rsrp();
  static const int kPrxRsrpFieldNumber = 30;
  const ::std::string& prx_rsrp() const;
  void set_prx_rsrp(const ::std::string& value);
  #if LANG_CXX11
  void set_prx_rsrp(::std::string&& value);
  #endif
  void set_prx_rsrp(const char* value);
  void set_prx_rsrp(const char* value, size_t size);
  ::std::string* mutable_prx_rsrp();
  ::std::string* release_prx_rsrp();
  void set_allocated_prx_rsrp(::std::string* prx_rsrp);

  // string drx_rsrp = 31;
  void clear_drx_rsrp();
  static const int kDrxRsrpFieldNumber = 31;
  const ::std::string& drx_rsrp() const;
  void set_drx_rsrp(const ::std::string& value);
  #if LANG_CXX11
  void set_drx_rsrp(::std::string&& value);
  #endif
  void set_drx_rsrp(const char* value);
  void set_drx_rsrp(const char* value, size_t size);
  ::std::string* mutable_drx_rsrp();
  ::std::string* release_drx_rsrp();
  void set_allocated_drx_rsrp(::std::string* drx_rsrp);

  // string rx2_rsrp = 32;
  void clear_rx2_rsrp();
  static const int kRx2RsrpFieldNumber = 32;
  const ::std::string& rx2_rsrp() const;
  void set_rx2_rsrp(const ::std::string& value);
  #if LANG_CXX11
  void set_rx2_rsrp(::std::string&& value);
  #endif
  void set_rx2_rsrp(const char* value);
  void set_rx2_rsrp(const char* value, size_t size);
  ::std::string* mutable_rx2_rsrp();
  ::std::string* release_rx2_rsrp();
  void set_allocated_rx2_rsrp(::std::string* rx2_rsrp);

  // string rx3_rsrp = 33;
  void clear_rx3_rsrp();
  static const int kRx3RsrpFieldNumber = 33;
  const ::std::string& rx3_rsrp() const;
  void set_rx3_rsrp(const ::std::string& value);
  #if LANG_CXX11
  void set_rx3_rsrp(::std::string&& value);
  #endif
  void set_rx3_rsrp(const char* value);
  void set_rx3_rsrp(const char* value, size_t size);
  ::std::string* mutable_rx3_rsrp();
  ::std::string* release_rx3_rsrp();
  void set_allocated_rx3_rsrp(::std::string* rx3_rsrp);

  // string box_sn = 34;
  void clear_box_sn();
  static const int kBoxSnFieldNumber = 34;
  const ::std::string& box_sn() const;
  void set_box_sn(const ::std::string& value);
  #if LANG_CXX11
  void set_box_sn(::std::string&& value);
  #endif
  void set_box_sn(const char* value);
  void set_box_sn(const char* value, size_t size);
  ::std::string* mutable_box_sn();
  ::std::string* release_box_sn();
  void set_allocated_box_sn(::std::string* box_sn);

  // double lng = 23;
  void clear_lng();
  static const int kLngFieldNumber = 23;
  double lng() const;
  void set_lng(double value);

  // double lat = 24;
  void clear_lat();
  static const int kLatFieldNumber = 24;
  double lat() const;
  void set_lat(double value);

  // float height = 25;
  void clear_height();
  static const int kHeightFieldNumber = 25;
  float height() const;
  void set_height(float value);

  // uint32 timestamp = 26;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 26;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // uint32 boxstate = 27;
  void clear_boxstate();
  static const int kBoxstateFieldNumber = 27;
  ::google::protobuf::uint32 boxstate() const;
  void set_boxstate(::google::protobuf::uint32 value);

  // int32 tempMax = 29;
  void clear_tempmax();
  static const int kTempMaxFieldNumber = 29;
  ::google::protobuf::int32 tempmax() const;
  void set_tempmax(::google::protobuf::int32 value);

  // uint32 sim_use_seat = 35;
  void clear_sim_use_seat();
  static const int kSimUseSeatFieldNumber = 35;
  ::google::protobuf::uint32 sim_use_seat() const;
  void set_sim_use_seat(::google::protobuf::uint32 value);

  // uint32 networkMode = 36;
  void clear_networkmode();
  static const int kNetworkModeFieldNumber = 36;
  ::google::protobuf::uint32 networkmode() const;
  void set_networkmode(::google::protobuf::uint32 value);

  // uint32 delayTime = 37;
  void clear_delaytime();
  static const int kDelayTimeFieldNumber = 37;
  ::google::protobuf::uint32 delaytime() const;
  void set_delaytime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SignalInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mode_;
  ::google::protobuf::internal::ArenaStringPtr mcc_;
  ::google::protobuf::internal::ArenaStringPtr mnc_;
  ::google::protobuf::internal::ArenaStringPtr cellid_;
  ::google::protobuf::internal::ArenaStringPtr pcid_;
  ::google::protobuf::internal::ArenaStringPtr tac_;
  ::google::protobuf::internal::ArenaStringPtr arfcn_;
  ::google::protobuf::internal::ArenaStringPtr band_;
  ::google::protobuf::internal::ArenaStringPtr nr_dl_bandwidth_;
  ::google::protobuf::internal::ArenaStringPtr rsrp_;
  ::google::protobuf::internal::ArenaStringPtr rsrq_;
  ::google::protobuf::internal::ArenaStringPtr sinr_;
  ::google::protobuf::internal::ArenaStringPtr tx_power_;
  ::google::protobuf::internal::ArenaStringPtr srxlev_;
  ::google::protobuf::internal::ArenaStringPtr cqi_;
  ::google::protobuf::internal::ArenaStringPtr earfcn_;
  ::google::protobuf::internal::ArenaStringPtr freq_band_ind_;
  ::google::protobuf::internal::ArenaStringPtr ul_bandwidth_;
  ::google::protobuf::internal::ArenaStringPtr dl_bandwidth_;
  ::google::protobuf::internal::ArenaStringPtr is_tdd_;
  ::google::protobuf::internal::ArenaStringPtr rssi_;
  ::google::protobuf::internal::ArenaStringPtr duplex_mode_;
  ::google::protobuf::internal::ArenaStringPtr isp_;
  ::google::protobuf::internal::ArenaStringPtr prx_rsrp_;
  ::google::protobuf::internal::ArenaStringPtr drx_rsrp_;
  ::google::protobuf::internal::ArenaStringPtr rx2_rsrp_;
  ::google::protobuf::internal::ArenaStringPtr rx3_rsrp_;
  ::google::protobuf::internal::ArenaStringPtr box_sn_;
  double lng_;
  double lat_;
  float height_;
  ::google::protobuf::uint32 timestamp_;
  ::google::protobuf::uint32 boxstate_;
  ::google::protobuf::int32 tempmax_;
  ::google::protobuf::uint32 sim_use_seat_;
  ::google::protobuf::uint32 networkmode_;
  ::google::protobuf::uint32 delaytime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_TelemetryDataBuf_2dnew_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SignalList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SignalList) */ {
 public:
  SignalList();
  virtual ~SignalList();

  SignalList(const SignalList& from);

  inline SignalList& operator=(const SignalList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignalList(SignalList&& from) noexcept
    : SignalList() {
    *this = ::std::move(from);
  }

  inline SignalList& operator=(SignalList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SignalList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignalList* internal_default_instance() {
    return reinterpret_cast<const SignalList*>(
               &_SignalList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SignalList* other);
  friend void swap(SignalList& a, SignalList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignalList* New() const final {
    return CreateMaybeMessage<SignalList>(NULL);
  }

  SignalList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SignalList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SignalList& from);
  void MergeFrom(const SignalList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignalList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SignalInfo signalInfo = 1;
  int signalinfo_size() const;
  void clear_signalinfo();
  static const int kSignalInfoFieldNumber = 1;
  ::SignalInfo* mutable_signalinfo(int index);
  ::google::protobuf::RepeatedPtrField< ::SignalInfo >*
      mutable_signalinfo();
  const ::SignalInfo& signalinfo(int index) const;
  ::SignalInfo* add_signalinfo();
  const ::google::protobuf::RepeatedPtrField< ::SignalInfo >&
      signalinfo() const;

  // @@protoc_insertion_point(class_scope:SignalList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::SignalInfo > signalinfo_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_TelemetryDataBuf_2dnew_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UavState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UavState) */ {
 public:
  UavState();
  virtual ~UavState();

  UavState(const UavState& from);

  inline UavState& operator=(const UavState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UavState(UavState&& from) noexcept
    : UavState() {
    *this = ::std::move(from);
  }

  inline UavState& operator=(UavState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UavState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UavState* internal_default_instance() {
    return reinterpret_cast<const UavState*>(
               &_UavState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(UavState* other);
  friend void swap(UavState& a, UavState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UavState* New() const final {
    return CreateMaybeMessage<UavState>(NULL);
  }

  UavState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UavState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UavState& from);
  void MergeFrom(const UavState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UavState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .HmsAlarmData hmsAlarmData = 8;
  int hmsalarmdata_size() const;
  void clear_hmsalarmdata();
  static const int kHmsAlarmDataFieldNumber = 8;
  ::HmsAlarmData* mutable_hmsalarmdata(int index);
  ::google::protobuf::RepeatedPtrField< ::HmsAlarmData >*
      mutable_hmsalarmdata();
  const ::HmsAlarmData& hmsalarmdata(int index) const;
  ::HmsAlarmData* add_hmsalarmdata();
  const ::google::protobuf::RepeatedPtrField< ::HmsAlarmData >&
      hmsalarmdata() const;

  // string boxSn = 6;
  void clear_boxsn();
  static const int kBoxSnFieldNumber = 6;
  const ::std::string& boxsn() const;
  void set_boxsn(const ::std::string& value);
  #if LANG_CXX11
  void set_boxsn(::std::string&& value);
  #endif
  void set_boxsn(const char* value);
  void set_boxsn(const char* value, size_t size);
  ::std::string* mutable_boxsn();
  ::std::string* release_boxsn();
  void set_allocated_boxsn(::std::string* boxsn);

  // .FlightControllerState flightControllerState = 1;
  bool has_flightcontrollerstate() const;
  void clear_flightcontrollerstate();
  static const int kFlightControllerStateFieldNumber = 1;
  private:
  const ::FlightControllerState& _internal_flightcontrollerstate() const;
  public:
  const ::FlightControllerState& flightcontrollerstate() const;
  ::FlightControllerState* release_flightcontrollerstate();
  ::FlightControllerState* mutable_flightcontrollerstate();
  void set_allocated_flightcontrollerstate(::FlightControllerState* flightcontrollerstate);

  // .BatteryState batteryState = 2;
  bool has_batterystate() const;
  void clear_batterystate();
  static const int kBatteryStateFieldNumber = 2;
  private:
  const ::BatteryState& _internal_batterystate() const;
  public:
  const ::BatteryState& batterystate() const;
  ::BatteryState* release_batterystate();
  ::BatteryState* mutable_batterystate();
  void set_allocated_batterystate(::BatteryState* batterystate);

  // .PtzState ptzState = 3;
  bool has_ptzstate() const;
  void clear_ptzstate();
  static const int kPtzStateFieldNumber = 3;
  private:
  const ::PtzState& _internal_ptzstate() const;
  public:
  const ::PtzState& ptzstate() const;
  ::PtzState* release_ptzstate();
  ::PtzState* mutable_ptzstate();
  void set_allocated_ptzstate(::PtzState* ptzstate);

  // .CameraState cameraState = 4;
  bool has_camerastate() const;
  void clear_camerastate();
  static const int kCameraStateFieldNumber = 4;
  private:
  const ::CameraState& _internal_camerastate() const;
  public:
  const ::CameraState& camerastate() const;
  ::CameraState* release_camerastate();
  ::CameraState* mutable_camerastate();
  void set_allocated_camerastate(::CameraState* camerastate);

  // .MissionState missionState = 5;
  bool has_missionstate() const;
  void clear_missionstate();
  static const int kMissionStateFieldNumber = 5;
  private:
  const ::MissionState& _internal_missionstate() const;
  public:
  const ::MissionState& missionstate() const;
  ::MissionState* release_missionstate();
  ::MissionState* mutable_missionstate();
  void set_allocated_missionstate(::MissionState* missionstate);

  // .AvoidanceData avoidanceData = 7;
  bool has_avoidancedata() const;
  void clear_avoidancedata();
  static const int kAvoidanceDataFieldNumber = 7;
  private:
  const ::AvoidanceData& _internal_avoidancedata() const;
  public:
  const ::AvoidanceData& avoidancedata() const;
  ::AvoidanceData* release_avoidancedata();
  ::AvoidanceData* mutable_avoidancedata();
  void set_allocated_avoidancedata(::AvoidanceData* avoidancedata);

  // uint64 timestamp = 9;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 9;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:UavState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::HmsAlarmData > hmsalarmdata_;
  ::google::protobuf::internal::ArenaStringPtr boxsn_;
  ::FlightControllerState* flightcontrollerstate_;
  ::BatteryState* batterystate_;
  ::PtzState* ptzstate_;
  ::CameraState* camerastate_;
  ::MissionState* missionstate_;
  ::AvoidanceData* avoidancedata_;
  ::google::protobuf::uint64 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_TelemetryDataBuf_2dnew_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FlightControllerState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FlightControllerState) */ {
 public:
  FlightControllerState();
  virtual ~FlightControllerState();

  FlightControllerState(const FlightControllerState& from);

  inline FlightControllerState& operator=(const FlightControllerState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FlightControllerState(FlightControllerState&& from) noexcept
    : FlightControllerState() {
    *this = ::std::move(from);
  }

  inline FlightControllerState& operator=(FlightControllerState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FlightControllerState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlightControllerState* internal_default_instance() {
    return reinterpret_cast<const FlightControllerState*>(
               &_FlightControllerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(FlightControllerState* other);
  friend void swap(FlightControllerState& a, FlightControllerState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FlightControllerState* New() const final {
    return CreateMaybeMessage<FlightControllerState>(NULL);
  }

  FlightControllerState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FlightControllerState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FlightControllerState& from);
  void MergeFrom(const FlightControllerState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlightControllerState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string rcMode = 11;
  void clear_rcmode();
  static const int kRcModeFieldNumber = 11;
  const ::std::string& rcmode() const;
  void set_rcmode(const ::std::string& value);
  #if LANG_CXX11
  void set_rcmode(::std::string&& value);
  #endif
  void set_rcmode(const char* value);
  void set_rcmode(const char* value, size_t size);
  ::std::string* mutable_rcmode();
  ::std::string* release_rcmode();
  void set_allocated_rcmode(::std::string* rcmode);

  // .PointData startPoint = 5;
  bool has_startpoint() const;
  void clear_startpoint();
  static const int kStartPointFieldNumber = 5;
  private:
  const ::PointData& _internal_startpoint() const;
  public:
  const ::PointData& startpoint() const;
  ::PointData* release_startpoint();
  ::PointData* mutable_startpoint();
  void set_allocated_startpoint(::PointData* startpoint);

  // .PointData homePoint = 6;
  bool has_homepoint() const;
  void clear_homepoint();
  static const int kHomePointFieldNumber = 6;
  private:
  const ::PointData& _internal_homepoint() const;
  public:
  const ::PointData& homepoint() const;
  ::PointData* release_homepoint();
  ::PointData* mutable_homepoint();
  void set_allocated_homepoint(::PointData* homepoint);

  // .PointData targetPoint = 15;
  bool has_targetpoint() const;
  void clear_targetpoint();
  static const int kTargetPointFieldNumber = 15;
  private:
  const ::PointData& _internal_targetpoint() const;
  public:
  const ::PointData& targetpoint() const;
  ::PointData* release_targetpoint();
  ::PointData* mutable_targetpoint();
  void set_allocated_targetpoint(::PointData* targetpoint);

  // uint32 satelliteCount = 1;
  void clear_satellitecount();
  static const int kSatelliteCountFieldNumber = 1;
  ::google::protobuf::uint32 satellitecount() const;
  void set_satellitecount(::google::protobuf::uint32 value);

  // uint32 gpsSignalLevel = 2;
  void clear_gpssignallevel();
  static const int kGpsSignalLevelFieldNumber = 2;
  ::google::protobuf::uint32 gpssignallevel() const;
  void set_gpssignallevel(::google::protobuf::uint32 value);

  // uint32 flightMode = 3;
  void clear_flightmode();
  static const int kFlightModeFieldNumber = 3;
  ::google::protobuf::uint32 flightmode() const;
  void set_flightmode(::google::protobuf::uint32 value);

  // uint32 flightStatus = 4;
  void clear_flightstatus();
  static const int kFlightStatusFieldNumber = 4;
  ::google::protobuf::uint32 flightstatus() const;
  void set_flightstatus(::google::protobuf::uint32 value);

  // int32 homeHeight = 7;
  void clear_homeheight();
  static const int kHomeHeightFieldNumber = 7;
  ::google::protobuf::int32 homeheight() const;
  void set_homeheight(::google::protobuf::int32 value);

  // uint32 safeLine = 8;
  void clear_safeline();
  static const int kSafeLineFieldNumber = 8;
  ::google::protobuf::uint32 safeline() const;
  void set_safeline(::google::protobuf::uint32 value);

  // uint32 deviceStatus = 9;
  void clear_devicestatus();
  static const int kDeviceStatusFieldNumber = 9;
  ::google::protobuf::uint32 devicestatus() const;
  void set_devicestatus(::google::protobuf::uint32 value);

  // uint32 uwbNodeCount = 10;
  void clear_uwbnodecount();
  static const int kUwbNodeCountFieldNumber = 10;
  ::google::protobuf::uint32 uwbnodecount() const;
  void set_uwbnodecount(::google::protobuf::uint32 value);

  // uint32 isEmergencyBrakeing = 12;
  void clear_isemergencybrakeing();
  static const int kIsEmergencyBrakeingFieldNumber = 12;
  ::google::protobuf::uint32 isemergencybrakeing() const;
  void set_isemergencybrakeing(::google::protobuf::uint32 value);

  // uint32 outFlyAreaFlag = 13;
  void clear_outflyareaflag();
  static const int kOutFlyAreaFlagFieldNumber = 13;
  ::google::protobuf::uint32 outflyareaflag() const;
  void set_outflyareaflag(::google::protobuf::uint32 value);

  // uint32 inNoFlyAreaFlag = 14;
  void clear_innoflyareaflag();
  static const int kInNoFlyAreaFlagFieldNumber = 14;
  ::google::protobuf::uint32 innoflyareaflag() const;
  void set_innoflyareaflag(::google::protobuf::uint32 value);

  // uint32 batteryGohome = 16;
  void clear_batterygohome();
  static const int kBatteryGohomeFieldNumber = 16;
  ::google::protobuf::uint32 batterygohome() const;
  void set_batterygohome(::google::protobuf::uint32 value);

  // uint32 autoLowGohome = 17;
  void clear_autolowgohome();
  static const int kAutoLowGohomeFieldNumber = 17;
  ::google::protobuf::uint32 autolowgohome() const;
  void set_autolowgohome(::google::protobuf::uint32 value);

  // uint32 rcConnected = 18;
  void clear_rcconnected();
  static const int kRcConnectedFieldNumber = 18;
  ::google::protobuf::uint32 rcconnected() const;
  void set_rcconnected(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:FlightControllerState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rcmode_;
  ::PointData* startpoint_;
  ::PointData* homepoint_;
  ::PointData* targetpoint_;
  ::google::protobuf::uint32 satellitecount_;
  ::google::protobuf::uint32 gpssignallevel_;
  ::google::protobuf::uint32 flightmode_;
  ::google::protobuf::uint32 flightstatus_;
  ::google::protobuf::int32 homeheight_;
  ::google::protobuf::uint32 safeline_;
  ::google::protobuf::uint32 devicestatus_;
  ::google::protobuf::uint32 uwbnodecount_;
  ::google::protobuf::uint32 isemergencybrakeing_;
  ::google::protobuf::uint32 outflyareaflag_;
  ::google::protobuf::uint32 innoflyareaflag_;
  ::google::protobuf::uint32 batterygohome_;
  ::google::protobuf::uint32 autolowgohome_;
  ::google::protobuf::uint32 rcconnected_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_TelemetryDataBuf_2dnew_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BatteryState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BatteryState) */ {
 public:
  BatteryState();
  virtual ~BatteryState();

  BatteryState(const BatteryState& from);

  inline BatteryState& operator=(const BatteryState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatteryState(BatteryState&& from) noexcept
    : BatteryState() {
    *this = ::std::move(from);
  }

  inline BatteryState& operator=(BatteryState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BatteryState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatteryState* internal_default_instance() {
    return reinterpret_cast<const BatteryState*>(
               &_BatteryState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(BatteryState* other);
  friend void swap(BatteryState& a, BatteryState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatteryState* New() const final {
    return CreateMaybeMessage<BatteryState>(NULL);
  }

  BatteryState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BatteryState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BatteryState& from);
  void MergeFrom(const BatteryState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatteryState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string batteryPower = 2;
  void clear_batterypower();
  static const int kBatteryPowerFieldNumber = 2;
  const ::std::string& batterypower() const;
  void set_batterypower(const ::std::string& value);
  #if LANG_CXX11
  void set_batterypower(::std::string&& value);
  #endif
  void set_batterypower(const char* value);
  void set_batterypower(const char* value, size_t size);
  ::std::string* mutable_batterypower();
  ::std::string* release_batterypower();
  void set_allocated_batterypower(::std::string* batterypower);

  // string batteryVoltage = 3;
  void clear_batteryvoltage();
  static const int kBatteryVoltageFieldNumber = 3;
  const ::std::string& batteryvoltage() const;
  void set_batteryvoltage(const ::std::string& value);
  #if LANG_CXX11
  void set_batteryvoltage(::std::string&& value);
  #endif
  void set_batteryvoltage(const char* value);
  void set_batteryvoltage(const char* value, size_t size);
  ::std::string* mutable_batteryvoltage();
  ::std::string* release_batteryvoltage();
  void set_allocated_batteryvoltage(::std::string* batteryvoltage);

  // .BatteryStateInfo firstBatteryInfo = 4;
  bool has_firstbatteryinfo() const;
  void clear_firstbatteryinfo();
  static const int kFirstBatteryInfoFieldNumber = 4;
  private:
  const ::BatteryStateInfo& _internal_firstbatteryinfo() const;
  public:
  const ::BatteryStateInfo& firstbatteryinfo() const;
  ::BatteryStateInfo* release_firstbatteryinfo();
  ::BatteryStateInfo* mutable_firstbatteryinfo();
  void set_allocated_firstbatteryinfo(::BatteryStateInfo* firstbatteryinfo);

  // .BatteryStateInfo secondBatteryInfo = 5;
  bool has_secondbatteryinfo() const;
  void clear_secondbatteryinfo();
  static const int kSecondBatteryInfoFieldNumber = 5;
  private:
  const ::BatteryStateInfo& _internal_secondbatteryinfo() const;
  public:
  const ::BatteryStateInfo& secondbatteryinfo() const;
  ::BatteryStateInfo* release_secondbatteryinfo();
  ::BatteryStateInfo* mutable_secondbatteryinfo();
  void set_allocated_secondbatteryinfo(::BatteryStateInfo* secondbatteryinfo);

  // uint32 batteryNum = 1;
  void clear_batterynum();
  static const int kBatteryNumFieldNumber = 1;
  ::google::protobuf::uint32 batterynum() const;
  void set_batterynum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:BatteryState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr batterypower_;
  ::google::protobuf::internal::ArenaStringPtr batteryvoltage_;
  ::BatteryStateInfo* firstbatteryinfo_;
  ::BatteryStateInfo* secondbatteryinfo_;
  ::google::protobuf::uint32 batterynum_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_TelemetryDataBuf_2dnew_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BatteryStateInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BatteryStateInfo) */ {
 public:
  BatteryStateInfo();
  virtual ~BatteryStateInfo();

  BatteryStateInfo(const BatteryStateInfo& from);

  inline BatteryStateInfo& operator=(const BatteryStateInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatteryStateInfo(BatteryStateInfo&& from) noexcept
    : BatteryStateInfo() {
    *this = ::std::move(from);
  }

  inline BatteryStateInfo& operator=(BatteryStateInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BatteryStateInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatteryStateInfo* internal_default_instance() {
    return reinterpret_cast<const BatteryStateInfo*>(
               &_BatteryStateInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(BatteryStateInfo* other);
  friend void swap(BatteryStateInfo& a, BatteryStateInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatteryStateInfo* New() const final {
    return CreateMaybeMessage<BatteryStateInfo>(NULL);
  }

  BatteryStateInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BatteryStateInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BatteryStateInfo& from);
  void MergeFrom(const BatteryStateInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatteryStateInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 isBatteryEmbed = 1;
  void clear_isbatteryembed();
  static const int kIsBatteryEmbedFieldNumber = 1;
  ::google::protobuf::uint32 isbatteryembed() const;
  void set_isbatteryembed(::google::protobuf::uint32 value);

  // uint32 batteryCapacityPercent = 2;
  void clear_batterycapacitypercent();
  static const int kBatteryCapacityPercentFieldNumber = 2;
  ::google::protobuf::uint32 batterycapacitypercent() const;
  void set_batterycapacitypercent(::google::protobuf::uint32 value);

  // int32 currentVoltage = 3;
  void clear_currentvoltage();
  static const int kCurrentVoltageFieldNumber = 3;
  ::google::protobuf::int32 currentvoltage() const;
  void set_currentvoltage(::google::protobuf::int32 value);

  // int32 currentElectric = 4;
  void clear_currentelectric();
  static const int kCurrentElectricFieldNumber = 4;
  ::google::protobuf::int32 currentelectric() const;
  void set_currentelectric(::google::protobuf::int32 value);

  // uint32 fullCapacity = 5;
  void clear_fullcapacity();
  static const int kFullCapacityFieldNumber = 5;
  ::google::protobuf::uint32 fullcapacity() const;
  void set_fullcapacity(::google::protobuf::uint32 value);

  // uint32 remainedCapacity = 6;
  void clear_remainedcapacity();
  static const int kRemainedCapacityFieldNumber = 6;
  ::google::protobuf::uint32 remainedcapacity() const;
  void set_remainedcapacity(::google::protobuf::uint32 value);

  // float batteryTemperature = 7;
  void clear_batterytemperature();
  static const int kBatteryTemperatureFieldNumber = 7;
  float batterytemperature() const;
  void set_batterytemperature(float value);

  // uint32 cellCount = 8;
  void clear_cellcount();
  static const int kCellCountFieldNumber = 8;
  ::google::protobuf::uint32 cellcount() const;
  void set_cellcount(::google::protobuf::uint32 value);

  // uint32 batSOHState = 9;
  void clear_batsohstate();
  static const int kBatSOHStateFieldNumber = 9;
  ::google::protobuf::uint32 batsohstate() const;
  void set_batsohstate(::google::protobuf::uint32 value);

  // uint32 sop = 10;
  void clear_sop();
  static const int kSopFieldNumber = 10;
  ::google::protobuf::uint32 sop() const;
  void set_sop(::google::protobuf::uint32 value);

  // uint32 heatState = 11;
  void clear_heatstate();
  static const int kHeatStateFieldNumber = 11;
  ::google::protobuf::uint32 heatstate() const;
  void set_heatstate(::google::protobuf::uint32 value);

  // uint32 socState = 12;
  void clear_socstate();
  static const int kSocStateFieldNumber = 12;
  ::google::protobuf::uint32 socstate() const;
  void set_socstate(::google::protobuf::uint32 value);

  // uint32 selfCheckError = 13;
  void clear_selfcheckerror();
  static const int kSelfCheckErrorFieldNumber = 13;
  ::google::protobuf::uint32 selfcheckerror() const;
  void set_selfcheckerror(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:BatteryStateInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 isbatteryembed_;
  ::google::protobuf::uint32 batterycapacitypercent_;
  ::google::protobuf::int32 currentvoltage_;
  ::google::protobuf::int32 currentelectric_;
  ::google::protobuf::uint32 fullcapacity_;
  ::google::protobuf::uint32 remainedcapacity_;
  float batterytemperature_;
  ::google::protobuf::uint32 cellcount_;
  ::google::protobuf::uint32 batsohstate_;
  ::google::protobuf::uint32 sop_;
  ::google::protobuf::uint32 heatstate_;
  ::google::protobuf::uint32 socstate_;
  ::google::protobuf::uint32 selfcheckerror_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_TelemetryDataBuf_2dnew_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PtzState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PtzState) */ {
 public:
  PtzState();
  virtual ~PtzState();

  PtzState(const PtzState& from);

  inline PtzState& operator=(const PtzState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PtzState(PtzState&& from) noexcept
    : PtzState() {
    *this = ::std::move(from);
  }

  inline PtzState& operator=(PtzState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PtzState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PtzState* internal_default_instance() {
    return reinterpret_cast<const PtzState*>(
               &_PtzState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(PtzState* other);
  friend void swap(PtzState& a, PtzState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PtzState* New() const final {
    return CreateMaybeMessage<PtzState>(NULL);
  }

  PtzState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PtzState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PtzState& from);
  void MergeFrom(const PtzState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PtzState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float pitch = 1;
  void clear_pitch();
  static const int kPitchFieldNumber = 1;
  float pitch() const;
  void set_pitch(float value);

  // float roll = 2;
  void clear_roll();
  static const int kRollFieldNumber = 2;
  float roll() const;
  void set_roll(float value);

  // float yaw = 3;
  void clear_yaw();
  static const int kYawFieldNumber = 3;
  float yaw() const;
  void set_yaw(float value);

  // uint32 gimbalMode = 4;
  void clear_gimbalmode();
  static const int kGimbalModeFieldNumber = 4;
  ::google::protobuf::uint32 gimbalmode() const;
  void set_gimbalmode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PtzState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float pitch_;
  float roll_;
  float yaw_;
  ::google::protobuf::uint32 gimbalmode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_TelemetryDataBuf_2dnew_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CameraState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CameraState) */ {
 public:
  CameraState();
  virtual ~CameraState();

  CameraState(const CameraState& from);

  inline CameraState& operator=(const CameraState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraState(CameraState&& from) noexcept
    : CameraState() {
    *this = ::std::move(from);
  }

  inline CameraState& operator=(CameraState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraState* internal_default_instance() {
    return reinterpret_cast<const CameraState*>(
               &_CameraState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(CameraState* other);
  friend void swap(CameraState& a, CameraState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraState* New() const final {
    return CreateMaybeMessage<CameraState>(NULL);
  }

  CameraState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CameraState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CameraState& from);
  void MergeFrom(const CameraState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 mode = 1;
  void clear_mode();
  static const int kModeFieldNumber = 1;
  ::google::protobuf::uint32 mode() const;
  void set_mode(::google::protobuf::uint32 value);

  // uint32 isRecording = 2;
  void clear_isrecording();
  static const int kIsRecordingFieldNumber = 2;
  ::google::protobuf::uint32 isrecording() const;
  void set_isrecording(::google::protobuf::uint32 value);

  // uint32 recordDuration = 3;
  void clear_recordduration();
  static const int kRecordDurationFieldNumber = 3;
  ::google::protobuf::uint32 recordduration() const;
  void set_recordduration(::google::protobuf::uint32 value);

  // uint32 source = 4;
  void clear_source();
  static const int kSourceFieldNumber = 4;
  ::google::protobuf::uint32 source() const;
  void set_source(::google::protobuf::uint32 value);

  // uint32 camera = 5;
  void clear_camera();
  static const int kCameraFieldNumber = 5;
  ::google::protobuf::uint32 camera() const;
  void set_camera(::google::protobuf::uint32 value);

  // float zoomfactor = 6;
  void clear_zoomfactor();
  static const int kZoomfactorFieldNumber = 6;
  float zoomfactor() const;
  void set_zoomfactor(float value);

  // uint32 width = 7;
  void clear_width();
  static const int kWidthFieldNumber = 7;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 height = 8;
  void clear_height();
  static const int kHeightFieldNumber = 8;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // uint32 frameRate = 9;
  void clear_framerate();
  static const int kFrameRateFieldNumber = 9;
  ::google::protobuf::uint32 framerate() const;
  void set_framerate(::google::protobuf::uint32 value);

  // uint32 bitstream = 10;
  void clear_bitstream();
  static const int kBitstreamFieldNumber = 10;
  ::google::protobuf::uint32 bitstream() const;
  void set_bitstream(::google::protobuf::uint32 value);

  // uint32 pointThermometrying = 11;
  void clear_pointthermometrying();
  static const int kPointThermometryingFieldNumber = 11;
  ::google::protobuf::uint32 pointthermometrying() const;
  void set_pointthermometrying(::google::protobuf::uint32 value);

  // uint32 areaThermometrying = 12;
  void clear_areathermometrying();
  static const int kAreaThermometryingFieldNumber = 12;
  ::google::protobuf::uint32 areathermometrying() const;
  void set_areathermometrying(::google::protobuf::uint32 value);

  // uint32 laserRanging = 13;
  void clear_laserranging();
  static const int kLaserRangingFieldNumber = 13;
  ::google::protobuf::uint32 laserranging() const;
  void set_laserranging(::google::protobuf::uint32 value);

  // float storePercent = 14;
  void clear_storepercent();
  static const int kStorePercentFieldNumber = 14;
  float storepercent() const;
  void set_storepercent(float value);

  // uint32 totalPhoto = 15;
  void clear_totalphoto();
  static const int kTotalPhotoFieldNumber = 15;
  ::google::protobuf::uint32 totalphoto() const;
  void set_totalphoto(::google::protobuf::uint32 value);

  // uint32 remainedPhoto = 16;
  void clear_remainedphoto();
  static const int kRemainedPhotoFieldNumber = 16;
  ::google::protobuf::uint32 remainedphoto() const;
  void set_remainedphoto(::google::protobuf::uint32 value);

  // uint32 sendPhotoOverFlag = 17;
  void clear_sendphotooverflag();
  static const int kSendPhotoOverFlagFieldNumber = 17;
  ::google::protobuf::uint32 sendphotooverflag() const;
  void set_sendphotooverflag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CameraState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 mode_;
  ::google::protobuf::uint32 isrecording_;
  ::google::protobuf::uint32 recordduration_;
  ::google::protobuf::uint32 source_;
  ::google::protobuf::uint32 camera_;
  float zoomfactor_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 framerate_;
  ::google::protobuf::uint32 bitstream_;
  ::google::protobuf::uint32 pointthermometrying_;
  ::google::protobuf::uint32 areathermometrying_;
  ::google::protobuf::uint32 laserranging_;
  float storepercent_;
  ::google::protobuf::uint32 totalphoto_;
  ::google::protobuf::uint32 remainedphoto_;
  ::google::protobuf::uint32 sendphotooverflag_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_TelemetryDataBuf_2dnew_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MissionState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MissionState) */ {
 public:
  MissionState();
  virtual ~MissionState();

  MissionState(const MissionState& from);

  inline MissionState& operator=(const MissionState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MissionState(MissionState&& from) noexcept
    : MissionState() {
    *this = ::std::move(from);
  }

  inline MissionState& operator=(MissionState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MissionState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MissionState* internal_default_instance() {
    return reinterpret_cast<const MissionState*>(
               &_MissionState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(MissionState* other);
  friend void swap(MissionState& a, MissionState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MissionState* New() const final {
    return CreateMaybeMessage<MissionState>(NULL);
  }

  MissionState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MissionState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MissionState& from);
  void MergeFrom(const MissionState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissionState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .BreakPoint breakPoint = 16;
  bool has_breakpoint() const;
  void clear_breakpoint();
  static const int kBreakPointFieldNumber = 16;
  private:
  const ::BreakPoint& _internal_breakpoint() const;
  public:
  const ::BreakPoint& breakpoint() const;
  ::BreakPoint* release_breakpoint();
  ::BreakPoint* mutable_breakpoint();
  void set_allocated_breakpoint(::BreakPoint* breakpoint);

  // uint32 isPause = 1;
  void clear_ispause();
  static const int kIsPauseFieldNumber = 1;
  ::google::protobuf::uint32 ispause() const;
  void set_ispause(::google::protobuf::uint32 value);

  // uint32 targetWaypointIndex = 2;
  void clear_targetwaypointindex();
  static const int kTargetWaypointIndexFieldNumber = 2;
  ::google::protobuf::uint32 targetwaypointindex() const;
  void set_targetwaypointindex(::google::protobuf::uint32 value);

  // uint32 isWaypointFinished = 3;
  void clear_iswaypointfinished();
  static const int kIsWaypointFinishedFieldNumber = 3;
  ::google::protobuf::uint32 iswaypointfinished() const;
  void set_iswaypointfinished(::google::protobuf::uint32 value);

  // uint32 pushVideo = 4;
  void clear_pushvideo();
  static const int kPushVideoFieldNumber = 4;
  ::google::protobuf::uint32 pushvideo() const;
  void set_pushvideo(::google::protobuf::uint32 value);

  // uint32 lock4g = 5;
  void clear_lock4g();
  static const int kLock4GFieldNumber = 5;
  ::google::protobuf::uint32 lock4g() const;
  void set_lock4g(::google::protobuf::uint32 value);

  // uint32 boxModel = 6;
  void clear_boxmodel();
  static const int kBoxModelFieldNumber = 6;
  ::google::protobuf::uint32 boxmodel() const;
  void set_boxmodel(::google::protobuf::uint32 value);

  // uint32 mapPlay = 7;
  void clear_mapplay();
  static const int kMapPlayFieldNumber = 7;
  ::google::protobuf::uint32 mapplay() const;
  void set_mapplay(::google::protobuf::uint32 value);

  // uint32 loseAction = 8;
  void clear_loseaction();
  static const int kLoseActionFieldNumber = 8;
  ::google::protobuf::uint32 loseaction() const;
  void set_loseaction(::google::protobuf::uint32 value);

  // uint32 isPointControl = 9;
  void clear_ispointcontrol();
  static const int kIsPointControlFieldNumber = 9;
  ::google::protobuf::uint32 ispointcontrol() const;
  void set_ispointcontrol(::google::protobuf::uint32 value);

  // uint32 isUwbLanding = 10;
  void clear_isuwblanding();
  static const int kIsUwbLandingFieldNumber = 10;
  ::google::protobuf::uint32 isuwblanding() const;
  void set_isuwblanding(::google::protobuf::uint32 value);

  // uint32 isPushVideoing = 11;
  void clear_ispushvideoing();
  static const int kIsPushVideoingFieldNumber = 11;
  ::google::protobuf::uint32 ispushvideoing() const;
  void set_ispushvideoing(::google::protobuf::uint32 value);

  // uint32 isDLanding = 12;
  void clear_isdlanding();
  static const int kIsDLandingFieldNumber = 12;
  ::google::protobuf::uint32 isdlanding() const;
  void set_isdlanding(::google::protobuf::uint32 value);

  // uint32 perceptionFlag = 13;
  void clear_perceptionflag();
  static const int kPerceptionFlagFieldNumber = 13;
  ::google::protobuf::uint32 perceptionflag() const;
  void set_perceptionflag(::google::protobuf::uint32 value);

  // uint32 isPositionControl = 14;
  void clear_ispositioncontrol();
  static const int kIsPositionControlFieldNumber = 14;
  ::google::protobuf::uint32 ispositioncontrol() const;
  void set_ispositioncontrol(::google::protobuf::uint32 value);

  // uint32 sendImgRtp = 15;
  void clear_sendimgrtp();
  static const int kSendImgRtpFieldNumber = 15;
  ::google::protobuf::uint32 sendimgrtp() const;
  void set_sendimgrtp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MissionState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::BreakPoint* breakpoint_;
  ::google::protobuf::uint32 ispause_;
  ::google::protobuf::uint32 targetwaypointindex_;
  ::google::protobuf::uint32 iswaypointfinished_;
  ::google::protobuf::uint32 pushvideo_;
  ::google::protobuf::uint32 lock4g_;
  ::google::protobuf::uint32 boxmodel_;
  ::google::protobuf::uint32 mapplay_;
  ::google::protobuf::uint32 loseaction_;
  ::google::protobuf::uint32 ispointcontrol_;
  ::google::protobuf::uint32 isuwblanding_;
  ::google::protobuf::uint32 ispushvideoing_;
  ::google::protobuf::uint32 isdlanding_;
  ::google::protobuf::uint32 perceptionflag_;
  ::google::protobuf::uint32 ispositioncontrol_;
  ::google::protobuf::uint32 sendimgrtp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_TelemetryDataBuf_2dnew_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BreakPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BreakPoint) */ {
 public:
  BreakPoint();
  virtual ~BreakPoint();

  BreakPoint(const BreakPoint& from);

  inline BreakPoint& operator=(const BreakPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BreakPoint(BreakPoint&& from) noexcept
    : BreakPoint() {
    *this = ::std::move(from);
  }

  inline BreakPoint& operator=(BreakPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BreakPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BreakPoint* internal_default_instance() {
    return reinterpret_cast<const BreakPoint*>(
               &_BreakPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(BreakPoint* other);
  friend void swap(BreakPoint& a, BreakPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BreakPoint* New() const final {
    return CreateMaybeMessage<BreakPoint>(NULL);
  }

  BreakPoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BreakPoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BreakPoint& from);
  void MergeFrom(const BreakPoint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BreakPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // uint32 point = 2;
  void clear_point();
  static const int kPointFieldNumber = 2;
  ::google::protobuf::uint32 point() const;
  void set_point(::google::protobuf::uint32 value);

  // double lng = 3;
  void clear_lng();
  static const int kLngFieldNumber = 3;
  double lng() const;
  void set_lng(double value);

  // double lat = 4;
  void clear_lat();
  static const int kLatFieldNumber = 4;
  double lat() const;
  void set_lat(double value);

  // uint64 taskId = 6;
  void clear_taskid();
  static const int kTaskIdFieldNumber = 6;
  ::google::protobuf::uint64 taskid() const;
  void set_taskid(::google::protobuf::uint64 value);

  // float height = 5;
  void clear_height();
  static const int kHeightFieldNumber = 5;
  float height() const;
  void set_height(float value);

  // @@protoc_insertion_point(class_scope:BreakPoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 point_;
  double lng_;
  double lat_;
  ::google::protobuf::uint64 taskid_;
  float height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_TelemetryDataBuf_2dnew_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AvoidanceData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AvoidanceData) */ {
 public:
  AvoidanceData();
  virtual ~AvoidanceData();

  AvoidanceData(const AvoidanceData& from);

  inline AvoidanceData& operator=(const AvoidanceData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AvoidanceData(AvoidanceData&& from) noexcept
    : AvoidanceData() {
    *this = ::std::move(from);
  }

  inline AvoidanceData& operator=(AvoidanceData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AvoidanceData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AvoidanceData* internal_default_instance() {
    return reinterpret_cast<const AvoidanceData*>(
               &_AvoidanceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(AvoidanceData* other);
  friend void swap(AvoidanceData& a, AvoidanceData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AvoidanceData* New() const final {
    return CreateMaybeMessage<AvoidanceData>(NULL);
  }

  AvoidanceData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AvoidanceData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AvoidanceData& from);
  void MergeFrom(const AvoidanceData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AvoidanceData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 downHealth = 1;
  void clear_downhealth();
  static const int kDownHealthFieldNumber = 1;
  ::google::protobuf::uint32 downhealth() const;
  void set_downhealth(::google::protobuf::uint32 value);

  // float down = 2;
  void clear_down();
  static const int kDownFieldNumber = 2;
  float down() const;
  void set_down(float value);

  // uint32 frontHealth = 3;
  void clear_fronthealth();
  static const int kFrontHealthFieldNumber = 3;
  ::google::protobuf::uint32 fronthealth() const;
  void set_fronthealth(::google::protobuf::uint32 value);

  // float front = 4;
  void clear_front();
  static const int kFrontFieldNumber = 4;
  float front() const;
  void set_front(float value);

  // uint32 rightHealth = 5;
  void clear_righthealth();
  static const int kRightHealthFieldNumber = 5;
  ::google::protobuf::uint32 righthealth() const;
  void set_righthealth(::google::protobuf::uint32 value);

  // float right = 6;
  void clear_right();
  static const int kRightFieldNumber = 6;
  float right() const;
  void set_right(float value);

  // uint32 backHealth = 7;
  void clear_backhealth();
  static const int kBackHealthFieldNumber = 7;
  ::google::protobuf::uint32 backhealth() const;
  void set_backhealth(::google::protobuf::uint32 value);

  // float back = 8;
  void clear_back();
  static const int kBackFieldNumber = 8;
  float back() const;
  void set_back(float value);

  // uint32 leftHealth = 9;
  void clear_lefthealth();
  static const int kLeftHealthFieldNumber = 9;
  ::google::protobuf::uint32 lefthealth() const;
  void set_lefthealth(::google::protobuf::uint32 value);

  // float left = 10;
  void clear_left();
  static const int kLeftFieldNumber = 10;
  float left() const;
  void set_left(float value);

  // uint32 upHealth = 11;
  void clear_uphealth();
  static const int kUpHealthFieldNumber = 11;
  ::google::protobuf::uint32 uphealth() const;
  void set_uphealth(::google::protobuf::uint32 value);

  // float up = 12;
  void clear_up();
  static const int kUpFieldNumber = 12;
  float up() const;
  void set_up(float value);

  // uint32 avoidanceEnableStatusDown = 13;
  void clear_avoidanceenablestatusdown();
  static const int kAvoidanceEnableStatusDownFieldNumber = 13;
  ::google::protobuf::uint32 avoidanceenablestatusdown() const;
  void set_avoidanceenablestatusdown(::google::protobuf::uint32 value);

  // uint32 avoidanceEnableStatusUp = 14;
  void clear_avoidanceenablestatusup();
  static const int kAvoidanceEnableStatusUpFieldNumber = 14;
  ::google::protobuf::uint32 avoidanceenablestatusup() const;
  void set_avoidanceenablestatusup(::google::protobuf::uint32 value);

  // uint32 avoidanceEnableStatusHorizontal = 15;
  void clear_avoidanceenablestatushorizontal();
  static const int kAvoidanceEnableStatusHorizontalFieldNumber = 15;
  ::google::protobuf::uint32 avoidanceenablestatushorizontal() const;
  void set_avoidanceenablestatushorizontal(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:AvoidanceData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 downhealth_;
  float down_;
  ::google::protobuf::uint32 fronthealth_;
  float front_;
  ::google::protobuf::uint32 righthealth_;
  float right_;
  ::google::protobuf::uint32 backhealth_;
  float back_;
  ::google::protobuf::uint32 lefthealth_;
  float left_;
  ::google::protobuf::uint32 uphealth_;
  float up_;
  ::google::protobuf::uint32 avoidanceenablestatusdown_;
  ::google::protobuf::uint32 avoidanceenablestatusup_;
  ::google::protobuf::uint32 avoidanceenablestatushorizontal_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_TelemetryDataBuf_2dnew_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HmsAlarmData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HmsAlarmData) */ {
 public:
  HmsAlarmData();
  virtual ~HmsAlarmData();

  HmsAlarmData(const HmsAlarmData& from);

  inline HmsAlarmData& operator=(const HmsAlarmData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HmsAlarmData(HmsAlarmData&& from) noexcept
    : HmsAlarmData() {
    *this = ::std::move(from);
  }

  inline HmsAlarmData& operator=(HmsAlarmData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HmsAlarmData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HmsAlarmData* internal_default_instance() {
    return reinterpret_cast<const HmsAlarmData*>(
               &_HmsAlarmData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(HmsAlarmData* other);
  friend void swap(HmsAlarmData& a, HmsAlarmData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HmsAlarmData* New() const final {
    return CreateMaybeMessage<HmsAlarmData>(NULL);
  }

  HmsAlarmData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HmsAlarmData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HmsAlarmData& from);
  void MergeFrom(const HmsAlarmData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HmsAlarmData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string alarmMssInfo = 3;
  void clear_alarmmssinfo();
  static const int kAlarmMssInfoFieldNumber = 3;
  const ::std::string& alarmmssinfo() const;
  void set_alarmmssinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_alarmmssinfo(::std::string&& value);
  #endif
  void set_alarmmssinfo(const char* value);
  void set_alarmmssinfo(const char* value, size_t size);
  ::std::string* mutable_alarmmssinfo();
  ::std::string* release_alarmmssinfo();
  void set_allocated_alarmmssinfo(::std::string* alarmmssinfo);

  // uint32 alarmId = 1;
  void clear_alarmid();
  static const int kAlarmIdFieldNumber = 1;
  ::google::protobuf::uint32 alarmid() const;
  void set_alarmid(::google::protobuf::uint32 value);

  // uint32 reportLevel = 2;
  void clear_reportlevel();
  static const int kReportLevelFieldNumber = 2;
  ::google::protobuf::uint32 reportlevel() const;
  void set_reportlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:HmsAlarmData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr alarmmssinfo_;
  ::google::protobuf::uint32 alarmid_;
  ::google::protobuf::uint32 reportlevel_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_TelemetryDataBuf_2dnew_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UavStateList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UavStateList) */ {
 public:
  UavStateList();
  virtual ~UavStateList();

  UavStateList(const UavStateList& from);

  inline UavStateList& operator=(const UavStateList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UavStateList(UavStateList&& from) noexcept
    : UavStateList() {
    *this = ::std::move(from);
  }

  inline UavStateList& operator=(UavStateList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UavStateList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UavStateList* internal_default_instance() {
    return reinterpret_cast<const UavStateList*>(
               &_UavStateList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(UavStateList* other);
  friend void swap(UavStateList& a, UavStateList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UavStateList* New() const final {
    return CreateMaybeMessage<UavStateList>(NULL);
  }

  UavStateList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UavStateList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UavStateList& from);
  void MergeFrom(const UavStateList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UavStateList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .UavState uavStates = 1;
  int uavstates_size() const;
  void clear_uavstates();
  static const int kUavStatesFieldNumber = 1;
  ::UavState* mutable_uavstates(int index);
  ::google::protobuf::RepeatedPtrField< ::UavState >*
      mutable_uavstates();
  const ::UavState& uavstates(int index) const;
  ::UavState* add_uavstates();
  const ::google::protobuf::RepeatedPtrField< ::UavState >&
      uavstates() const;

  // @@protoc_insertion_point(class_scope:UavStateList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::UavState > uavstates_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_TelemetryDataBuf_2dnew_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlanLineData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PlanLineData) */ {
 public:
  PlanLineData();
  virtual ~PlanLineData();

  PlanLineData(const PlanLineData& from);

  inline PlanLineData& operator=(const PlanLineData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlanLineData(PlanLineData&& from) noexcept
    : PlanLineData() {
    *this = ::std::move(from);
  }

  inline PlanLineData& operator=(PlanLineData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlanLineData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlanLineData* internal_default_instance() {
    return reinterpret_cast<const PlanLineData*>(
               &_PlanLineData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(PlanLineData* other);
  friend void swap(PlanLineData& a, PlanLineData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlanLineData* New() const final {
    return CreateMaybeMessage<PlanLineData>(NULL);
  }

  PlanLineData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlanLineData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlanLineData& from);
  void MergeFrom(const PlanLineData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanLineData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PointData points = 4;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 4;
  ::PointData* mutable_points(int index);
  ::google::protobuf::RepeatedPtrField< ::PointData >*
      mutable_points();
  const ::PointData& points(int index) const;
  ::PointData* add_points();
  const ::google::protobuf::RepeatedPtrField< ::PointData >&
      points() const;

  // repeated .PointData interests = 10;
  int interests_size() const;
  void clear_interests();
  static const int kInterestsFieldNumber = 10;
  ::PointData* mutable_interests(int index);
  ::google::protobuf::RepeatedPtrField< ::PointData >*
      mutable_interests();
  const ::PointData& interests(int index) const;
  ::PointData* add_interests();
  const ::google::protobuf::RepeatedPtrField< ::PointData >&
      interests() const;

  // .HangarPoint takePoint = 8;
  bool has_takepoint() const;
  void clear_takepoint();
  static const int kTakePointFieldNumber = 8;
  private:
  const ::HangarPoint& _internal_takepoint() const;
  public:
  const ::HangarPoint& takepoint() const;
  ::HangarPoint* release_takepoint();
  ::HangarPoint* mutable_takepoint();
  void set_allocated_takepoint(::HangarPoint* takepoint);

  // .HangarPoint landPoint = 9;
  bool has_landpoint() const;
  void clear_landpoint();
  static const int kLandPointFieldNumber = 9;
  private:
  const ::HangarPoint& _internal_landpoint() const;
  public:
  const ::HangarPoint& landpoint() const;
  ::HangarPoint* release_landpoint();
  ::HangarPoint* mutable_landpoint();
  void set_allocated_landpoint(::HangarPoint* landpoint);

  // .NormalModel normalModel = 11;
  bool has_normalmodel() const;
  void clear_normalmodel();
  static const int kNormalModelFieldNumber = 11;
  private:
  const ::NormalModel& _internal_normalmodel() const;
  public:
  const ::NormalModel& normalmodel() const;
  ::NormalModel* release_normalmodel();
  ::NormalModel* mutable_normalmodel();
  void set_allocated_normalmodel(::NormalModel* normalmodel);

  // .SurroundModel surroundModel = 12;
  bool has_surroundmodel() const;
  void clear_surroundmodel();
  static const int kSurroundModelFieldNumber = 12;
  private:
  const ::SurroundModel& _internal_surroundmodel() const;
  public:
  const ::SurroundModel& surroundmodel() const;
  ::SurroundModel* release_surroundmodel();
  ::SurroundModel* mutable_surroundmodel();
  void set_allocated_surroundmodel(::SurroundModel* surroundmodel);

  // .PointData takeOffPoint = 13;
  bool has_takeoffpoint() const;
  void clear_takeoffpoint();
  static const int kTakeOffPointFieldNumber = 13;
  private:
  const ::PointData& _internal_takeoffpoint() const;
  public:
  const ::PointData& takeoffpoint() const;
  ::PointData* release_takeoffpoint();
  ::PointData* mutable_takeoffpoint();
  void set_allocated_takeoffpoint(::PointData* takeoffpoint);

  // uint32 finishedAction = 1;
  void clear_finishedaction();
  static const int kFinishedActionFieldNumber = 1;
  ::google::protobuf::uint32 finishedaction() const;
  void set_finishedaction(::google::protobuf::uint32 value);

  // float maxSpeed = 2;
  void clear_maxspeed();
  static const int kMaxSpeedFieldNumber = 2;
  float maxspeed() const;
  void set_maxspeed(float value);

  // float autoSpeed = 3;
  void clear_autospeed();
  static const int kAutoSpeedFieldNumber = 3;
  float autospeed() const;
  void set_autospeed(float value);

  // uint32 loseAction = 5;
  void clear_loseaction();
  static const int kLoseActionFieldNumber = 5;
  ::google::protobuf::uint32 loseaction() const;
  void set_loseaction(::google::protobuf::uint32 value);

  // uint32 homeHeight = 6;
  void clear_homeheight();
  static const int kHomeHeightFieldNumber = 6;
  ::google::protobuf::uint32 homeheight() const;
  void set_homeheight(::google::protobuf::uint32 value);

  // uint32 isSaveEnergyMode = 7;
  void clear_issaveenergymode();
  static const int kIsSaveEnergyModeFieldNumber = 7;
  ::google::protobuf::uint32 issaveenergymode() const;
  void set_issaveenergymode(::google::protobuf::uint32 value);

  // uint32 securityHeight = 14;
  void clear_securityheight();
  static const int kSecurityHeightFieldNumber = 14;
  ::google::protobuf::uint32 securityheight() const;
  void set_securityheight(::google::protobuf::uint32 value);

  // uint32 templateId = 15;
  void clear_templateid();
  static const int kTemplateIdFieldNumber = 15;
  ::google::protobuf::uint32 templateid() const;
  void set_templateid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PlanLineData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::PointData > points_;
  ::google::protobuf::RepeatedPtrField< ::PointData > interests_;
  ::HangarPoint* takepoint_;
  ::HangarPoint* landpoint_;
  ::NormalModel* normalmodel_;
  ::SurroundModel* surroundmodel_;
  ::PointData* takeoffpoint_;
  ::google::protobuf::uint32 finishedaction_;
  float maxspeed_;
  float autospeed_;
  ::google::protobuf::uint32 loseaction_;
  ::google::protobuf::uint32 homeheight_;
  ::google::protobuf::uint32 issaveenergymode_;
  ::google::protobuf::uint32 securityheight_;
  ::google::protobuf::uint32 templateid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_TelemetryDataBuf_2dnew_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PointData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PointData) */ {
 public:
  PointData();
  virtual ~PointData();

  PointData(const PointData& from);

  inline PointData& operator=(const PointData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PointData(PointData&& from) noexcept
    : PointData() {
    *this = ::std::move(from);
  }

  inline PointData& operator=(PointData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PointData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointData* internal_default_instance() {
    return reinterpret_cast<const PointData*>(
               &_PointData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(PointData* other);
  friend void swap(PointData& a, PointData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PointData* New() const final {
    return CreateMaybeMessage<PointData>(NULL);
  }

  PointData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PointData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PointData& from);
  void MergeFrom(const PointData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PointAction actions = 5;
  int actions_size() const;
  void clear_actions();
  static const int kActionsFieldNumber = 5;
  ::PointAction* mutable_actions(int index);
  ::google::protobuf::RepeatedPtrField< ::PointAction >*
      mutable_actions();
  const ::PointAction& actions(int index) const;
  ::PointAction* add_actions();
  const ::google::protobuf::RepeatedPtrField< ::PointAction >&
      actions() const;

  // double lng = 1;
  void clear_lng();
  static const int kLngFieldNumber = 1;
  double lng() const;
  void set_lng(double value);

  // double lat = 2;
  void clear_lat();
  static const int kLatFieldNumber = 2;
  double lat() const;
  void set_lat(double value);

  // float height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  float height() const;
  void set_height(float value);

  // float speed = 4;
  void clear_speed();
  static const int kSpeedFieldNumber = 4;
  float speed() const;
  void set_speed(float value);

  // uint32 flightPathMode = 6;
  void clear_flightpathmode();
  static const int kFlightPathModeFieldNumber = 6;
  ::google::protobuf::uint32 flightpathmode() const;
  void set_flightpathmode(::google::protobuf::uint32 value);

  // float dampingDistance = 7;
  void clear_dampingdistance();
  static const int kDampingDistanceFieldNumber = 7;
  float dampingdistance() const;
  void set_dampingdistance(float value);

  // uint32 safeGohomeFlag = 8;
  void clear_safegohomeflag();
  static const int kSafeGohomeFlagFieldNumber = 8;
  ::google::protobuf::uint32 safegohomeflag() const;
  void set_safegohomeflag(::google::protobuf::uint32 value);

  // uint32 headingMode = 9;
  void clear_headingmode();
  static const int kHeadingModeFieldNumber = 9;
  ::google::protobuf::uint32 headingmode() const;
  void set_headingmode(::google::protobuf::uint32 value);

  // float heading = 10;
  void clear_heading();
  static const int kHeadingFieldNumber = 10;
  float heading() const;
  void set_heading(float value);

  // int32 interestIndex = 11;
  void clear_interestindex();
  static const int kInterestIndexFieldNumber = 11;
  ::google::protobuf::int32 interestindex() const;
  void set_interestindex(::google::protobuf::int32 value);

  // uint32 groupIndex = 12;
  void clear_groupindex();
  static const int kGroupIndexFieldNumber = 12;
  ::google::protobuf::uint32 groupindex() const;
  void set_groupindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PointData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::PointAction > actions_;
  double lng_;
  double lat_;
  float height_;
  float speed_;
  ::google::protobuf::uint32 flightpathmode_;
  float dampingdistance_;
  ::google::protobuf::uint32 safegohomeflag_;
  ::google::protobuf::uint32 headingmode_;
  float heading_;
  ::google::protobuf::int32 interestindex_;
  ::google::protobuf::uint32 groupindex_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_TelemetryDataBuf_2dnew_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PointAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PointAction) */ {
 public:
  PointAction();
  virtual ~PointAction();

  PointAction(const PointAction& from);

  inline PointAction& operator=(const PointAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PointAction(PointAction&& from) noexcept
    : PointAction() {
    *this = ::std::move(from);
  }

  inline PointAction& operator=(PointAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PointAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointAction* internal_default_instance() {
    return reinterpret_cast<const PointAction*>(
               &_PointAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(PointAction* other);
  friend void swap(PointAction& a, PointAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PointAction* New() const final {
    return CreateMaybeMessage<PointAction>(NULL);
  }

  PointAction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PointAction>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PointAction& from);
  void MergeFrom(const PointAction& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string speakInfo = 4;
  void clear_speakinfo();
  static const int kSpeakInfoFieldNumber = 4;
  const ::std::string& speakinfo() const;
  void set_speakinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_speakinfo(::std::string&& value);
  #endif
  void set_speakinfo(const char* value);
  void set_speakinfo(const char* value, size_t size);
  ::std::string* mutable_speakinfo();
  ::std::string* release_speakinfo();
  void set_allocated_speakinfo(::std::string* speakinfo);

  // uint32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // float param = 2;
  void clear_param();
  static const int kParamFieldNumber = 2;
  float param() const;
  void set_param(float value);

  // int32 waitTime = 3;
  void clear_waittime();
  static const int kWaitTimeFieldNumber = 3;
  ::google::protobuf::int32 waittime() const;
  void set_waittime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PointAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr speakinfo_;
  ::google::protobuf::uint32 type_;
  float param_;
  ::google::protobuf::int32 waittime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_TelemetryDataBuf_2dnew_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HangarPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HangarPoint) */ {
 public:
  HangarPoint();
  virtual ~HangarPoint();

  HangarPoint(const HangarPoint& from);

  inline HangarPoint& operator=(const HangarPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HangarPoint(HangarPoint&& from) noexcept
    : HangarPoint() {
    *this = ::std::move(from);
  }

  inline HangarPoint& operator=(HangarPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HangarPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HangarPoint* internal_default_instance() {
    return reinterpret_cast<const HangarPoint*>(
               &_HangarPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(HangarPoint* other);
  friend void swap(HangarPoint& a, HangarPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HangarPoint* New() const final {
    return CreateMaybeMessage<HangarPoint>(NULL);
  }

  HangarPoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HangarPoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HangarPoint& from);
  void MergeFrom(const HangarPoint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HangarPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string hangarId = 1;
  void clear_hangarid();
  static const int kHangarIdFieldNumber = 1;
  const ::std::string& hangarid() const;
  void set_hangarid(const ::std::string& value);
  #if LANG_CXX11
  void set_hangarid(::std::string&& value);
  #endif
  void set_hangarid(const char* value);
  void set_hangarid(const char* value, size_t size);
  ::std::string* mutable_hangarid();
  ::std::string* release_hangarid();
  void set_allocated_hangarid(::std::string* hangarid);

  // double hangarLng = 2;
  void clear_hangarlng();
  static const int kHangarLngFieldNumber = 2;
  double hangarlng() const;
  void set_hangarlng(double value);

  // double hangarLat = 3;
  void clear_hangarlat();
  static const int kHangarLatFieldNumber = 3;
  double hangarlat() const;
  void set_hangarlat(double value);

  // double alternateLng = 4;
  void clear_alternatelng();
  static const int kAlternateLngFieldNumber = 4;
  double alternatelng() const;
  void set_alternatelng(double value);

  // double alternateLat = 5;
  void clear_alternatelat();
  static const int kAlternateLatFieldNumber = 5;
  double alternatelat() const;
  void set_alternatelat(double value);

  // uint32 mediaUploadFlag = 6;
  void clear_mediauploadflag();
  static const int kMediaUploadFlagFieldNumber = 6;
  ::google::protobuf::uint32 mediauploadflag() const;
  void set_mediauploadflag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:HangarPoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hangarid_;
  double hangarlng_;
  double hangarlat_;
  double alternatelng_;
  double alternatelat_;
  ::google::protobuf::uint32 mediauploadflag_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_TelemetryDataBuf_2dnew_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NormalModel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NormalModel) */ {
 public:
  NormalModel();
  virtual ~NormalModel();

  NormalModel(const NormalModel& from);

  inline NormalModel& operator=(const NormalModel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NormalModel(NormalModel&& from) noexcept
    : NormalModel() {
    *this = ::std::move(from);
  }

  inline NormalModel& operator=(NormalModel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NormalModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NormalModel* internal_default_instance() {
    return reinterpret_cast<const NormalModel*>(
               &_NormalModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(NormalModel* other);
  friend void swap(NormalModel& a, NormalModel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NormalModel* New() const final {
    return CreateMaybeMessage<NormalModel>(NULL);
  }

  NormalModel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NormalModel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NormalModel& from);
  void MergeFrom(const NormalModel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NormalModel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PointData area = 1;
  int area_size() const;
  void clear_area();
  static const int kAreaFieldNumber = 1;
  ::PointData* mutable_area(int index);
  ::google::protobuf::RepeatedPtrField< ::PointData >*
      mutable_area();
  const ::PointData& area(int index) const;
  ::PointData* add_area();
  const ::google::protobuf::RepeatedPtrField< ::PointData >&
      area() const;

  // uint32 serviceId = 2;
  void clear_serviceid();
  static const int kServiceIdFieldNumber = 2;
  ::google::protobuf::uint32 serviceid() const;
  void set_serviceid(::google::protobuf::uint32 value);

  // uint32 cameraId = 3;
  void clear_cameraid();
  static const int kCameraIdFieldNumber = 3;
  ::google::protobuf::uint32 cameraid() const;
  void set_cameraid(::google::protobuf::uint32 value);

  // uint32 isModeling = 4;
  void clear_ismodeling();
  static const int kIsModelingFieldNumber = 4;
  ::google::protobuf::uint32 ismodeling() const;
  void set_ismodeling(::google::protobuf::uint32 value);

  // uint32 mode = 5;
  void clear_mode();
  static const int kModeFieldNumber = 5;
  ::google::protobuf::uint32 mode() const;
  void set_mode(::google::protobuf::uint32 value);

  // uint32 hOverlap = 6;
  void clear_hoverlap();
  static const int kHOverlapFieldNumber = 6;
  ::google::protobuf::uint32 hoverlap() const;
  void set_hoverlap(::google::protobuf::uint32 value);

  // uint32 vOverlap = 7;
  void clear_voverlap();
  static const int kVOverlapFieldNumber = 7;
  ::google::protobuf::uint32 voverlap() const;
  void set_voverlap(::google::protobuf::uint32 value);

  // uint32 mirror = 8;
  void clear_mirror();
  static const int kMirrorFieldNumber = 8;
  ::google::protobuf::uint32 mirror() const;
  void set_mirror(::google::protobuf::uint32 value);

  // uint32 direction = 9;
  void clear_direction();
  static const int kDirectionFieldNumber = 9;
  ::google::protobuf::uint32 direction() const;
  void set_direction(::google::protobuf::uint32 value);

  // uint32 flightPathMode = 10;
  void clear_flightpathmode();
  static const int kFlightPathModeFieldNumber = 10;
  ::google::protobuf::uint32 flightpathmode() const;
  void set_flightpathmode(::google::protobuf::uint32 value);

  // uint32 height = 11;
  void clear_height();
  static const int kHeightFieldNumber = 11;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // uint32 pitch = 12;
  void clear_pitch();
  static const int kPitchFieldNumber = 12;
  ::google::protobuf::uint32 pitch() const;
  void set_pitch(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NormalModel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::PointData > area_;
  ::google::protobuf::uint32 serviceid_;
  ::google::protobuf::uint32 cameraid_;
  ::google::protobuf::uint32 ismodeling_;
  ::google::protobuf::uint32 mode_;
  ::google::protobuf::uint32 hoverlap_;
  ::google::protobuf::uint32 voverlap_;
  ::google::protobuf::uint32 mirror_;
  ::google::protobuf::uint32 direction_;
  ::google::protobuf::uint32 flightpathmode_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 pitch_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_TelemetryDataBuf_2dnew_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SurroundModel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SurroundModel) */ {
 public:
  SurroundModel();
  virtual ~SurroundModel();

  SurroundModel(const SurroundModel& from);

  inline SurroundModel& operator=(const SurroundModel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SurroundModel(SurroundModel&& from) noexcept
    : SurroundModel() {
    *this = ::std::move(from);
  }

  inline SurroundModel& operator=(SurroundModel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SurroundModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SurroundModel* internal_default_instance() {
    return reinterpret_cast<const SurroundModel*>(
               &_SurroundModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(SurroundModel* other);
  friend void swap(SurroundModel& a, SurroundModel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SurroundModel* New() const final {
    return CreateMaybeMessage<SurroundModel>(NULL);
  }

  SurroundModel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SurroundModel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SurroundModel& from);
  void MergeFrom(const SurroundModel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SurroundModel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PointData area = 1;
  int area_size() const;
  void clear_area();
  static const int kAreaFieldNumber = 1;
  ::PointData* mutable_area(int index);
  ::google::protobuf::RepeatedPtrField< ::PointData >*
      mutable_area();
  const ::PointData& area(int index) const;
  ::PointData* add_area();
  const ::google::protobuf::RepeatedPtrField< ::PointData >&
      area() const;

  // repeated .PointData boundary = 6;
  int boundary_size() const;
  void clear_boundary();
  static const int kBoundaryFieldNumber = 6;
  ::PointData* mutable_boundary(int index);
  ::google::protobuf::RepeatedPtrField< ::PointData >*
      mutable_boundary();
  const ::PointData& boundary(int index) const;
  ::PointData* add_boundary();
  const ::google::protobuf::RepeatedPtrField< ::PointData >&
      boundary() const;

  // uint32 serviceId = 2;
  void clear_serviceid();
  static const int kServiceIdFieldNumber = 2;
  ::google::protobuf::uint32 serviceid() const;
  void set_serviceid(::google::protobuf::uint32 value);

  // uint32 cameraId = 3;
  void clear_cameraid();
  static const int kCameraIdFieldNumber = 3;
  ::google::protobuf::uint32 cameraid() const;
  void set_cameraid(::google::protobuf::uint32 value);

  // uint32 isModeling = 4;
  void clear_ismodeling();
  static const int kIsModelingFieldNumber = 4;
  ::google::protobuf::uint32 ismodeling() const;
  void set_ismodeling(::google::protobuf::uint32 value);

  // uint32 height = 5;
  void clear_height();
  static const int kHeightFieldNumber = 5;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // uint32 exposureCount = 7;
  void clear_exposurecount();
  static const int kExposureCountFieldNumber = 7;
  ::google::protobuf::uint32 exposurecount() const;
  void set_exposurecount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SurroundModel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::PointData > area_;
  ::google::protobuf::RepeatedPtrField< ::PointData > boundary_;
  ::google::protobuf::uint32 serviceid_;
  ::google::protobuf::uint32 cameraid_;
  ::google::protobuf::uint32 ismodeling_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 exposurecount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_TelemetryDataBuf_2dnew_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UavInitInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UavInitInfo) */ {
 public:
  UavInitInfo();
  virtual ~UavInitInfo();

  UavInitInfo(const UavInitInfo& from);

  inline UavInitInfo& operator=(const UavInitInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UavInitInfo(UavInitInfo&& from) noexcept
    : UavInitInfo() {
    *this = ::std::move(from);
  }

  inline UavInitInfo& operator=(UavInitInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UavInitInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UavInitInfo* internal_default_instance() {
    return reinterpret_cast<const UavInitInfo*>(
               &_UavInitInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(UavInitInfo* other);
  friend void swap(UavInitInfo& a, UavInitInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UavInitInfo* New() const final {
    return CreateMaybeMessage<UavInitInfo>(NULL);
  }

  UavInitInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UavInitInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UavInitInfo& from);
  void MergeFrom(const UavInitInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UavInitInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uavModel = 1;
  void clear_uavmodel();
  static const int kUavModelFieldNumber = 1;
  const ::std::string& uavmodel() const;
  void set_uavmodel(const ::std::string& value);
  #if LANG_CXX11
  void set_uavmodel(::std::string&& value);
  #endif
  void set_uavmodel(const char* value);
  void set_uavmodel(const char* value, size_t size);
  ::std::string* mutable_uavmodel();
  ::std::string* release_uavmodel();
  void set_allocated_uavmodel(::std::string* uavmodel);

  // string uavSn = 2;
  void clear_uavsn();
  static const int kUavSnFieldNumber = 2;
  const ::std::string& uavsn() const;
  void set_uavsn(const ::std::string& value);
  #if LANG_CXX11
  void set_uavsn(::std::string&& value);
  #endif
  void set_uavsn(const char* value);
  void set_uavsn(const char* value, size_t size);
  ::std::string* mutable_uavsn();
  ::std::string* release_uavsn();
  void set_allocated_uavsn(::std::string* uavsn);

  // string uavVersion = 3;
  void clear_uavversion();
  static const int kUavVersionFieldNumber = 3;
  const ::std::string& uavversion() const;
  void set_uavversion(const ::std::string& value);
  #if LANG_CXX11
  void set_uavversion(::std::string&& value);
  #endif
  void set_uavversion(const char* value);
  void set_uavversion(const char* value, size_t size);
  ::std::string* mutable_uavversion();
  ::std::string* release_uavversion();
  void set_allocated_uavversion(::std::string* uavversion);

  // string ptModel = 4;
  void clear_ptmodel();
  static const int kPtModelFieldNumber = 4;
  const ::std::string& ptmodel() const;
  void set_ptmodel(const ::std::string& value);
  #if LANG_CXX11
  void set_ptmodel(::std::string&& value);
  #endif
  void set_ptmodel(const char* value);
  void set_ptmodel(const char* value, size_t size);
  ::std::string* mutable_ptmodel();
  ::std::string* release_ptmodel();
  void set_allocated_ptmodel(::std::string* ptmodel);

  // string ptVersion = 5;
  void clear_ptversion();
  static const int kPtVersionFieldNumber = 5;
  const ::std::string& ptversion() const;
  void set_ptversion(const ::std::string& value);
  #if LANG_CXX11
  void set_ptversion(::std::string&& value);
  #endif
  void set_ptversion(const char* value);
  void set_ptversion(const char* value, size_t size);
  ::std::string* mutable_ptversion();
  ::std::string* release_ptversion();
  void set_allocated_ptversion(::std::string* ptversion);

  // string moduleVersion = 7;
  void clear_moduleversion();
  static const int kModuleVersionFieldNumber = 7;
  const ::std::string& moduleversion() const;
  void set_moduleversion(const ::std::string& value);
  #if LANG_CXX11
  void set_moduleversion(::std::string&& value);
  #endif
  void set_moduleversion(const char* value);
  void set_moduleversion(const char* value, size_t size);
  ::std::string* mutable_moduleversion();
  ::std::string* release_moduleversion();
  void set_allocated_moduleversion(::std::string* moduleversion);

  // uint32 ptPosition = 6;
  void clear_ptposition();
  static const int kPtPositionFieldNumber = 6;
  ::google::protobuf::uint32 ptposition() const;
  void set_ptposition(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:UavInitInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uavmodel_;
  ::google::protobuf::internal::ArenaStringPtr uavsn_;
  ::google::protobuf::internal::ArenaStringPtr uavversion_;
  ::google::protobuf::internal::ArenaStringPtr ptmodel_;
  ::google::protobuf::internal::ArenaStringPtr ptversion_;
  ::google::protobuf::internal::ArenaStringPtr moduleversion_;
  ::google::protobuf::uint32 ptposition_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_TelemetryDataBuf_2dnew_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PayloadState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PayloadState) */ {
 public:
  PayloadState();
  virtual ~PayloadState();

  PayloadState(const PayloadState& from);

  inline PayloadState& operator=(const PayloadState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PayloadState(PayloadState&& from) noexcept
    : PayloadState() {
    *this = ::std::move(from);
  }

  inline PayloadState& operator=(PayloadState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PayloadState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PayloadState* internal_default_instance() {
    return reinterpret_cast<const PayloadState*>(
               &_PayloadState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(PayloadState* other);
  friend void swap(PayloadState& a, PayloadState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PayloadState* New() const final {
    return CreateMaybeMessage<PayloadState>(NULL);
  }

  PayloadState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PayloadState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PayloadState& from);
  void MergeFrom(const PayloadState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PayloadState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string boxSn = 5;
  void clear_boxsn();
  static const int kBoxSnFieldNumber = 5;
  const ::std::string& boxsn() const;
  void set_boxsn(const ::std::string& value);
  #if LANG_CXX11
  void set_boxsn(::std::string&& value);
  #endif
  void set_boxsn(const char* value);
  void set_boxsn(const char* value, size_t size);
  ::std::string* mutable_boxsn();
  ::std::string* release_boxsn();
  void set_allocated_boxsn(::std::string* boxsn);

  // .StickState stickState = 1;
  bool has_stickstate() const;
  void clear_stickstate();
  static const int kStickStateFieldNumber = 1;
  private:
  const ::StickState& _internal_stickstate() const;
  public:
  const ::StickState& stickstate() const;
  ::StickState* release_stickstate();
  ::StickState* mutable_stickstate();
  void set_allocated_stickstate(::StickState* stickstate);

  // .ParachuteState parachuteState = 2;
  bool has_parachutestate() const;
  void clear_parachutestate();
  static const int kParachuteStateFieldNumber = 2;
  private:
  const ::ParachuteState& _internal_parachutestate() const;
  public:
  const ::ParachuteState& parachutestate() const;
  ::ParachuteState* release_parachutestate();
  ::ParachuteState* mutable_parachutestate();
  void set_allocated_parachutestate(::ParachuteState* parachutestate);

  // .SprayFireState sprayFireState = 3;
  bool has_sprayfirestate() const;
  void clear_sprayfirestate();
  static const int kSprayFireStateFieldNumber = 3;
  private:
  const ::SprayFireState& _internal_sprayfirestate() const;
  public:
  const ::SprayFireState& sprayfirestate() const;
  ::SprayFireState* release_sprayfirestate();
  ::SprayFireState* mutable_sprayfirestate();
  void set_allocated_sprayfirestate(::SprayFireState* sprayfirestate);

  // .AirAnalysis airAnalysis = 4;
  bool has_airanalysis() const;
  void clear_airanalysis();
  static const int kAirAnalysisFieldNumber = 4;
  private:
  const ::AirAnalysis& _internal_airanalysis() const;
  public:
  const ::AirAnalysis& airanalysis() const;
  ::AirAnalysis* release_airanalysis();
  ::AirAnalysis* mutable_airanalysis();
  void set_allocated_airanalysis(::AirAnalysis* airanalysis);

  // uint64 timestamp = 6;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:PayloadState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr boxsn_;
  ::StickState* stickstate_;
  ::ParachuteState* parachutestate_;
  ::SprayFireState* sprayfirestate_;
  ::AirAnalysis* airanalysis_;
  ::google::protobuf::uint64 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_TelemetryDataBuf_2dnew_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PayloadStateList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PayloadStateList) */ {
 public:
  PayloadStateList();
  virtual ~PayloadStateList();

  PayloadStateList(const PayloadStateList& from);

  inline PayloadStateList& operator=(const PayloadStateList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PayloadStateList(PayloadStateList&& from) noexcept
    : PayloadStateList() {
    *this = ::std::move(from);
  }

  inline PayloadStateList& operator=(PayloadStateList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PayloadStateList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PayloadStateList* internal_default_instance() {
    return reinterpret_cast<const PayloadStateList*>(
               &_PayloadStateList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(PayloadStateList* other);
  friend void swap(PayloadStateList& a, PayloadStateList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PayloadStateList* New() const final {
    return CreateMaybeMessage<PayloadStateList>(NULL);
  }

  PayloadStateList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PayloadStateList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PayloadStateList& from);
  void MergeFrom(const PayloadStateList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PayloadStateList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PayloadState payloadState = 1;
  int payloadstate_size() const;
  void clear_payloadstate();
  static const int kPayloadStateFieldNumber = 1;
  ::PayloadState* mutable_payloadstate(int index);
  ::google::protobuf::RepeatedPtrField< ::PayloadState >*
      mutable_payloadstate();
  const ::PayloadState& payloadstate(int index) const;
  ::PayloadState* add_payloadstate();
  const ::google::protobuf::RepeatedPtrField< ::PayloadState >&
      payloadstate() const;

  // @@protoc_insertion_point(class_scope:PayloadStateList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::PayloadState > payloadstate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_TelemetryDataBuf_2dnew_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StickState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StickState) */ {
 public:
  StickState();
  virtual ~StickState();

  StickState(const StickState& from);

  inline StickState& operator=(const StickState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StickState(StickState&& from) noexcept
    : StickState() {
    *this = ::std::move(from);
  }

  inline StickState& operator=(StickState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StickState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StickState* internal_default_instance() {
    return reinterpret_cast<const StickState*>(
               &_StickState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(StickState* other);
  friend void swap(StickState& a, StickState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StickState* New() const final {
    return CreateMaybeMessage<StickState>(NULL);
  }

  StickState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StickState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StickState& from);
  void MergeFrom(const StickState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StickState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string tags = 8;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 8;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tags(int index, ::std::string&& value);
  #endif
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_tags(::std::string&& value);
  #endif
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // string stickId = 3;
  void clear_stickid();
  static const int kStickIdFieldNumber = 3;
  const ::std::string& stickid() const;
  void set_stickid(const ::std::string& value);
  #if LANG_CXX11
  void set_stickid(::std::string&& value);
  #endif
  void set_stickid(const char* value);
  void set_stickid(const char* value, size_t size);
  ::std::string* mutable_stickid();
  ::std::string* release_stickid();
  void set_allocated_stickid(::std::string* stickid);

  // string modelSn = 6;
  void clear_modelsn();
  static const int kModelSnFieldNumber = 6;
  const ::std::string& modelsn() const;
  void set_modelsn(const ::std::string& value);
  #if LANG_CXX11
  void set_modelsn(::std::string&& value);
  #endif
  void set_modelsn(const char* value);
  void set_modelsn(const char* value, size_t size);
  ::std::string* mutable_modelsn();
  ::std::string* release_modelsn();
  void set_allocated_modelsn(::std::string* modelsn);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 position = 2;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  ::google::protobuf::uint32 position() const;
  void set_position(::google::protobuf::uint32 value);

  // uint32 openAiFlag = 4;
  void clear_openaiflag();
  static const int kOpenAiFlagFieldNumber = 4;
  ::google::protobuf::uint32 openaiflag() const;
  void set_openaiflag(::google::protobuf::uint32 value);

  // uint32 openAiPhotoReport = 5;
  void clear_openaiphotoreport();
  static const int kOpenAiPhotoReportFieldNumber = 5;
  ::google::protobuf::uint32 openaiphotoreport() const;
  void set_openaiphotoreport(::google::protobuf::uint32 value);

  // float prob = 7;
  void clear_prob();
  static const int kProbFieldNumber = 7;
  float prob() const;
  void set_prob(float value);

  // @@protoc_insertion_point(class_scope:StickState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::google::protobuf::internal::ArenaStringPtr stickid_;
  ::google::protobuf::internal::ArenaStringPtr modelsn_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 position_;
  ::google::protobuf::uint32 openaiflag_;
  ::google::protobuf::uint32 openaiphotoreport_;
  float prob_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_TelemetryDataBuf_2dnew_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ParachuteState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ParachuteState) */ {
 public:
  ParachuteState();
  virtual ~ParachuteState();

  ParachuteState(const ParachuteState& from);

  inline ParachuteState& operator=(const ParachuteState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParachuteState(ParachuteState&& from) noexcept
    : ParachuteState() {
    *this = ::std::move(from);
  }

  inline ParachuteState& operator=(ParachuteState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ParachuteState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParachuteState* internal_default_instance() {
    return reinterpret_cast<const ParachuteState*>(
               &_ParachuteState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(ParachuteState* other);
  friend void swap(ParachuteState& a, ParachuteState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParachuteState* New() const final {
    return CreateMaybeMessage<ParachuteState>(NULL);
  }

  ParachuteState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ParachuteState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ParachuteState& from);
  void MergeFrom(const ParachuteState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParachuteState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 position = 2;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  ::google::protobuf::uint32 position() const;
  void set_position(::google::protobuf::uint32 value);

  // uint32 connectStatus = 3;
  void clear_connectstatus();
  static const int kConnectStatusFieldNumber = 3;
  ::google::protobuf::uint32 connectstatus() const;
  void set_connectstatus(::google::protobuf::uint32 value);

  // uint32 isOpenFlag = 4;
  void clear_isopenflag();
  static const int kIsOpenFlagFieldNumber = 4;
  ::google::protobuf::uint32 isopenflag() const;
  void set_isopenflag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ParachuteState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 position_;
  ::google::protobuf::uint32 connectstatus_;
  ::google::protobuf::uint32 isopenflag_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_TelemetryDataBuf_2dnew_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SprayFireState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SprayFireState) */ {
 public:
  SprayFireState();
  virtual ~SprayFireState();

  SprayFireState(const SprayFireState& from);

  inline SprayFireState& operator=(const SprayFireState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SprayFireState(SprayFireState&& from) noexcept
    : SprayFireState() {
    *this = ::std::move(from);
  }

  inline SprayFireState& operator=(SprayFireState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SprayFireState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SprayFireState* internal_default_instance() {
    return reinterpret_cast<const SprayFireState*>(
               &_SprayFireState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(SprayFireState* other);
  friend void swap(SprayFireState& a, SprayFireState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SprayFireState* New() const final {
    return CreateMaybeMessage<SprayFireState>(NULL);
  }

  SprayFireState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SprayFireState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SprayFireState& from);
  void MergeFrom(const SprayFireState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SprayFireState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 position = 2;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  ::google::protobuf::uint32 position() const;
  void set_position(::google::protobuf::uint32 value);

  // uint32 sprayState = 3;
  void clear_spraystate();
  static const int kSprayStateFieldNumber = 3;
  ::google::protobuf::uint32 spraystate() const;
  void set_spraystate(::google::protobuf::uint32 value);

  // uint32 fuelState = 4;
  void clear_fuelstate();
  static const int kFuelStateFieldNumber = 4;
  ::google::protobuf::uint32 fuelstate() const;
  void set_fuelstate(::google::protobuf::uint32 value);

  // uint32 ignitionState = 5;
  void clear_ignitionstate();
  static const int kIgnitionStateFieldNumber = 5;
  ::google::protobuf::uint32 ignitionstate() const;
  void set_ignitionstate(::google::protobuf::uint32 value);

  // uint32 lockState = 6;
  void clear_lockstate();
  static const int kLockStateFieldNumber = 6;
  ::google::protobuf::uint32 lockstate() const;
  void set_lockstate(::google::protobuf::uint32 value);

  // uint32 gear = 7;
  void clear_gear();
  static const int kGearFieldNumber = 7;
  ::google::protobuf::uint32 gear() const;
  void set_gear(::google::protobuf::uint32 value);

  // uint32 laserState = 8;
  void clear_laserstate();
  static const int kLaserStateFieldNumber = 8;
  ::google::protobuf::uint32 laserstate() const;
  void set_laserstate(::google::protobuf::uint32 value);

  // uint32 pressState = 9;
  void clear_pressstate();
  static const int kPressStateFieldNumber = 9;
  ::google::protobuf::uint32 pressstate() const;
  void set_pressstate(::google::protobuf::uint32 value);

  // uint32 fireTime = 10;
  void clear_firetime();
  static const int kFireTimeFieldNumber = 10;
  ::google::protobuf::uint32 firetime() const;
  void set_firetime(::google::protobuf::uint32 value);

  // uint32 extendRc = 11;
  void clear_extendrc();
  static const int kExtendRcFieldNumber = 11;
  ::google::protobuf::uint32 extendrc() const;
  void set_extendrc(::google::protobuf::uint32 value);

  // uint32 claspState = 12;
  void clear_claspstate();
  static const int kClaspStateFieldNumber = 12;
  ::google::protobuf::uint32 claspstate() const;
  void set_claspstate(::google::protobuf::uint32 value);

  // uint32 yaw = 13;
  void clear_yaw();
  static const int kYawFieldNumber = 13;
  ::google::protobuf::uint32 yaw() const;
  void set_yaw(::google::protobuf::uint32 value);

  // uint32 pitch = 14;
  void clear_pitch();
  static const int kPitchFieldNumber = 14;
  ::google::protobuf::uint32 pitch() const;
  void set_pitch(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SprayFireState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 position_;
  ::google::protobuf::uint32 spraystate_;
  ::google::protobuf::uint32 fuelstate_;
  ::google::protobuf::uint32 ignitionstate_;
  ::google::protobuf::uint32 lockstate_;
  ::google::protobuf::uint32 gear_;
  ::google::protobuf::uint32 laserstate_;
  ::google::protobuf::uint32 pressstate_;
  ::google::protobuf::uint32 firetime_;
  ::google::protobuf::uint32 extendrc_;
  ::google::protobuf::uint32 claspstate_;
  ::google::protobuf::uint32 yaw_;
  ::google::protobuf::uint32 pitch_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_TelemetryDataBuf_2dnew_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AirAnalysis : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AirAnalysis) */ {
 public:
  AirAnalysis();
  virtual ~AirAnalysis();

  AirAnalysis(const AirAnalysis& from);

  inline AirAnalysis& operator=(const AirAnalysis& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AirAnalysis(AirAnalysis&& from) noexcept
    : AirAnalysis() {
    *this = ::std::move(from);
  }

  inline AirAnalysis& operator=(AirAnalysis&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AirAnalysis& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AirAnalysis* internal_default_instance() {
    return reinterpret_cast<const AirAnalysis*>(
               &_AirAnalysis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(AirAnalysis* other);
  friend void swap(AirAnalysis& a, AirAnalysis& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AirAnalysis* New() const final {
    return CreateMaybeMessage<AirAnalysis>(NULL);
  }

  AirAnalysis* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AirAnalysis>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AirAnalysis& from);
  void MergeFrom(const AirAnalysis& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AirAnalysis* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sn = 1;
  void clear_sn();
  static const int kSnFieldNumber = 1;
  const ::std::string& sn() const;
  void set_sn(const ::std::string& value);
  #if LANG_CXX11
  void set_sn(::std::string&& value);
  #endif
  void set_sn(const char* value);
  void set_sn(const char* value, size_t size);
  ::std::string* mutable_sn();
  ::std::string* release_sn();
  void set_allocated_sn(::std::string* sn);

  // double lng = 3;
  void clear_lng();
  static const int kLngFieldNumber = 3;
  double lng() const;
  void set_lng(double value);

  // uint32 sat = 2;
  void clear_sat();
  static const int kSatFieldNumber = 2;
  ::google::protobuf::uint32 sat() const;
  void set_sat(::google::protobuf::uint32 value);

  // float height = 5;
  void clear_height();
  static const int kHeightFieldNumber = 5;
  float height() const;
  void set_height(float value);

  // double lat = 4;
  void clear_lat();
  static const int kLatFieldNumber = 4;
  double lat() const;
  void set_lat(double value);

  // float pm25 = 6;
  void clear_pm25();
  static const int kPm25FieldNumber = 6;
  float pm25() const;
  void set_pm25(float value);

  // float pm10 = 7;
  void clear_pm10();
  static const int kPm10FieldNumber = 7;
  float pm10() const;
  void set_pm10(float value);

  // float so2 = 8;
  void clear_so2();
  static const int kSo2FieldNumber = 8;
  float so2() const;
  void set_so2(float value);

  // float co = 9;
  void clear_co();
  static const int kCoFieldNumber = 9;
  float co() const;
  void set_co(float value);

  // float no2 = 10;
  void clear_no2();
  static const int kNo2FieldNumber = 10;
  float no2() const;
  void set_no2(float value);

  // float o3 = 11;
  void clear_o3();
  static const int kO3FieldNumber = 11;
  float o3() const;
  void set_o3(float value);

  // float temp = 12;
  void clear_temp();
  static const int kTempFieldNumber = 12;
  float temp() const;
  void set_temp(float value);

  // float hum = 13;
  void clear_hum();
  static const int kHumFieldNumber = 13;
  float hum() const;
  void set_hum(float value);

  // @@protoc_insertion_point(class_scope:AirAnalysis)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sn_;
  double lng_;
  ::google::protobuf::uint32 sat_;
  float height_;
  double lat_;
  float pm25_;
  float pm10_;
  float so2_;
  float co_;
  float no2_;
  float o3_;
  float temp_;
  float hum_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_TelemetryDataBuf_2dnew_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TelemetryData

// double lng = 1;
inline void TelemetryData::clear_lng() {
  lng_ = 0;
}
inline double TelemetryData::lng() const {
  // @@protoc_insertion_point(field_get:TelemetryData.lng)
  return lng_;
}
inline void TelemetryData::set_lng(double value) {
  
  lng_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.lng)
}

// double lat = 2;
inline void TelemetryData::clear_lat() {
  lat_ = 0;
}
inline double TelemetryData::lat() const {
  // @@protoc_insertion_point(field_get:TelemetryData.lat)
  return lat_;
}
inline void TelemetryData::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.lat)
}

// float altitude = 3;
inline void TelemetryData::clear_altitude() {
  altitude_ = 0;
}
inline float TelemetryData::altitude() const {
  // @@protoc_insertion_point(field_get:TelemetryData.altitude)
  return altitude_;
}
inline void TelemetryData::set_altitude(float value) {
  
  altitude_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.altitude)
}

// float ultrasonic = 4;
inline void TelemetryData::clear_ultrasonic() {
  ultrasonic_ = 0;
}
inline float TelemetryData::ultrasonic() const {
  // @@protoc_insertion_point(field_get:TelemetryData.ultrasonic)
  return ultrasonic_;
}
inline void TelemetryData::set_ultrasonic(float value) {
  
  ultrasonic_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.ultrasonic)
}

// float pitch = 5;
inline void TelemetryData::clear_pitch() {
  pitch_ = 0;
}
inline float TelemetryData::pitch() const {
  // @@protoc_insertion_point(field_get:TelemetryData.pitch)
  return pitch_;
}
inline void TelemetryData::set_pitch(float value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.pitch)
}

// float roll = 6;
inline void TelemetryData::clear_roll() {
  roll_ = 0;
}
inline float TelemetryData::roll() const {
  // @@protoc_insertion_point(field_get:TelemetryData.roll)
  return roll_;
}
inline void TelemetryData::set_roll(float value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.roll)
}

// float yaw = 7;
inline void TelemetryData::clear_yaw() {
  yaw_ = 0;
}
inline float TelemetryData::yaw() const {
  // @@protoc_insertion_point(field_get:TelemetryData.yaw)
  return yaw_;
}
inline void TelemetryData::set_yaw(float value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.yaw)
}

// float airspeed = 8;
inline void TelemetryData::clear_airspeed() {
  airspeed_ = 0;
}
inline float TelemetryData::airspeed() const {
  // @@protoc_insertion_point(field_get:TelemetryData.airspeed)
  return airspeed_;
}
inline void TelemetryData::set_airspeed(float value) {
  
  airspeed_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.airspeed)
}

// float velocity = 9;
inline void TelemetryData::clear_velocity() {
  velocity_ = 0;
}
inline float TelemetryData::velocity() const {
  // @@protoc_insertion_point(field_get:TelemetryData.velocity)
  return velocity_;
}
inline void TelemetryData::set_velocity(float value) {
  
  velocity_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.velocity)
}

// uint64 timestamp = 10;
inline void TelemetryData::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TelemetryData::timestamp() const {
  // @@protoc_insertion_point(field_get:TelemetryData.timestamp)
  return timestamp_;
}
inline void TelemetryData::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.timestamp)
}

// float ptpitch = 11;
inline void TelemetryData::clear_ptpitch() {
  ptpitch_ = 0;
}
inline float TelemetryData::ptpitch() const {
  // @@protoc_insertion_point(field_get:TelemetryData.ptpitch)
  return ptpitch_;
}
inline void TelemetryData::set_ptpitch(float value) {
  
  ptpitch_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.ptpitch)
}

// float ptroll = 12;
inline void TelemetryData::clear_ptroll() {
  ptroll_ = 0;
}
inline float TelemetryData::ptroll() const {
  // @@protoc_insertion_point(field_get:TelemetryData.ptroll)
  return ptroll_;
}
inline void TelemetryData::set_ptroll(float value) {
  
  ptroll_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.ptroll)
}

// float ptyaw = 13;
inline void TelemetryData::clear_ptyaw() {
  ptyaw_ = 0;
}
inline float TelemetryData::ptyaw() const {
  // @@protoc_insertion_point(field_get:TelemetryData.ptyaw)
  return ptyaw_;
}
inline void TelemetryData::set_ptyaw(float value) {
  
  ptyaw_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.ptyaw)
}

// float zoomfactor = 14;
inline void TelemetryData::clear_zoomfactor() {
  zoomfactor_ = 0;
}
inline float TelemetryData::zoomfactor() const {
  // @@protoc_insertion_point(field_get:TelemetryData.zoomfactor)
  return zoomfactor_;
}
inline void TelemetryData::set_zoomfactor(float value) {
  
  zoomfactor_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.zoomfactor)
}

// string boxSn = 15;
inline void TelemetryData::clear_boxsn() {
  boxsn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TelemetryData::boxsn() const {
  // @@protoc_insertion_point(field_get:TelemetryData.boxSn)
  return boxsn_.GetNoArena();
}
inline void TelemetryData::set_boxsn(const ::std::string& value) {
  
  boxsn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TelemetryData.boxSn)
}
#if LANG_CXX11
inline void TelemetryData::set_boxsn(::std::string&& value) {
  
  boxsn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TelemetryData.boxSn)
}
#endif
inline void TelemetryData::set_boxsn(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  boxsn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TelemetryData.boxSn)
}
inline void TelemetryData::set_boxsn(const char* value, size_t size) {
  
  boxsn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TelemetryData.boxSn)
}
inline ::std::string* TelemetryData::mutable_boxsn() {
  
  // @@protoc_insertion_point(field_mutable:TelemetryData.boxSn)
  return boxsn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TelemetryData::release_boxsn() {
  // @@protoc_insertion_point(field_release:TelemetryData.boxSn)
  
  return boxsn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TelemetryData::set_allocated_boxsn(::std::string* boxsn) {
  if (boxsn != NULL) {
    
  } else {
    
  }
  boxsn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), boxsn);
  // @@protoc_insertion_point(field_set_allocated:TelemetryData.boxSn)
}

// string batteryPower = 16;
inline void TelemetryData::clear_batterypower() {
  batterypower_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TelemetryData::batterypower() const {
  // @@protoc_insertion_point(field_get:TelemetryData.batteryPower)
  return batterypower_.GetNoArena();
}
inline void TelemetryData::set_batterypower(const ::std::string& value) {
  
  batterypower_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TelemetryData.batteryPower)
}
#if LANG_CXX11
inline void TelemetryData::set_batterypower(::std::string&& value) {
  
  batterypower_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TelemetryData.batteryPower)
}
#endif
inline void TelemetryData::set_batterypower(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  batterypower_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TelemetryData.batteryPower)
}
inline void TelemetryData::set_batterypower(const char* value, size_t size) {
  
  batterypower_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TelemetryData.batteryPower)
}
inline ::std::string* TelemetryData::mutable_batterypower() {
  
  // @@protoc_insertion_point(field_mutable:TelemetryData.batteryPower)
  return batterypower_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TelemetryData::release_batterypower() {
  // @@protoc_insertion_point(field_release:TelemetryData.batteryPower)
  
  return batterypower_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TelemetryData::set_allocated_batterypower(::std::string* batterypower) {
  if (batterypower != NULL) {
    
  } else {
    
  }
  batterypower_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), batterypower);
  // @@protoc_insertion_point(field_set_allocated:TelemetryData.batteryPower)
}

// uint32 satelliteCount = 17;
inline void TelemetryData::clear_satellitecount() {
  satellitecount_ = 0u;
}
inline ::google::protobuf::uint32 TelemetryData::satellitecount() const {
  // @@protoc_insertion_point(field_get:TelemetryData.satelliteCount)
  return satellitecount_;
}
inline void TelemetryData::set_satellitecount(::google::protobuf::uint32 value) {
  
  satellitecount_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.satelliteCount)
}

// uint64 taskId = 18;
inline void TelemetryData::clear_taskid() {
  taskid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TelemetryData::taskid() const {
  // @@protoc_insertion_point(field_get:TelemetryData.taskId)
  return taskid_;
}
inline void TelemetryData::set_taskid(::google::protobuf::uint64 value) {
  
  taskid_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.taskId)
}

// double rtkLng = 19;
inline void TelemetryData::clear_rtklng() {
  rtklng_ = 0;
}
inline double TelemetryData::rtklng() const {
  // @@protoc_insertion_point(field_get:TelemetryData.rtkLng)
  return rtklng_;
}
inline void TelemetryData::set_rtklng(double value) {
  
  rtklng_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.rtkLng)
}

// double rtkLat = 20;
inline void TelemetryData::clear_rtklat() {
  rtklat_ = 0;
}
inline double TelemetryData::rtklat() const {
  // @@protoc_insertion_point(field_get:TelemetryData.rtkLat)
  return rtklat_;
}
inline void TelemetryData::set_rtklat(double value) {
  
  rtklat_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.rtkLat)
}

// float rtkHFSL = 21;
inline void TelemetryData::clear_rtkhfsl() {
  rtkhfsl_ = 0;
}
inline float TelemetryData::rtkhfsl() const {
  // @@protoc_insertion_point(field_get:TelemetryData.rtkHFSL)
  return rtkhfsl_;
}
inline void TelemetryData::set_rtkhfsl(float value) {
  
  rtkhfsl_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.rtkHFSL)
}

// uint32 rtkPositionInfo = 22;
inline void TelemetryData::clear_rtkpositioninfo() {
  rtkpositioninfo_ = 0u;
}
inline ::google::protobuf::uint32 TelemetryData::rtkpositioninfo() const {
  // @@protoc_insertion_point(field_get:TelemetryData.rtkPositionInfo)
  return rtkpositioninfo_;
}
inline void TelemetryData::set_rtkpositioninfo(::google::protobuf::uint32 value) {
  
  rtkpositioninfo_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.rtkPositionInfo)
}

// uint32 airFlyTimes = 23;
inline void TelemetryData::clear_airflytimes() {
  airflytimes_ = 0u;
}
inline ::google::protobuf::uint32 TelemetryData::airflytimes() const {
  // @@protoc_insertion_point(field_get:TelemetryData.airFlyTimes)
  return airflytimes_;
}
inline void TelemetryData::set_airflytimes(::google::protobuf::uint32 value) {
  
  airflytimes_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.airFlyTimes)
}

// float airFlyDistance = 24;
inline void TelemetryData::clear_airflydistance() {
  airflydistance_ = 0;
}
inline float TelemetryData::airflydistance() const {
  // @@protoc_insertion_point(field_get:TelemetryData.airFlyDistance)
  return airflydistance_;
}
inline void TelemetryData::set_airflydistance(float value) {
  
  airflydistance_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.airFlyDistance)
}

// string uavSn = 25;
inline void TelemetryData::clear_uavsn() {
  uavsn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TelemetryData::uavsn() const {
  // @@protoc_insertion_point(field_get:TelemetryData.uavSn)
  return uavsn_.GetNoArena();
}
inline void TelemetryData::set_uavsn(const ::std::string& value) {
  
  uavsn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TelemetryData.uavSn)
}
#if LANG_CXX11
inline void TelemetryData::set_uavsn(::std::string&& value) {
  
  uavsn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TelemetryData.uavSn)
}
#endif
inline void TelemetryData::set_uavsn(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uavsn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TelemetryData.uavSn)
}
inline void TelemetryData::set_uavsn(const char* value, size_t size) {
  
  uavsn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TelemetryData.uavSn)
}
inline ::std::string* TelemetryData::mutable_uavsn() {
  
  // @@protoc_insertion_point(field_mutable:TelemetryData.uavSn)
  return uavsn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TelemetryData::release_uavsn() {
  // @@protoc_insertion_point(field_release:TelemetryData.uavSn)
  
  return uavsn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TelemetryData::set_allocated_uavsn(::std::string* uavsn) {
  if (uavsn != NULL) {
    
  } else {
    
  }
  uavsn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uavsn);
  // @@protoc_insertion_point(field_set_allocated:TelemetryData.uavSn)
}

// string uavModel = 26;
inline void TelemetryData::clear_uavmodel() {
  uavmodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TelemetryData::uavmodel() const {
  // @@protoc_insertion_point(field_get:TelemetryData.uavModel)
  return uavmodel_.GetNoArena();
}
inline void TelemetryData::set_uavmodel(const ::std::string& value) {
  
  uavmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TelemetryData.uavModel)
}
#if LANG_CXX11
inline void TelemetryData::set_uavmodel(::std::string&& value) {
  
  uavmodel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TelemetryData.uavModel)
}
#endif
inline void TelemetryData::set_uavmodel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uavmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TelemetryData.uavModel)
}
inline void TelemetryData::set_uavmodel(const char* value, size_t size) {
  
  uavmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TelemetryData.uavModel)
}
inline ::std::string* TelemetryData::mutable_uavmodel() {
  
  // @@protoc_insertion_point(field_mutable:TelemetryData.uavModel)
  return uavmodel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TelemetryData::release_uavmodel() {
  // @@protoc_insertion_point(field_release:TelemetryData.uavModel)
  
  return uavmodel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TelemetryData::set_allocated_uavmodel(::std::string* uavmodel) {
  if (uavmodel != NULL) {
    
  } else {
    
  }
  uavmodel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uavmodel);
  // @@protoc_insertion_point(field_set_allocated:TelemetryData.uavModel)
}

// float homeRange = 27;
inline void TelemetryData::clear_homerange() {
  homerange_ = 0;
}
inline float TelemetryData::homerange() const {
  // @@protoc_insertion_point(field_get:TelemetryData.homeRange)
  return homerange_;
}
inline void TelemetryData::set_homerange(float value) {
  
  homerange_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.homeRange)
}

// uint32 flightMode = 28;
inline void TelemetryData::clear_flightmode() {
  flightmode_ = 0u;
}
inline ::google::protobuf::uint32 TelemetryData::flightmode() const {
  // @@protoc_insertion_point(field_get:TelemetryData.flightMode)
  return flightmode_;
}
inline void TelemetryData::set_flightmode(::google::protobuf::uint32 value) {
  
  flightmode_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.flightMode)
}

// float targetDistance = 29;
inline void TelemetryData::clear_targetdistance() {
  targetdistance_ = 0;
}
inline float TelemetryData::targetdistance() const {
  // @@protoc_insertion_point(field_get:TelemetryData.targetDistance)
  return targetdistance_;
}
inline void TelemetryData::set_targetdistance(float value) {
  
  targetdistance_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.targetDistance)
}

// uint32 predictFlyTime = 30;
inline void TelemetryData::clear_predictflytime() {
  predictflytime_ = 0u;
}
inline ::google::protobuf::uint32 TelemetryData::predictflytime() const {
  // @@protoc_insertion_point(field_get:TelemetryData.predictFlyTime)
  return predictflytime_;
}
inline void TelemetryData::set_predictflytime(::google::protobuf::uint32 value) {
  
  predictflytime_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.predictFlyTime)
}

// float ultrasonicMax = 31;
inline void TelemetryData::clear_ultrasonicmax() {
  ultrasonicmax_ = 0;
}
inline float TelemetryData::ultrasonicmax() const {
  // @@protoc_insertion_point(field_get:TelemetryData.ultrasonicMax)
  return ultrasonicmax_;
}
inline void TelemetryData::set_ultrasonicmax(float value) {
  
  ultrasonicmax_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.ultrasonicMax)
}

// float ultrasonicMin = 32;
inline void TelemetryData::clear_ultrasonicmin() {
  ultrasonicmin_ = 0;
}
inline float TelemetryData::ultrasonicmin() const {
  // @@protoc_insertion_point(field_get:TelemetryData.ultrasonicMin)
  return ultrasonicmin_;
}
inline void TelemetryData::set_ultrasonicmin(float value) {
  
  ultrasonicmin_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.ultrasonicMin)
}

// float xVelocity = 33;
inline void TelemetryData::clear_xvelocity() {
  xvelocity_ = 0;
}
inline float TelemetryData::xvelocity() const {
  // @@protoc_insertion_point(field_get:TelemetryData.xVelocity)
  return xvelocity_;
}
inline void TelemetryData::set_xvelocity(float value) {
  
  xvelocity_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.xVelocity)
}

// float yVelocity = 34;
inline void TelemetryData::clear_yvelocity() {
  yvelocity_ = 0;
}
inline float TelemetryData::yvelocity() const {
  // @@protoc_insertion_point(field_get:TelemetryData.yVelocity)
  return yvelocity_;
}
inline void TelemetryData::set_yvelocity(float value) {
  
  yvelocity_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.yVelocity)
}

// float zVelocity = 35;
inline void TelemetryData::clear_zvelocity() {
  zvelocity_ = 0;
}
inline float TelemetryData::zvelocity() const {
  // @@protoc_insertion_point(field_get:TelemetryData.zVelocity)
  return zvelocity_;
}
inline void TelemetryData::set_zvelocity(float value) {
  
  zvelocity_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.zVelocity)
}

// string boxName = 36;
inline void TelemetryData::clear_boxname() {
  boxname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TelemetryData::boxname() const {
  // @@protoc_insertion_point(field_get:TelemetryData.boxName)
  return boxname_.GetNoArena();
}
inline void TelemetryData::set_boxname(const ::std::string& value) {
  
  boxname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TelemetryData.boxName)
}
#if LANG_CXX11
inline void TelemetryData::set_boxname(::std::string&& value) {
  
  boxname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TelemetryData.boxName)
}
#endif
inline void TelemetryData::set_boxname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  boxname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TelemetryData.boxName)
}
inline void TelemetryData::set_boxname(const char* value, size_t size) {
  
  boxname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TelemetryData.boxName)
}
inline ::std::string* TelemetryData::mutable_boxname() {
  
  // @@protoc_insertion_point(field_mutable:TelemetryData.boxName)
  return boxname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TelemetryData::release_boxname() {
  // @@protoc_insertion_point(field_release:TelemetryData.boxName)
  
  return boxname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TelemetryData::set_allocated_boxname(::std::string* boxname) {
  if (boxname != NULL) {
    
  } else {
    
  }
  boxname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), boxname);
  // @@protoc_insertion_point(field_set_allocated:TelemetryData.boxName)
}

// uint32 predictFlyTimes = 37;
inline void TelemetryData::clear_predictflytimes() {
  predictflytimes_ = 0u;
}
inline ::google::protobuf::uint32 TelemetryData::predictflytimes() const {
  // @@protoc_insertion_point(field_get:TelemetryData.predictFlyTimes)
  return predictflytimes_;
}
inline void TelemetryData::set_predictflytimes(::google::protobuf::uint32 value) {
  
  predictflytimes_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.predictFlyTimes)
}

// uint32 predictGohomeBattery = 38;
inline void TelemetryData::clear_predictgohomebattery() {
  predictgohomebattery_ = 0u;
}
inline ::google::protobuf::uint32 TelemetryData::predictgohomebattery() const {
  // @@protoc_insertion_point(field_get:TelemetryData.predictGohomeBattery)
  return predictgohomebattery_;
}
inline void TelemetryData::set_predictgohomebattery(::google::protobuf::uint32 value) {
  
  predictgohomebattery_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.predictGohomeBattery)
}

// -------------------------------------------------------------------

// TelemetryList

// repeated .TelemetryData telemetryList = 1;
inline int TelemetryList::telemetrylist_size() const {
  return telemetrylist_.size();
}
inline void TelemetryList::clear_telemetrylist() {
  telemetrylist_.Clear();
}
inline ::TelemetryData* TelemetryList::mutable_telemetrylist(int index) {
  // @@protoc_insertion_point(field_mutable:TelemetryList.telemetryList)
  return telemetrylist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TelemetryData >*
TelemetryList::mutable_telemetrylist() {
  // @@protoc_insertion_point(field_mutable_list:TelemetryList.telemetryList)
  return &telemetrylist_;
}
inline const ::TelemetryData& TelemetryList::telemetrylist(int index) const {
  // @@protoc_insertion_point(field_get:TelemetryList.telemetryList)
  return telemetrylist_.Get(index);
}
inline ::TelemetryData* TelemetryList::add_telemetrylist() {
  // @@protoc_insertion_point(field_add:TelemetryList.telemetryList)
  return telemetrylist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TelemetryData >&
TelemetryList::telemetrylist() const {
  // @@protoc_insertion_point(field_list:TelemetryList.telemetryList)
  return telemetrylist_;
}

// -------------------------------------------------------------------

// SignalInfo

// string mode = 1;
inline void SignalInfo::clear_mode() {
  mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignalInfo::mode() const {
  // @@protoc_insertion_point(field_get:SignalInfo.mode)
  return mode_.GetNoArena();
}
inline void SignalInfo::set_mode(const ::std::string& value) {
  
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignalInfo.mode)
}
#if LANG_CXX11
inline void SignalInfo::set_mode(::std::string&& value) {
  
  mode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignalInfo.mode)
}
#endif
inline void SignalInfo::set_mode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignalInfo.mode)
}
inline void SignalInfo::set_mode(const char* value, size_t size) {
  
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignalInfo.mode)
}
inline ::std::string* SignalInfo::mutable_mode() {
  
  // @@protoc_insertion_point(field_mutable:SignalInfo.mode)
  return mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignalInfo::release_mode() {
  // @@protoc_insertion_point(field_release:SignalInfo.mode)
  
  return mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignalInfo::set_allocated_mode(::std::string* mode) {
  if (mode != NULL) {
    
  } else {
    
  }
  mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mode);
  // @@protoc_insertion_point(field_set_allocated:SignalInfo.mode)
}

// string mcc = 2;
inline void SignalInfo::clear_mcc() {
  mcc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignalInfo::mcc() const {
  // @@protoc_insertion_point(field_get:SignalInfo.mcc)
  return mcc_.GetNoArena();
}
inline void SignalInfo::set_mcc(const ::std::string& value) {
  
  mcc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignalInfo.mcc)
}
#if LANG_CXX11
inline void SignalInfo::set_mcc(::std::string&& value) {
  
  mcc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignalInfo.mcc)
}
#endif
inline void SignalInfo::set_mcc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mcc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignalInfo.mcc)
}
inline void SignalInfo::set_mcc(const char* value, size_t size) {
  
  mcc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignalInfo.mcc)
}
inline ::std::string* SignalInfo::mutable_mcc() {
  
  // @@protoc_insertion_point(field_mutable:SignalInfo.mcc)
  return mcc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignalInfo::release_mcc() {
  // @@protoc_insertion_point(field_release:SignalInfo.mcc)
  
  return mcc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignalInfo::set_allocated_mcc(::std::string* mcc) {
  if (mcc != NULL) {
    
  } else {
    
  }
  mcc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mcc);
  // @@protoc_insertion_point(field_set_allocated:SignalInfo.mcc)
}

// string mnc = 3;
inline void SignalInfo::clear_mnc() {
  mnc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignalInfo::mnc() const {
  // @@protoc_insertion_point(field_get:SignalInfo.mnc)
  return mnc_.GetNoArena();
}
inline void SignalInfo::set_mnc(const ::std::string& value) {
  
  mnc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignalInfo.mnc)
}
#if LANG_CXX11
inline void SignalInfo::set_mnc(::std::string&& value) {
  
  mnc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignalInfo.mnc)
}
#endif
inline void SignalInfo::set_mnc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mnc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignalInfo.mnc)
}
inline void SignalInfo::set_mnc(const char* value, size_t size) {
  
  mnc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignalInfo.mnc)
}
inline ::std::string* SignalInfo::mutable_mnc() {
  
  // @@protoc_insertion_point(field_mutable:SignalInfo.mnc)
  return mnc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignalInfo::release_mnc() {
  // @@protoc_insertion_point(field_release:SignalInfo.mnc)
  
  return mnc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignalInfo::set_allocated_mnc(::std::string* mnc) {
  if (mnc != NULL) {
    
  } else {
    
  }
  mnc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mnc);
  // @@protoc_insertion_point(field_set_allocated:SignalInfo.mnc)
}

// string cellid = 4;
inline void SignalInfo::clear_cellid() {
  cellid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignalInfo::cellid() const {
  // @@protoc_insertion_point(field_get:SignalInfo.cellid)
  return cellid_.GetNoArena();
}
inline void SignalInfo::set_cellid(const ::std::string& value) {
  
  cellid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignalInfo.cellid)
}
#if LANG_CXX11
inline void SignalInfo::set_cellid(::std::string&& value) {
  
  cellid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignalInfo.cellid)
}
#endif
inline void SignalInfo::set_cellid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cellid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignalInfo.cellid)
}
inline void SignalInfo::set_cellid(const char* value, size_t size) {
  
  cellid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignalInfo.cellid)
}
inline ::std::string* SignalInfo::mutable_cellid() {
  
  // @@protoc_insertion_point(field_mutable:SignalInfo.cellid)
  return cellid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignalInfo::release_cellid() {
  // @@protoc_insertion_point(field_release:SignalInfo.cellid)
  
  return cellid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignalInfo::set_allocated_cellid(::std::string* cellid) {
  if (cellid != NULL) {
    
  } else {
    
  }
  cellid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cellid);
  // @@protoc_insertion_point(field_set_allocated:SignalInfo.cellid)
}

// string pcid = 5;
inline void SignalInfo::clear_pcid() {
  pcid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignalInfo::pcid() const {
  // @@protoc_insertion_point(field_get:SignalInfo.pcid)
  return pcid_.GetNoArena();
}
inline void SignalInfo::set_pcid(const ::std::string& value) {
  
  pcid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignalInfo.pcid)
}
#if LANG_CXX11
inline void SignalInfo::set_pcid(::std::string&& value) {
  
  pcid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignalInfo.pcid)
}
#endif
inline void SignalInfo::set_pcid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pcid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignalInfo.pcid)
}
inline void SignalInfo::set_pcid(const char* value, size_t size) {
  
  pcid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignalInfo.pcid)
}
inline ::std::string* SignalInfo::mutable_pcid() {
  
  // @@protoc_insertion_point(field_mutable:SignalInfo.pcid)
  return pcid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignalInfo::release_pcid() {
  // @@protoc_insertion_point(field_release:SignalInfo.pcid)
  
  return pcid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignalInfo::set_allocated_pcid(::std::string* pcid) {
  if (pcid != NULL) {
    
  } else {
    
  }
  pcid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pcid);
  // @@protoc_insertion_point(field_set_allocated:SignalInfo.pcid)
}

// string tac = 6;
inline void SignalInfo::clear_tac() {
  tac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignalInfo::tac() const {
  // @@protoc_insertion_point(field_get:SignalInfo.tac)
  return tac_.GetNoArena();
}
inline void SignalInfo::set_tac(const ::std::string& value) {
  
  tac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignalInfo.tac)
}
#if LANG_CXX11
inline void SignalInfo::set_tac(::std::string&& value) {
  
  tac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignalInfo.tac)
}
#endif
inline void SignalInfo::set_tac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignalInfo.tac)
}
inline void SignalInfo::set_tac(const char* value, size_t size) {
  
  tac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignalInfo.tac)
}
inline ::std::string* SignalInfo::mutable_tac() {
  
  // @@protoc_insertion_point(field_mutable:SignalInfo.tac)
  return tac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignalInfo::release_tac() {
  // @@protoc_insertion_point(field_release:SignalInfo.tac)
  
  return tac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignalInfo::set_allocated_tac(::std::string* tac) {
  if (tac != NULL) {
    
  } else {
    
  }
  tac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tac);
  // @@protoc_insertion_point(field_set_allocated:SignalInfo.tac)
}

// string arfcn = 7;
inline void SignalInfo::clear_arfcn() {
  arfcn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignalInfo::arfcn() const {
  // @@protoc_insertion_point(field_get:SignalInfo.arfcn)
  return arfcn_.GetNoArena();
}
inline void SignalInfo::set_arfcn(const ::std::string& value) {
  
  arfcn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignalInfo.arfcn)
}
#if LANG_CXX11
inline void SignalInfo::set_arfcn(::std::string&& value) {
  
  arfcn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignalInfo.arfcn)
}
#endif
inline void SignalInfo::set_arfcn(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  arfcn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignalInfo.arfcn)
}
inline void SignalInfo::set_arfcn(const char* value, size_t size) {
  
  arfcn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignalInfo.arfcn)
}
inline ::std::string* SignalInfo::mutable_arfcn() {
  
  // @@protoc_insertion_point(field_mutable:SignalInfo.arfcn)
  return arfcn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignalInfo::release_arfcn() {
  // @@protoc_insertion_point(field_release:SignalInfo.arfcn)
  
  return arfcn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignalInfo::set_allocated_arfcn(::std::string* arfcn) {
  if (arfcn != NULL) {
    
  } else {
    
  }
  arfcn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arfcn);
  // @@protoc_insertion_point(field_set_allocated:SignalInfo.arfcn)
}

// string band = 8;
inline void SignalInfo::clear_band() {
  band_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignalInfo::band() const {
  // @@protoc_insertion_point(field_get:SignalInfo.band)
  return band_.GetNoArena();
}
inline void SignalInfo::set_band(const ::std::string& value) {
  
  band_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignalInfo.band)
}
#if LANG_CXX11
inline void SignalInfo::set_band(::std::string&& value) {
  
  band_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignalInfo.band)
}
#endif
inline void SignalInfo::set_band(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  band_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignalInfo.band)
}
inline void SignalInfo::set_band(const char* value, size_t size) {
  
  band_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignalInfo.band)
}
inline ::std::string* SignalInfo::mutable_band() {
  
  // @@protoc_insertion_point(field_mutable:SignalInfo.band)
  return band_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignalInfo::release_band() {
  // @@protoc_insertion_point(field_release:SignalInfo.band)
  
  return band_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignalInfo::set_allocated_band(::std::string* band) {
  if (band != NULL) {
    
  } else {
    
  }
  band_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), band);
  // @@protoc_insertion_point(field_set_allocated:SignalInfo.band)
}

// string nr_dl_bandwidth = 9;
inline void SignalInfo::clear_nr_dl_bandwidth() {
  nr_dl_bandwidth_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignalInfo::nr_dl_bandwidth() const {
  // @@protoc_insertion_point(field_get:SignalInfo.nr_dl_bandwidth)
  return nr_dl_bandwidth_.GetNoArena();
}
inline void SignalInfo::set_nr_dl_bandwidth(const ::std::string& value) {
  
  nr_dl_bandwidth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignalInfo.nr_dl_bandwidth)
}
#if LANG_CXX11
inline void SignalInfo::set_nr_dl_bandwidth(::std::string&& value) {
  
  nr_dl_bandwidth_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignalInfo.nr_dl_bandwidth)
}
#endif
inline void SignalInfo::set_nr_dl_bandwidth(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nr_dl_bandwidth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignalInfo.nr_dl_bandwidth)
}
inline void SignalInfo::set_nr_dl_bandwidth(const char* value, size_t size) {
  
  nr_dl_bandwidth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignalInfo.nr_dl_bandwidth)
}
inline ::std::string* SignalInfo::mutable_nr_dl_bandwidth() {
  
  // @@protoc_insertion_point(field_mutable:SignalInfo.nr_dl_bandwidth)
  return nr_dl_bandwidth_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignalInfo::release_nr_dl_bandwidth() {
  // @@protoc_insertion_point(field_release:SignalInfo.nr_dl_bandwidth)
  
  return nr_dl_bandwidth_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignalInfo::set_allocated_nr_dl_bandwidth(::std::string* nr_dl_bandwidth) {
  if (nr_dl_bandwidth != NULL) {
    
  } else {
    
  }
  nr_dl_bandwidth_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nr_dl_bandwidth);
  // @@protoc_insertion_point(field_set_allocated:SignalInfo.nr_dl_bandwidth)
}

// string rsrp = 10;
inline void SignalInfo::clear_rsrp() {
  rsrp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignalInfo::rsrp() const {
  // @@protoc_insertion_point(field_get:SignalInfo.rsrp)
  return rsrp_.GetNoArena();
}
inline void SignalInfo::set_rsrp(const ::std::string& value) {
  
  rsrp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignalInfo.rsrp)
}
#if LANG_CXX11
inline void SignalInfo::set_rsrp(::std::string&& value) {
  
  rsrp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignalInfo.rsrp)
}
#endif
inline void SignalInfo::set_rsrp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rsrp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignalInfo.rsrp)
}
inline void SignalInfo::set_rsrp(const char* value, size_t size) {
  
  rsrp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignalInfo.rsrp)
}
inline ::std::string* SignalInfo::mutable_rsrp() {
  
  // @@protoc_insertion_point(field_mutable:SignalInfo.rsrp)
  return rsrp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignalInfo::release_rsrp() {
  // @@protoc_insertion_point(field_release:SignalInfo.rsrp)
  
  return rsrp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignalInfo::set_allocated_rsrp(::std::string* rsrp) {
  if (rsrp != NULL) {
    
  } else {
    
  }
  rsrp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rsrp);
  // @@protoc_insertion_point(field_set_allocated:SignalInfo.rsrp)
}

// string rsrq = 11;
inline void SignalInfo::clear_rsrq() {
  rsrq_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignalInfo::rsrq() const {
  // @@protoc_insertion_point(field_get:SignalInfo.rsrq)
  return rsrq_.GetNoArena();
}
inline void SignalInfo::set_rsrq(const ::std::string& value) {
  
  rsrq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignalInfo.rsrq)
}
#if LANG_CXX11
inline void SignalInfo::set_rsrq(::std::string&& value) {
  
  rsrq_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignalInfo.rsrq)
}
#endif
inline void SignalInfo::set_rsrq(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rsrq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignalInfo.rsrq)
}
inline void SignalInfo::set_rsrq(const char* value, size_t size) {
  
  rsrq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignalInfo.rsrq)
}
inline ::std::string* SignalInfo::mutable_rsrq() {
  
  // @@protoc_insertion_point(field_mutable:SignalInfo.rsrq)
  return rsrq_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignalInfo::release_rsrq() {
  // @@protoc_insertion_point(field_release:SignalInfo.rsrq)
  
  return rsrq_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignalInfo::set_allocated_rsrq(::std::string* rsrq) {
  if (rsrq != NULL) {
    
  } else {
    
  }
  rsrq_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rsrq);
  // @@protoc_insertion_point(field_set_allocated:SignalInfo.rsrq)
}

// string sinr = 12;
inline void SignalInfo::clear_sinr() {
  sinr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignalInfo::sinr() const {
  // @@protoc_insertion_point(field_get:SignalInfo.sinr)
  return sinr_.GetNoArena();
}
inline void SignalInfo::set_sinr(const ::std::string& value) {
  
  sinr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignalInfo.sinr)
}
#if LANG_CXX11
inline void SignalInfo::set_sinr(::std::string&& value) {
  
  sinr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignalInfo.sinr)
}
#endif
inline void SignalInfo::set_sinr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sinr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignalInfo.sinr)
}
inline void SignalInfo::set_sinr(const char* value, size_t size) {
  
  sinr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignalInfo.sinr)
}
inline ::std::string* SignalInfo::mutable_sinr() {
  
  // @@protoc_insertion_point(field_mutable:SignalInfo.sinr)
  return sinr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignalInfo::release_sinr() {
  // @@protoc_insertion_point(field_release:SignalInfo.sinr)
  
  return sinr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignalInfo::set_allocated_sinr(::std::string* sinr) {
  if (sinr != NULL) {
    
  } else {
    
  }
  sinr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sinr);
  // @@protoc_insertion_point(field_set_allocated:SignalInfo.sinr)
}

// string tx_power = 13;
inline void SignalInfo::clear_tx_power() {
  tx_power_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignalInfo::tx_power() const {
  // @@protoc_insertion_point(field_get:SignalInfo.tx_power)
  return tx_power_.GetNoArena();
}
inline void SignalInfo::set_tx_power(const ::std::string& value) {
  
  tx_power_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignalInfo.tx_power)
}
#if LANG_CXX11
inline void SignalInfo::set_tx_power(::std::string&& value) {
  
  tx_power_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignalInfo.tx_power)
}
#endif
inline void SignalInfo::set_tx_power(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tx_power_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignalInfo.tx_power)
}
inline void SignalInfo::set_tx_power(const char* value, size_t size) {
  
  tx_power_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignalInfo.tx_power)
}
inline ::std::string* SignalInfo::mutable_tx_power() {
  
  // @@protoc_insertion_point(field_mutable:SignalInfo.tx_power)
  return tx_power_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignalInfo::release_tx_power() {
  // @@protoc_insertion_point(field_release:SignalInfo.tx_power)
  
  return tx_power_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignalInfo::set_allocated_tx_power(::std::string* tx_power) {
  if (tx_power != NULL) {
    
  } else {
    
  }
  tx_power_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_power);
  // @@protoc_insertion_point(field_set_allocated:SignalInfo.tx_power)
}

// string srxlev = 14;
inline void SignalInfo::clear_srxlev() {
  srxlev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignalInfo::srxlev() const {
  // @@protoc_insertion_point(field_get:SignalInfo.srxlev)
  return srxlev_.GetNoArena();
}
inline void SignalInfo::set_srxlev(const ::std::string& value) {
  
  srxlev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignalInfo.srxlev)
}
#if LANG_CXX11
inline void SignalInfo::set_srxlev(::std::string&& value) {
  
  srxlev_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignalInfo.srxlev)
}
#endif
inline void SignalInfo::set_srxlev(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  srxlev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignalInfo.srxlev)
}
inline void SignalInfo::set_srxlev(const char* value, size_t size) {
  
  srxlev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignalInfo.srxlev)
}
inline ::std::string* SignalInfo::mutable_srxlev() {
  
  // @@protoc_insertion_point(field_mutable:SignalInfo.srxlev)
  return srxlev_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignalInfo::release_srxlev() {
  // @@protoc_insertion_point(field_release:SignalInfo.srxlev)
  
  return srxlev_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignalInfo::set_allocated_srxlev(::std::string* srxlev) {
  if (srxlev != NULL) {
    
  } else {
    
  }
  srxlev_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), srxlev);
  // @@protoc_insertion_point(field_set_allocated:SignalInfo.srxlev)
}

// string cqi = 15;
inline void SignalInfo::clear_cqi() {
  cqi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignalInfo::cqi() const {
  // @@protoc_insertion_point(field_get:SignalInfo.cqi)
  return cqi_.GetNoArena();
}
inline void SignalInfo::set_cqi(const ::std::string& value) {
  
  cqi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignalInfo.cqi)
}
#if LANG_CXX11
inline void SignalInfo::set_cqi(::std::string&& value) {
  
  cqi_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignalInfo.cqi)
}
#endif
inline void SignalInfo::set_cqi(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cqi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignalInfo.cqi)
}
inline void SignalInfo::set_cqi(const char* value, size_t size) {
  
  cqi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignalInfo.cqi)
}
inline ::std::string* SignalInfo::mutable_cqi() {
  
  // @@protoc_insertion_point(field_mutable:SignalInfo.cqi)
  return cqi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignalInfo::release_cqi() {
  // @@protoc_insertion_point(field_release:SignalInfo.cqi)
  
  return cqi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignalInfo::set_allocated_cqi(::std::string* cqi) {
  if (cqi != NULL) {
    
  } else {
    
  }
  cqi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cqi);
  // @@protoc_insertion_point(field_set_allocated:SignalInfo.cqi)
}

// string earfcn = 16;
inline void SignalInfo::clear_earfcn() {
  earfcn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignalInfo::earfcn() const {
  // @@protoc_insertion_point(field_get:SignalInfo.earfcn)
  return earfcn_.GetNoArena();
}
inline void SignalInfo::set_earfcn(const ::std::string& value) {
  
  earfcn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignalInfo.earfcn)
}
#if LANG_CXX11
inline void SignalInfo::set_earfcn(::std::string&& value) {
  
  earfcn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignalInfo.earfcn)
}
#endif
inline void SignalInfo::set_earfcn(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  earfcn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignalInfo.earfcn)
}
inline void SignalInfo::set_earfcn(const char* value, size_t size) {
  
  earfcn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignalInfo.earfcn)
}
inline ::std::string* SignalInfo::mutable_earfcn() {
  
  // @@protoc_insertion_point(field_mutable:SignalInfo.earfcn)
  return earfcn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignalInfo::release_earfcn() {
  // @@protoc_insertion_point(field_release:SignalInfo.earfcn)
  
  return earfcn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignalInfo::set_allocated_earfcn(::std::string* earfcn) {
  if (earfcn != NULL) {
    
  } else {
    
  }
  earfcn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), earfcn);
  // @@protoc_insertion_point(field_set_allocated:SignalInfo.earfcn)
}

// string freq_band_ind = 17;
inline void SignalInfo::clear_freq_band_ind() {
  freq_band_ind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignalInfo::freq_band_ind() const {
  // @@protoc_insertion_point(field_get:SignalInfo.freq_band_ind)
  return freq_band_ind_.GetNoArena();
}
inline void SignalInfo::set_freq_band_ind(const ::std::string& value) {
  
  freq_band_ind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignalInfo.freq_band_ind)
}
#if LANG_CXX11
inline void SignalInfo::set_freq_band_ind(::std::string&& value) {
  
  freq_band_ind_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignalInfo.freq_band_ind)
}
#endif
inline void SignalInfo::set_freq_band_ind(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  freq_band_ind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignalInfo.freq_band_ind)
}
inline void SignalInfo::set_freq_band_ind(const char* value, size_t size) {
  
  freq_band_ind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignalInfo.freq_band_ind)
}
inline ::std::string* SignalInfo::mutable_freq_band_ind() {
  
  // @@protoc_insertion_point(field_mutable:SignalInfo.freq_band_ind)
  return freq_band_ind_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignalInfo::release_freq_band_ind() {
  // @@protoc_insertion_point(field_release:SignalInfo.freq_band_ind)
  
  return freq_band_ind_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignalInfo::set_allocated_freq_band_ind(::std::string* freq_band_ind) {
  if (freq_band_ind != NULL) {
    
  } else {
    
  }
  freq_band_ind_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), freq_band_ind);
  // @@protoc_insertion_point(field_set_allocated:SignalInfo.freq_band_ind)
}

// string ul_bandwidth = 18;
inline void SignalInfo::clear_ul_bandwidth() {
  ul_bandwidth_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignalInfo::ul_bandwidth() const {
  // @@protoc_insertion_point(field_get:SignalInfo.ul_bandwidth)
  return ul_bandwidth_.GetNoArena();
}
inline void SignalInfo::set_ul_bandwidth(const ::std::string& value) {
  
  ul_bandwidth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignalInfo.ul_bandwidth)
}
#if LANG_CXX11
inline void SignalInfo::set_ul_bandwidth(::std::string&& value) {
  
  ul_bandwidth_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignalInfo.ul_bandwidth)
}
#endif
inline void SignalInfo::set_ul_bandwidth(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ul_bandwidth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignalInfo.ul_bandwidth)
}
inline void SignalInfo::set_ul_bandwidth(const char* value, size_t size) {
  
  ul_bandwidth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignalInfo.ul_bandwidth)
}
inline ::std::string* SignalInfo::mutable_ul_bandwidth() {
  
  // @@protoc_insertion_point(field_mutable:SignalInfo.ul_bandwidth)
  return ul_bandwidth_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignalInfo::release_ul_bandwidth() {
  // @@protoc_insertion_point(field_release:SignalInfo.ul_bandwidth)
  
  return ul_bandwidth_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignalInfo::set_allocated_ul_bandwidth(::std::string* ul_bandwidth) {
  if (ul_bandwidth != NULL) {
    
  } else {
    
  }
  ul_bandwidth_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ul_bandwidth);
  // @@protoc_insertion_point(field_set_allocated:SignalInfo.ul_bandwidth)
}

// string dl_bandwidth = 19;
inline void SignalInfo::clear_dl_bandwidth() {
  dl_bandwidth_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignalInfo::dl_bandwidth() const {
  // @@protoc_insertion_point(field_get:SignalInfo.dl_bandwidth)
  return dl_bandwidth_.GetNoArena();
}
inline void SignalInfo::set_dl_bandwidth(const ::std::string& value) {
  
  dl_bandwidth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignalInfo.dl_bandwidth)
}
#if LANG_CXX11
inline void SignalInfo::set_dl_bandwidth(::std::string&& value) {
  
  dl_bandwidth_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignalInfo.dl_bandwidth)
}
#endif
inline void SignalInfo::set_dl_bandwidth(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dl_bandwidth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignalInfo.dl_bandwidth)
}
inline void SignalInfo::set_dl_bandwidth(const char* value, size_t size) {
  
  dl_bandwidth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignalInfo.dl_bandwidth)
}
inline ::std::string* SignalInfo::mutable_dl_bandwidth() {
  
  // @@protoc_insertion_point(field_mutable:SignalInfo.dl_bandwidth)
  return dl_bandwidth_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignalInfo::release_dl_bandwidth() {
  // @@protoc_insertion_point(field_release:SignalInfo.dl_bandwidth)
  
  return dl_bandwidth_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignalInfo::set_allocated_dl_bandwidth(::std::string* dl_bandwidth) {
  if (dl_bandwidth != NULL) {
    
  } else {
    
  }
  dl_bandwidth_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dl_bandwidth);
  // @@protoc_insertion_point(field_set_allocated:SignalInfo.dl_bandwidth)
}

// string is_tdd = 20;
inline void SignalInfo::clear_is_tdd() {
  is_tdd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignalInfo::is_tdd() const {
  // @@protoc_insertion_point(field_get:SignalInfo.is_tdd)
  return is_tdd_.GetNoArena();
}
inline void SignalInfo::set_is_tdd(const ::std::string& value) {
  
  is_tdd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignalInfo.is_tdd)
}
#if LANG_CXX11
inline void SignalInfo::set_is_tdd(::std::string&& value) {
  
  is_tdd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignalInfo.is_tdd)
}
#endif
inline void SignalInfo::set_is_tdd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  is_tdd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignalInfo.is_tdd)
}
inline void SignalInfo::set_is_tdd(const char* value, size_t size) {
  
  is_tdd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignalInfo.is_tdd)
}
inline ::std::string* SignalInfo::mutable_is_tdd() {
  
  // @@protoc_insertion_point(field_mutable:SignalInfo.is_tdd)
  return is_tdd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignalInfo::release_is_tdd() {
  // @@protoc_insertion_point(field_release:SignalInfo.is_tdd)
  
  return is_tdd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignalInfo::set_allocated_is_tdd(::std::string* is_tdd) {
  if (is_tdd != NULL) {
    
  } else {
    
  }
  is_tdd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), is_tdd);
  // @@protoc_insertion_point(field_set_allocated:SignalInfo.is_tdd)
}

// string rssi = 21;
inline void SignalInfo::clear_rssi() {
  rssi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignalInfo::rssi() const {
  // @@protoc_insertion_point(field_get:SignalInfo.rssi)
  return rssi_.GetNoArena();
}
inline void SignalInfo::set_rssi(const ::std::string& value) {
  
  rssi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignalInfo.rssi)
}
#if LANG_CXX11
inline void SignalInfo::set_rssi(::std::string&& value) {
  
  rssi_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignalInfo.rssi)
}
#endif
inline void SignalInfo::set_rssi(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rssi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignalInfo.rssi)
}
inline void SignalInfo::set_rssi(const char* value, size_t size) {
  
  rssi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignalInfo.rssi)
}
inline ::std::string* SignalInfo::mutable_rssi() {
  
  // @@protoc_insertion_point(field_mutable:SignalInfo.rssi)
  return rssi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignalInfo::release_rssi() {
  // @@protoc_insertion_point(field_release:SignalInfo.rssi)
  
  return rssi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignalInfo::set_allocated_rssi(::std::string* rssi) {
  if (rssi != NULL) {
    
  } else {
    
  }
  rssi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rssi);
  // @@protoc_insertion_point(field_set_allocated:SignalInfo.rssi)
}

// string duplex_mode = 22;
inline void SignalInfo::clear_duplex_mode() {
  duplex_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignalInfo::duplex_mode() const {
  // @@protoc_insertion_point(field_get:SignalInfo.duplex_mode)
  return duplex_mode_.GetNoArena();
}
inline void SignalInfo::set_duplex_mode(const ::std::string& value) {
  
  duplex_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignalInfo.duplex_mode)
}
#if LANG_CXX11
inline void SignalInfo::set_duplex_mode(::std::string&& value) {
  
  duplex_mode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignalInfo.duplex_mode)
}
#endif
inline void SignalInfo::set_duplex_mode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  duplex_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignalInfo.duplex_mode)
}
inline void SignalInfo::set_duplex_mode(const char* value, size_t size) {
  
  duplex_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignalInfo.duplex_mode)
}
inline ::std::string* SignalInfo::mutable_duplex_mode() {
  
  // @@protoc_insertion_point(field_mutable:SignalInfo.duplex_mode)
  return duplex_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignalInfo::release_duplex_mode() {
  // @@protoc_insertion_point(field_release:SignalInfo.duplex_mode)
  
  return duplex_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignalInfo::set_allocated_duplex_mode(::std::string* duplex_mode) {
  if (duplex_mode != NULL) {
    
  } else {
    
  }
  duplex_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), duplex_mode);
  // @@protoc_insertion_point(field_set_allocated:SignalInfo.duplex_mode)
}

// double lng = 23;
inline void SignalInfo::clear_lng() {
  lng_ = 0;
}
inline double SignalInfo::lng() const {
  // @@protoc_insertion_point(field_get:SignalInfo.lng)
  return lng_;
}
inline void SignalInfo::set_lng(double value) {
  
  lng_ = value;
  // @@protoc_insertion_point(field_set:SignalInfo.lng)
}

// double lat = 24;
inline void SignalInfo::clear_lat() {
  lat_ = 0;
}
inline double SignalInfo::lat() const {
  // @@protoc_insertion_point(field_get:SignalInfo.lat)
  return lat_;
}
inline void SignalInfo::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:SignalInfo.lat)
}

// float height = 25;
inline void SignalInfo::clear_height() {
  height_ = 0;
}
inline float SignalInfo::height() const {
  // @@protoc_insertion_point(field_get:SignalInfo.height)
  return height_;
}
inline void SignalInfo::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:SignalInfo.height)
}

// uint32 timestamp = 26;
inline void SignalInfo::clear_timestamp() {
  timestamp_ = 0u;
}
inline ::google::protobuf::uint32 SignalInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:SignalInfo.timestamp)
  return timestamp_;
}
inline void SignalInfo::set_timestamp(::google::protobuf::uint32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:SignalInfo.timestamp)
}

// uint32 boxstate = 27;
inline void SignalInfo::clear_boxstate() {
  boxstate_ = 0u;
}
inline ::google::protobuf::uint32 SignalInfo::boxstate() const {
  // @@protoc_insertion_point(field_get:SignalInfo.boxstate)
  return boxstate_;
}
inline void SignalInfo::set_boxstate(::google::protobuf::uint32 value) {
  
  boxstate_ = value;
  // @@protoc_insertion_point(field_set:SignalInfo.boxstate)
}

// string isp = 28;
inline void SignalInfo::clear_isp() {
  isp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignalInfo::isp() const {
  // @@protoc_insertion_point(field_get:SignalInfo.isp)
  return isp_.GetNoArena();
}
inline void SignalInfo::set_isp(const ::std::string& value) {
  
  isp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignalInfo.isp)
}
#if LANG_CXX11
inline void SignalInfo::set_isp(::std::string&& value) {
  
  isp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignalInfo.isp)
}
#endif
inline void SignalInfo::set_isp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  isp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignalInfo.isp)
}
inline void SignalInfo::set_isp(const char* value, size_t size) {
  
  isp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignalInfo.isp)
}
inline ::std::string* SignalInfo::mutable_isp() {
  
  // @@protoc_insertion_point(field_mutable:SignalInfo.isp)
  return isp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignalInfo::release_isp() {
  // @@protoc_insertion_point(field_release:SignalInfo.isp)
  
  return isp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignalInfo::set_allocated_isp(::std::string* isp) {
  if (isp != NULL) {
    
  } else {
    
  }
  isp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), isp);
  // @@protoc_insertion_point(field_set_allocated:SignalInfo.isp)
}

// int32 tempMax = 29;
inline void SignalInfo::clear_tempmax() {
  tempmax_ = 0;
}
inline ::google::protobuf::int32 SignalInfo::tempmax() const {
  // @@protoc_insertion_point(field_get:SignalInfo.tempMax)
  return tempmax_;
}
inline void SignalInfo::set_tempmax(::google::protobuf::int32 value) {
  
  tempmax_ = value;
  // @@protoc_insertion_point(field_set:SignalInfo.tempMax)
}

// string prx_rsrp = 30;
inline void SignalInfo::clear_prx_rsrp() {
  prx_rsrp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignalInfo::prx_rsrp() const {
  // @@protoc_insertion_point(field_get:SignalInfo.prx_rsrp)
  return prx_rsrp_.GetNoArena();
}
inline void SignalInfo::set_prx_rsrp(const ::std::string& value) {
  
  prx_rsrp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignalInfo.prx_rsrp)
}
#if LANG_CXX11
inline void SignalInfo::set_prx_rsrp(::std::string&& value) {
  
  prx_rsrp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignalInfo.prx_rsrp)
}
#endif
inline void SignalInfo::set_prx_rsrp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  prx_rsrp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignalInfo.prx_rsrp)
}
inline void SignalInfo::set_prx_rsrp(const char* value, size_t size) {
  
  prx_rsrp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignalInfo.prx_rsrp)
}
inline ::std::string* SignalInfo::mutable_prx_rsrp() {
  
  // @@protoc_insertion_point(field_mutable:SignalInfo.prx_rsrp)
  return prx_rsrp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignalInfo::release_prx_rsrp() {
  // @@protoc_insertion_point(field_release:SignalInfo.prx_rsrp)
  
  return prx_rsrp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignalInfo::set_allocated_prx_rsrp(::std::string* prx_rsrp) {
  if (prx_rsrp != NULL) {
    
  } else {
    
  }
  prx_rsrp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prx_rsrp);
  // @@protoc_insertion_point(field_set_allocated:SignalInfo.prx_rsrp)
}

// string drx_rsrp = 31;
inline void SignalInfo::clear_drx_rsrp() {
  drx_rsrp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignalInfo::drx_rsrp() const {
  // @@protoc_insertion_point(field_get:SignalInfo.drx_rsrp)
  return drx_rsrp_.GetNoArena();
}
inline void SignalInfo::set_drx_rsrp(const ::std::string& value) {
  
  drx_rsrp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignalInfo.drx_rsrp)
}
#if LANG_CXX11
inline void SignalInfo::set_drx_rsrp(::std::string&& value) {
  
  drx_rsrp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignalInfo.drx_rsrp)
}
#endif
inline void SignalInfo::set_drx_rsrp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  drx_rsrp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignalInfo.drx_rsrp)
}
inline void SignalInfo::set_drx_rsrp(const char* value, size_t size) {
  
  drx_rsrp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignalInfo.drx_rsrp)
}
inline ::std::string* SignalInfo::mutable_drx_rsrp() {
  
  // @@protoc_insertion_point(field_mutable:SignalInfo.drx_rsrp)
  return drx_rsrp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignalInfo::release_drx_rsrp() {
  // @@protoc_insertion_point(field_release:SignalInfo.drx_rsrp)
  
  return drx_rsrp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignalInfo::set_allocated_drx_rsrp(::std::string* drx_rsrp) {
  if (drx_rsrp != NULL) {
    
  } else {
    
  }
  drx_rsrp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drx_rsrp);
  // @@protoc_insertion_point(field_set_allocated:SignalInfo.drx_rsrp)
}

// string rx2_rsrp = 32;
inline void SignalInfo::clear_rx2_rsrp() {
  rx2_rsrp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignalInfo::rx2_rsrp() const {
  // @@protoc_insertion_point(field_get:SignalInfo.rx2_rsrp)
  return rx2_rsrp_.GetNoArena();
}
inline void SignalInfo::set_rx2_rsrp(const ::std::string& value) {
  
  rx2_rsrp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignalInfo.rx2_rsrp)
}
#if LANG_CXX11
inline void SignalInfo::set_rx2_rsrp(::std::string&& value) {
  
  rx2_rsrp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignalInfo.rx2_rsrp)
}
#endif
inline void SignalInfo::set_rx2_rsrp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rx2_rsrp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignalInfo.rx2_rsrp)
}
inline void SignalInfo::set_rx2_rsrp(const char* value, size_t size) {
  
  rx2_rsrp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignalInfo.rx2_rsrp)
}
inline ::std::string* SignalInfo::mutable_rx2_rsrp() {
  
  // @@protoc_insertion_point(field_mutable:SignalInfo.rx2_rsrp)
  return rx2_rsrp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignalInfo::release_rx2_rsrp() {
  // @@protoc_insertion_point(field_release:SignalInfo.rx2_rsrp)
  
  return rx2_rsrp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignalInfo::set_allocated_rx2_rsrp(::std::string* rx2_rsrp) {
  if (rx2_rsrp != NULL) {
    
  } else {
    
  }
  rx2_rsrp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rx2_rsrp);
  // @@protoc_insertion_point(field_set_allocated:SignalInfo.rx2_rsrp)
}

// string rx3_rsrp = 33;
inline void SignalInfo::clear_rx3_rsrp() {
  rx3_rsrp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignalInfo::rx3_rsrp() const {
  // @@protoc_insertion_point(field_get:SignalInfo.rx3_rsrp)
  return rx3_rsrp_.GetNoArena();
}
inline void SignalInfo::set_rx3_rsrp(const ::std::string& value) {
  
  rx3_rsrp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignalInfo.rx3_rsrp)
}
#if LANG_CXX11
inline void SignalInfo::set_rx3_rsrp(::std::string&& value) {
  
  rx3_rsrp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignalInfo.rx3_rsrp)
}
#endif
inline void SignalInfo::set_rx3_rsrp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rx3_rsrp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignalInfo.rx3_rsrp)
}
inline void SignalInfo::set_rx3_rsrp(const char* value, size_t size) {
  
  rx3_rsrp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignalInfo.rx3_rsrp)
}
inline ::std::string* SignalInfo::mutable_rx3_rsrp() {
  
  // @@protoc_insertion_point(field_mutable:SignalInfo.rx3_rsrp)
  return rx3_rsrp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignalInfo::release_rx3_rsrp() {
  // @@protoc_insertion_point(field_release:SignalInfo.rx3_rsrp)
  
  return rx3_rsrp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignalInfo::set_allocated_rx3_rsrp(::std::string* rx3_rsrp) {
  if (rx3_rsrp != NULL) {
    
  } else {
    
  }
  rx3_rsrp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rx3_rsrp);
  // @@protoc_insertion_point(field_set_allocated:SignalInfo.rx3_rsrp)
}

// string box_sn = 34;
inline void SignalInfo::clear_box_sn() {
  box_sn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignalInfo::box_sn() const {
  // @@protoc_insertion_point(field_get:SignalInfo.box_sn)
  return box_sn_.GetNoArena();
}
inline void SignalInfo::set_box_sn(const ::std::string& value) {
  
  box_sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignalInfo.box_sn)
}
#if LANG_CXX11
inline void SignalInfo::set_box_sn(::std::string&& value) {
  
  box_sn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignalInfo.box_sn)
}
#endif
inline void SignalInfo::set_box_sn(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  box_sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignalInfo.box_sn)
}
inline void SignalInfo::set_box_sn(const char* value, size_t size) {
  
  box_sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignalInfo.box_sn)
}
inline ::std::string* SignalInfo::mutable_box_sn() {
  
  // @@protoc_insertion_point(field_mutable:SignalInfo.box_sn)
  return box_sn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignalInfo::release_box_sn() {
  // @@protoc_insertion_point(field_release:SignalInfo.box_sn)
  
  return box_sn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignalInfo::set_allocated_box_sn(::std::string* box_sn) {
  if (box_sn != NULL) {
    
  } else {
    
  }
  box_sn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), box_sn);
  // @@protoc_insertion_point(field_set_allocated:SignalInfo.box_sn)
}

// uint32 sim_use_seat = 35;
inline void SignalInfo::clear_sim_use_seat() {
  sim_use_seat_ = 0u;
}
inline ::google::protobuf::uint32 SignalInfo::sim_use_seat() const {
  // @@protoc_insertion_point(field_get:SignalInfo.sim_use_seat)
  return sim_use_seat_;
}
inline void SignalInfo::set_sim_use_seat(::google::protobuf::uint32 value) {
  
  sim_use_seat_ = value;
  // @@protoc_insertion_point(field_set:SignalInfo.sim_use_seat)
}

// uint32 networkMode = 36;
inline void SignalInfo::clear_networkmode() {
  networkmode_ = 0u;
}
inline ::google::protobuf::uint32 SignalInfo::networkmode() const {
  // @@protoc_insertion_point(field_get:SignalInfo.networkMode)
  return networkmode_;
}
inline void SignalInfo::set_networkmode(::google::protobuf::uint32 value) {
  
  networkmode_ = value;
  // @@protoc_insertion_point(field_set:SignalInfo.networkMode)
}

// uint32 delayTime = 37;
inline void SignalInfo::clear_delaytime() {
  delaytime_ = 0u;
}
inline ::google::protobuf::uint32 SignalInfo::delaytime() const {
  // @@protoc_insertion_point(field_get:SignalInfo.delayTime)
  return delaytime_;
}
inline void SignalInfo::set_delaytime(::google::protobuf::uint32 value) {
  
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:SignalInfo.delayTime)
}

// -------------------------------------------------------------------

// SignalList

// repeated .SignalInfo signalInfo = 1;
inline int SignalList::signalinfo_size() const {
  return signalinfo_.size();
}
inline void SignalList::clear_signalinfo() {
  signalinfo_.Clear();
}
inline ::SignalInfo* SignalList::mutable_signalinfo(int index) {
  // @@protoc_insertion_point(field_mutable:SignalList.signalInfo)
  return signalinfo_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::SignalInfo >*
SignalList::mutable_signalinfo() {
  // @@protoc_insertion_point(field_mutable_list:SignalList.signalInfo)
  return &signalinfo_;
}
inline const ::SignalInfo& SignalList::signalinfo(int index) const {
  // @@protoc_insertion_point(field_get:SignalList.signalInfo)
  return signalinfo_.Get(index);
}
inline ::SignalInfo* SignalList::add_signalinfo() {
  // @@protoc_insertion_point(field_add:SignalList.signalInfo)
  return signalinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SignalInfo >&
SignalList::signalinfo() const {
  // @@protoc_insertion_point(field_list:SignalList.signalInfo)
  return signalinfo_;
}

// -------------------------------------------------------------------

// UavState

// .FlightControllerState flightControllerState = 1;
inline bool UavState::has_flightcontrollerstate() const {
  return this != internal_default_instance() && flightcontrollerstate_ != NULL;
}
inline void UavState::clear_flightcontrollerstate() {
  if (GetArenaNoVirtual() == NULL && flightcontrollerstate_ != NULL) {
    delete flightcontrollerstate_;
  }
  flightcontrollerstate_ = NULL;
}
inline const ::FlightControllerState& UavState::_internal_flightcontrollerstate() const {
  return *flightcontrollerstate_;
}
inline const ::FlightControllerState& UavState::flightcontrollerstate() const {
  const ::FlightControllerState* p = flightcontrollerstate_;
  // @@protoc_insertion_point(field_get:UavState.flightControllerState)
  return p != NULL ? *p : *reinterpret_cast<const ::FlightControllerState*>(
      &::_FlightControllerState_default_instance_);
}
inline ::FlightControllerState* UavState::release_flightcontrollerstate() {
  // @@protoc_insertion_point(field_release:UavState.flightControllerState)
  
  ::FlightControllerState* temp = flightcontrollerstate_;
  flightcontrollerstate_ = NULL;
  return temp;
}
inline ::FlightControllerState* UavState::mutable_flightcontrollerstate() {
  
  if (flightcontrollerstate_ == NULL) {
    auto* p = CreateMaybeMessage<::FlightControllerState>(GetArenaNoVirtual());
    flightcontrollerstate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:UavState.flightControllerState)
  return flightcontrollerstate_;
}
inline void UavState::set_allocated_flightcontrollerstate(::FlightControllerState* flightcontrollerstate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete flightcontrollerstate_;
  }
  if (flightcontrollerstate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      flightcontrollerstate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, flightcontrollerstate, submessage_arena);
    }
    
  } else {
    
  }
  flightcontrollerstate_ = flightcontrollerstate;
  // @@protoc_insertion_point(field_set_allocated:UavState.flightControllerState)
}

// .BatteryState batteryState = 2;
inline bool UavState::has_batterystate() const {
  return this != internal_default_instance() && batterystate_ != NULL;
}
inline void UavState::clear_batterystate() {
  if (GetArenaNoVirtual() == NULL && batterystate_ != NULL) {
    delete batterystate_;
  }
  batterystate_ = NULL;
}
inline const ::BatteryState& UavState::_internal_batterystate() const {
  return *batterystate_;
}
inline const ::BatteryState& UavState::batterystate() const {
  const ::BatteryState* p = batterystate_;
  // @@protoc_insertion_point(field_get:UavState.batteryState)
  return p != NULL ? *p : *reinterpret_cast<const ::BatteryState*>(
      &::_BatteryState_default_instance_);
}
inline ::BatteryState* UavState::release_batterystate() {
  // @@protoc_insertion_point(field_release:UavState.batteryState)
  
  ::BatteryState* temp = batterystate_;
  batterystate_ = NULL;
  return temp;
}
inline ::BatteryState* UavState::mutable_batterystate() {
  
  if (batterystate_ == NULL) {
    auto* p = CreateMaybeMessage<::BatteryState>(GetArenaNoVirtual());
    batterystate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:UavState.batteryState)
  return batterystate_;
}
inline void UavState::set_allocated_batterystate(::BatteryState* batterystate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete batterystate_;
  }
  if (batterystate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      batterystate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, batterystate, submessage_arena);
    }
    
  } else {
    
  }
  batterystate_ = batterystate;
  // @@protoc_insertion_point(field_set_allocated:UavState.batteryState)
}

// .PtzState ptzState = 3;
inline bool UavState::has_ptzstate() const {
  return this != internal_default_instance() && ptzstate_ != NULL;
}
inline void UavState::clear_ptzstate() {
  if (GetArenaNoVirtual() == NULL && ptzstate_ != NULL) {
    delete ptzstate_;
  }
  ptzstate_ = NULL;
}
inline const ::PtzState& UavState::_internal_ptzstate() const {
  return *ptzstate_;
}
inline const ::PtzState& UavState::ptzstate() const {
  const ::PtzState* p = ptzstate_;
  // @@protoc_insertion_point(field_get:UavState.ptzState)
  return p != NULL ? *p : *reinterpret_cast<const ::PtzState*>(
      &::_PtzState_default_instance_);
}
inline ::PtzState* UavState::release_ptzstate() {
  // @@protoc_insertion_point(field_release:UavState.ptzState)
  
  ::PtzState* temp = ptzstate_;
  ptzstate_ = NULL;
  return temp;
}
inline ::PtzState* UavState::mutable_ptzstate() {
  
  if (ptzstate_ == NULL) {
    auto* p = CreateMaybeMessage<::PtzState>(GetArenaNoVirtual());
    ptzstate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:UavState.ptzState)
  return ptzstate_;
}
inline void UavState::set_allocated_ptzstate(::PtzState* ptzstate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ptzstate_;
  }
  if (ptzstate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ptzstate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ptzstate, submessage_arena);
    }
    
  } else {
    
  }
  ptzstate_ = ptzstate;
  // @@protoc_insertion_point(field_set_allocated:UavState.ptzState)
}

// .CameraState cameraState = 4;
inline bool UavState::has_camerastate() const {
  return this != internal_default_instance() && camerastate_ != NULL;
}
inline void UavState::clear_camerastate() {
  if (GetArenaNoVirtual() == NULL && camerastate_ != NULL) {
    delete camerastate_;
  }
  camerastate_ = NULL;
}
inline const ::CameraState& UavState::_internal_camerastate() const {
  return *camerastate_;
}
inline const ::CameraState& UavState::camerastate() const {
  const ::CameraState* p = camerastate_;
  // @@protoc_insertion_point(field_get:UavState.cameraState)
  return p != NULL ? *p : *reinterpret_cast<const ::CameraState*>(
      &::_CameraState_default_instance_);
}
inline ::CameraState* UavState::release_camerastate() {
  // @@protoc_insertion_point(field_release:UavState.cameraState)
  
  ::CameraState* temp = camerastate_;
  camerastate_ = NULL;
  return temp;
}
inline ::CameraState* UavState::mutable_camerastate() {
  
  if (camerastate_ == NULL) {
    auto* p = CreateMaybeMessage<::CameraState>(GetArenaNoVirtual());
    camerastate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:UavState.cameraState)
  return camerastate_;
}
inline void UavState::set_allocated_camerastate(::CameraState* camerastate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete camerastate_;
  }
  if (camerastate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      camerastate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, camerastate, submessage_arena);
    }
    
  } else {
    
  }
  camerastate_ = camerastate;
  // @@protoc_insertion_point(field_set_allocated:UavState.cameraState)
}

// .MissionState missionState = 5;
inline bool UavState::has_missionstate() const {
  return this != internal_default_instance() && missionstate_ != NULL;
}
inline void UavState::clear_missionstate() {
  if (GetArenaNoVirtual() == NULL && missionstate_ != NULL) {
    delete missionstate_;
  }
  missionstate_ = NULL;
}
inline const ::MissionState& UavState::_internal_missionstate() const {
  return *missionstate_;
}
inline const ::MissionState& UavState::missionstate() const {
  const ::MissionState* p = missionstate_;
  // @@protoc_insertion_point(field_get:UavState.missionState)
  return p != NULL ? *p : *reinterpret_cast<const ::MissionState*>(
      &::_MissionState_default_instance_);
}
inline ::MissionState* UavState::release_missionstate() {
  // @@protoc_insertion_point(field_release:UavState.missionState)
  
  ::MissionState* temp = missionstate_;
  missionstate_ = NULL;
  return temp;
}
inline ::MissionState* UavState::mutable_missionstate() {
  
  if (missionstate_ == NULL) {
    auto* p = CreateMaybeMessage<::MissionState>(GetArenaNoVirtual());
    missionstate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:UavState.missionState)
  return missionstate_;
}
inline void UavState::set_allocated_missionstate(::MissionState* missionstate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete missionstate_;
  }
  if (missionstate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      missionstate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, missionstate, submessage_arena);
    }
    
  } else {
    
  }
  missionstate_ = missionstate;
  // @@protoc_insertion_point(field_set_allocated:UavState.missionState)
}

// string boxSn = 6;
inline void UavState::clear_boxsn() {
  boxsn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UavState::boxsn() const {
  // @@protoc_insertion_point(field_get:UavState.boxSn)
  return boxsn_.GetNoArena();
}
inline void UavState::set_boxsn(const ::std::string& value) {
  
  boxsn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UavState.boxSn)
}
#if LANG_CXX11
inline void UavState::set_boxsn(::std::string&& value) {
  
  boxsn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UavState.boxSn)
}
#endif
inline void UavState::set_boxsn(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  boxsn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UavState.boxSn)
}
inline void UavState::set_boxsn(const char* value, size_t size) {
  
  boxsn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UavState.boxSn)
}
inline ::std::string* UavState::mutable_boxsn() {
  
  // @@protoc_insertion_point(field_mutable:UavState.boxSn)
  return boxsn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UavState::release_boxsn() {
  // @@protoc_insertion_point(field_release:UavState.boxSn)
  
  return boxsn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UavState::set_allocated_boxsn(::std::string* boxsn) {
  if (boxsn != NULL) {
    
  } else {
    
  }
  boxsn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), boxsn);
  // @@protoc_insertion_point(field_set_allocated:UavState.boxSn)
}

// .AvoidanceData avoidanceData = 7;
inline bool UavState::has_avoidancedata() const {
  return this != internal_default_instance() && avoidancedata_ != NULL;
}
inline void UavState::clear_avoidancedata() {
  if (GetArenaNoVirtual() == NULL && avoidancedata_ != NULL) {
    delete avoidancedata_;
  }
  avoidancedata_ = NULL;
}
inline const ::AvoidanceData& UavState::_internal_avoidancedata() const {
  return *avoidancedata_;
}
inline const ::AvoidanceData& UavState::avoidancedata() const {
  const ::AvoidanceData* p = avoidancedata_;
  // @@protoc_insertion_point(field_get:UavState.avoidanceData)
  return p != NULL ? *p : *reinterpret_cast<const ::AvoidanceData*>(
      &::_AvoidanceData_default_instance_);
}
inline ::AvoidanceData* UavState::release_avoidancedata() {
  // @@protoc_insertion_point(field_release:UavState.avoidanceData)
  
  ::AvoidanceData* temp = avoidancedata_;
  avoidancedata_ = NULL;
  return temp;
}
inline ::AvoidanceData* UavState::mutable_avoidancedata() {
  
  if (avoidancedata_ == NULL) {
    auto* p = CreateMaybeMessage<::AvoidanceData>(GetArenaNoVirtual());
    avoidancedata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:UavState.avoidanceData)
  return avoidancedata_;
}
inline void UavState::set_allocated_avoidancedata(::AvoidanceData* avoidancedata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete avoidancedata_;
  }
  if (avoidancedata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      avoidancedata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, avoidancedata, submessage_arena);
    }
    
  } else {
    
  }
  avoidancedata_ = avoidancedata;
  // @@protoc_insertion_point(field_set_allocated:UavState.avoidanceData)
}

// repeated .HmsAlarmData hmsAlarmData = 8;
inline int UavState::hmsalarmdata_size() const {
  return hmsalarmdata_.size();
}
inline void UavState::clear_hmsalarmdata() {
  hmsalarmdata_.Clear();
}
inline ::HmsAlarmData* UavState::mutable_hmsalarmdata(int index) {
  // @@protoc_insertion_point(field_mutable:UavState.hmsAlarmData)
  return hmsalarmdata_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::HmsAlarmData >*
UavState::mutable_hmsalarmdata() {
  // @@protoc_insertion_point(field_mutable_list:UavState.hmsAlarmData)
  return &hmsalarmdata_;
}
inline const ::HmsAlarmData& UavState::hmsalarmdata(int index) const {
  // @@protoc_insertion_point(field_get:UavState.hmsAlarmData)
  return hmsalarmdata_.Get(index);
}
inline ::HmsAlarmData* UavState::add_hmsalarmdata() {
  // @@protoc_insertion_point(field_add:UavState.hmsAlarmData)
  return hmsalarmdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HmsAlarmData >&
UavState::hmsalarmdata() const {
  // @@protoc_insertion_point(field_list:UavState.hmsAlarmData)
  return hmsalarmdata_;
}

// uint64 timestamp = 9;
inline void UavState::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UavState::timestamp() const {
  // @@protoc_insertion_point(field_get:UavState.timestamp)
  return timestamp_;
}
inline void UavState::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:UavState.timestamp)
}

// -------------------------------------------------------------------

// FlightControllerState

// uint32 satelliteCount = 1;
inline void FlightControllerState::clear_satellitecount() {
  satellitecount_ = 0u;
}
inline ::google::protobuf::uint32 FlightControllerState::satellitecount() const {
  // @@protoc_insertion_point(field_get:FlightControllerState.satelliteCount)
  return satellitecount_;
}
inline void FlightControllerState::set_satellitecount(::google::protobuf::uint32 value) {
  
  satellitecount_ = value;
  // @@protoc_insertion_point(field_set:FlightControllerState.satelliteCount)
}

// uint32 gpsSignalLevel = 2;
inline void FlightControllerState::clear_gpssignallevel() {
  gpssignallevel_ = 0u;
}
inline ::google::protobuf::uint32 FlightControllerState::gpssignallevel() const {
  // @@protoc_insertion_point(field_get:FlightControllerState.gpsSignalLevel)
  return gpssignallevel_;
}
inline void FlightControllerState::set_gpssignallevel(::google::protobuf::uint32 value) {
  
  gpssignallevel_ = value;
  // @@protoc_insertion_point(field_set:FlightControllerState.gpsSignalLevel)
}

// uint32 flightMode = 3;
inline void FlightControllerState::clear_flightmode() {
  flightmode_ = 0u;
}
inline ::google::protobuf::uint32 FlightControllerState::flightmode() const {
  // @@protoc_insertion_point(field_get:FlightControllerState.flightMode)
  return flightmode_;
}
inline void FlightControllerState::set_flightmode(::google::protobuf::uint32 value) {
  
  flightmode_ = value;
  // @@protoc_insertion_point(field_set:FlightControllerState.flightMode)
}

// uint32 flightStatus = 4;
inline void FlightControllerState::clear_flightstatus() {
  flightstatus_ = 0u;
}
inline ::google::protobuf::uint32 FlightControllerState::flightstatus() const {
  // @@protoc_insertion_point(field_get:FlightControllerState.flightStatus)
  return flightstatus_;
}
inline void FlightControllerState::set_flightstatus(::google::protobuf::uint32 value) {
  
  flightstatus_ = value;
  // @@protoc_insertion_point(field_set:FlightControllerState.flightStatus)
}

// .PointData startPoint = 5;
inline bool FlightControllerState::has_startpoint() const {
  return this != internal_default_instance() && startpoint_ != NULL;
}
inline void FlightControllerState::clear_startpoint() {
  if (GetArenaNoVirtual() == NULL && startpoint_ != NULL) {
    delete startpoint_;
  }
  startpoint_ = NULL;
}
inline const ::PointData& FlightControllerState::_internal_startpoint() const {
  return *startpoint_;
}
inline const ::PointData& FlightControllerState::startpoint() const {
  const ::PointData* p = startpoint_;
  // @@protoc_insertion_point(field_get:FlightControllerState.startPoint)
  return p != NULL ? *p : *reinterpret_cast<const ::PointData*>(
      &::_PointData_default_instance_);
}
inline ::PointData* FlightControllerState::release_startpoint() {
  // @@protoc_insertion_point(field_release:FlightControllerState.startPoint)
  
  ::PointData* temp = startpoint_;
  startpoint_ = NULL;
  return temp;
}
inline ::PointData* FlightControllerState::mutable_startpoint() {
  
  if (startpoint_ == NULL) {
    auto* p = CreateMaybeMessage<::PointData>(GetArenaNoVirtual());
    startpoint_ = p;
  }
  // @@protoc_insertion_point(field_mutable:FlightControllerState.startPoint)
  return startpoint_;
}
inline void FlightControllerState::set_allocated_startpoint(::PointData* startpoint) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete startpoint_;
  }
  if (startpoint) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      startpoint = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, startpoint, submessage_arena);
    }
    
  } else {
    
  }
  startpoint_ = startpoint;
  // @@protoc_insertion_point(field_set_allocated:FlightControllerState.startPoint)
}

// .PointData homePoint = 6;
inline bool FlightControllerState::has_homepoint() const {
  return this != internal_default_instance() && homepoint_ != NULL;
}
inline void FlightControllerState::clear_homepoint() {
  if (GetArenaNoVirtual() == NULL && homepoint_ != NULL) {
    delete homepoint_;
  }
  homepoint_ = NULL;
}
inline const ::PointData& FlightControllerState::_internal_homepoint() const {
  return *homepoint_;
}
inline const ::PointData& FlightControllerState::homepoint() const {
  const ::PointData* p = homepoint_;
  // @@protoc_insertion_point(field_get:FlightControllerState.homePoint)
  return p != NULL ? *p : *reinterpret_cast<const ::PointData*>(
      &::_PointData_default_instance_);
}
inline ::PointData* FlightControllerState::release_homepoint() {
  // @@protoc_insertion_point(field_release:FlightControllerState.homePoint)
  
  ::PointData* temp = homepoint_;
  homepoint_ = NULL;
  return temp;
}
inline ::PointData* FlightControllerState::mutable_homepoint() {
  
  if (homepoint_ == NULL) {
    auto* p = CreateMaybeMessage<::PointData>(GetArenaNoVirtual());
    homepoint_ = p;
  }
  // @@protoc_insertion_point(field_mutable:FlightControllerState.homePoint)
  return homepoint_;
}
inline void FlightControllerState::set_allocated_homepoint(::PointData* homepoint) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete homepoint_;
  }
  if (homepoint) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      homepoint = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, homepoint, submessage_arena);
    }
    
  } else {
    
  }
  homepoint_ = homepoint;
  // @@protoc_insertion_point(field_set_allocated:FlightControllerState.homePoint)
}

// int32 homeHeight = 7;
inline void FlightControllerState::clear_homeheight() {
  homeheight_ = 0;
}
inline ::google::protobuf::int32 FlightControllerState::homeheight() const {
  // @@protoc_insertion_point(field_get:FlightControllerState.homeHeight)
  return homeheight_;
}
inline void FlightControllerState::set_homeheight(::google::protobuf::int32 value) {
  
  homeheight_ = value;
  // @@protoc_insertion_point(field_set:FlightControllerState.homeHeight)
}

// uint32 safeLine = 8;
inline void FlightControllerState::clear_safeline() {
  safeline_ = 0u;
}
inline ::google::protobuf::uint32 FlightControllerState::safeline() const {
  // @@protoc_insertion_point(field_get:FlightControllerState.safeLine)
  return safeline_;
}
inline void FlightControllerState::set_safeline(::google::protobuf::uint32 value) {
  
  safeline_ = value;
  // @@protoc_insertion_point(field_set:FlightControllerState.safeLine)
}

// uint32 deviceStatus = 9;
inline void FlightControllerState::clear_devicestatus() {
  devicestatus_ = 0u;
}
inline ::google::protobuf::uint32 FlightControllerState::devicestatus() const {
  // @@protoc_insertion_point(field_get:FlightControllerState.deviceStatus)
  return devicestatus_;
}
inline void FlightControllerState::set_devicestatus(::google::protobuf::uint32 value) {
  
  devicestatus_ = value;
  // @@protoc_insertion_point(field_set:FlightControllerState.deviceStatus)
}

// uint32 uwbNodeCount = 10;
inline void FlightControllerState::clear_uwbnodecount() {
  uwbnodecount_ = 0u;
}
inline ::google::protobuf::uint32 FlightControllerState::uwbnodecount() const {
  // @@protoc_insertion_point(field_get:FlightControllerState.uwbNodeCount)
  return uwbnodecount_;
}
inline void FlightControllerState::set_uwbnodecount(::google::protobuf::uint32 value) {
  
  uwbnodecount_ = value;
  // @@protoc_insertion_point(field_set:FlightControllerState.uwbNodeCount)
}

// string rcMode = 11;
inline void FlightControllerState::clear_rcmode() {
  rcmode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FlightControllerState::rcmode() const {
  // @@protoc_insertion_point(field_get:FlightControllerState.rcMode)
  return rcmode_.GetNoArena();
}
inline void FlightControllerState::set_rcmode(const ::std::string& value) {
  
  rcmode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FlightControllerState.rcMode)
}
#if LANG_CXX11
inline void FlightControllerState::set_rcmode(::std::string&& value) {
  
  rcmode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FlightControllerState.rcMode)
}
#endif
inline void FlightControllerState::set_rcmode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rcmode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FlightControllerState.rcMode)
}
inline void FlightControllerState::set_rcmode(const char* value, size_t size) {
  
  rcmode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FlightControllerState.rcMode)
}
inline ::std::string* FlightControllerState::mutable_rcmode() {
  
  // @@protoc_insertion_point(field_mutable:FlightControllerState.rcMode)
  return rcmode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FlightControllerState::release_rcmode() {
  // @@protoc_insertion_point(field_release:FlightControllerState.rcMode)
  
  return rcmode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FlightControllerState::set_allocated_rcmode(::std::string* rcmode) {
  if (rcmode != NULL) {
    
  } else {
    
  }
  rcmode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rcmode);
  // @@protoc_insertion_point(field_set_allocated:FlightControllerState.rcMode)
}

// uint32 isEmergencyBrakeing = 12;
inline void FlightControllerState::clear_isemergencybrakeing() {
  isemergencybrakeing_ = 0u;
}
inline ::google::protobuf::uint32 FlightControllerState::isemergencybrakeing() const {
  // @@protoc_insertion_point(field_get:FlightControllerState.isEmergencyBrakeing)
  return isemergencybrakeing_;
}
inline void FlightControllerState::set_isemergencybrakeing(::google::protobuf::uint32 value) {
  
  isemergencybrakeing_ = value;
  // @@protoc_insertion_point(field_set:FlightControllerState.isEmergencyBrakeing)
}

// uint32 outFlyAreaFlag = 13;
inline void FlightControllerState::clear_outflyareaflag() {
  outflyareaflag_ = 0u;
}
inline ::google::protobuf::uint32 FlightControllerState::outflyareaflag() const {
  // @@protoc_insertion_point(field_get:FlightControllerState.outFlyAreaFlag)
  return outflyareaflag_;
}
inline void FlightControllerState::set_outflyareaflag(::google::protobuf::uint32 value) {
  
  outflyareaflag_ = value;
  // @@protoc_insertion_point(field_set:FlightControllerState.outFlyAreaFlag)
}

// uint32 inNoFlyAreaFlag = 14;
inline void FlightControllerState::clear_innoflyareaflag() {
  innoflyareaflag_ = 0u;
}
inline ::google::protobuf::uint32 FlightControllerState::innoflyareaflag() const {
  // @@protoc_insertion_point(field_get:FlightControllerState.inNoFlyAreaFlag)
  return innoflyareaflag_;
}
inline void FlightControllerState::set_innoflyareaflag(::google::protobuf::uint32 value) {
  
  innoflyareaflag_ = value;
  // @@protoc_insertion_point(field_set:FlightControllerState.inNoFlyAreaFlag)
}

// .PointData targetPoint = 15;
inline bool FlightControllerState::has_targetpoint() const {
  return this != internal_default_instance() && targetpoint_ != NULL;
}
inline void FlightControllerState::clear_targetpoint() {
  if (GetArenaNoVirtual() == NULL && targetpoint_ != NULL) {
    delete targetpoint_;
  }
  targetpoint_ = NULL;
}
inline const ::PointData& FlightControllerState::_internal_targetpoint() const {
  return *targetpoint_;
}
inline const ::PointData& FlightControllerState::targetpoint() const {
  const ::PointData* p = targetpoint_;
  // @@protoc_insertion_point(field_get:FlightControllerState.targetPoint)
  return p != NULL ? *p : *reinterpret_cast<const ::PointData*>(
      &::_PointData_default_instance_);
}
inline ::PointData* FlightControllerState::release_targetpoint() {
  // @@protoc_insertion_point(field_release:FlightControllerState.targetPoint)
  
  ::PointData* temp = targetpoint_;
  targetpoint_ = NULL;
  return temp;
}
inline ::PointData* FlightControllerState::mutable_targetpoint() {
  
  if (targetpoint_ == NULL) {
    auto* p = CreateMaybeMessage<::PointData>(GetArenaNoVirtual());
    targetpoint_ = p;
  }
  // @@protoc_insertion_point(field_mutable:FlightControllerState.targetPoint)
  return targetpoint_;
}
inline void FlightControllerState::set_allocated_targetpoint(::PointData* targetpoint) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete targetpoint_;
  }
  if (targetpoint) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      targetpoint = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, targetpoint, submessage_arena);
    }
    
  } else {
    
  }
  targetpoint_ = targetpoint;
  // @@protoc_insertion_point(field_set_allocated:FlightControllerState.targetPoint)
}

// uint32 batteryGohome = 16;
inline void FlightControllerState::clear_batterygohome() {
  batterygohome_ = 0u;
}
inline ::google::protobuf::uint32 FlightControllerState::batterygohome() const {
  // @@protoc_insertion_point(field_get:FlightControllerState.batteryGohome)
  return batterygohome_;
}
inline void FlightControllerState::set_batterygohome(::google::protobuf::uint32 value) {
  
  batterygohome_ = value;
  // @@protoc_insertion_point(field_set:FlightControllerState.batteryGohome)
}

// uint32 autoLowGohome = 17;
inline void FlightControllerState::clear_autolowgohome() {
  autolowgohome_ = 0u;
}
inline ::google::protobuf::uint32 FlightControllerState::autolowgohome() const {
  // @@protoc_insertion_point(field_get:FlightControllerState.autoLowGohome)
  return autolowgohome_;
}
inline void FlightControllerState::set_autolowgohome(::google::protobuf::uint32 value) {
  
  autolowgohome_ = value;
  // @@protoc_insertion_point(field_set:FlightControllerState.autoLowGohome)
}

// uint32 rcConnected = 18;
inline void FlightControllerState::clear_rcconnected() {
  rcconnected_ = 0u;
}
inline ::google::protobuf::uint32 FlightControllerState::rcconnected() const {
  // @@protoc_insertion_point(field_get:FlightControllerState.rcConnected)
  return rcconnected_;
}
inline void FlightControllerState::set_rcconnected(::google::protobuf::uint32 value) {
  
  rcconnected_ = value;
  // @@protoc_insertion_point(field_set:FlightControllerState.rcConnected)
}

// -------------------------------------------------------------------

// BatteryState

// uint32 batteryNum = 1;
inline void BatteryState::clear_batterynum() {
  batterynum_ = 0u;
}
inline ::google::protobuf::uint32 BatteryState::batterynum() const {
  // @@protoc_insertion_point(field_get:BatteryState.batteryNum)
  return batterynum_;
}
inline void BatteryState::set_batterynum(::google::protobuf::uint32 value) {
  
  batterynum_ = value;
  // @@protoc_insertion_point(field_set:BatteryState.batteryNum)
}

// string batteryPower = 2;
inline void BatteryState::clear_batterypower() {
  batterypower_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BatteryState::batterypower() const {
  // @@protoc_insertion_point(field_get:BatteryState.batteryPower)
  return batterypower_.GetNoArena();
}
inline void BatteryState::set_batterypower(const ::std::string& value) {
  
  batterypower_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BatteryState.batteryPower)
}
#if LANG_CXX11
inline void BatteryState::set_batterypower(::std::string&& value) {
  
  batterypower_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BatteryState.batteryPower)
}
#endif
inline void BatteryState::set_batterypower(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  batterypower_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BatteryState.batteryPower)
}
inline void BatteryState::set_batterypower(const char* value, size_t size) {
  
  batterypower_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BatteryState.batteryPower)
}
inline ::std::string* BatteryState::mutable_batterypower() {
  
  // @@protoc_insertion_point(field_mutable:BatteryState.batteryPower)
  return batterypower_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BatteryState::release_batterypower() {
  // @@protoc_insertion_point(field_release:BatteryState.batteryPower)
  
  return batterypower_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BatteryState::set_allocated_batterypower(::std::string* batterypower) {
  if (batterypower != NULL) {
    
  } else {
    
  }
  batterypower_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), batterypower);
  // @@protoc_insertion_point(field_set_allocated:BatteryState.batteryPower)
}

// string batteryVoltage = 3;
inline void BatteryState::clear_batteryvoltage() {
  batteryvoltage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BatteryState::batteryvoltage() const {
  // @@protoc_insertion_point(field_get:BatteryState.batteryVoltage)
  return batteryvoltage_.GetNoArena();
}
inline void BatteryState::set_batteryvoltage(const ::std::string& value) {
  
  batteryvoltage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BatteryState.batteryVoltage)
}
#if LANG_CXX11
inline void BatteryState::set_batteryvoltage(::std::string&& value) {
  
  batteryvoltage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BatteryState.batteryVoltage)
}
#endif
inline void BatteryState::set_batteryvoltage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  batteryvoltage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BatteryState.batteryVoltage)
}
inline void BatteryState::set_batteryvoltage(const char* value, size_t size) {
  
  batteryvoltage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BatteryState.batteryVoltage)
}
inline ::std::string* BatteryState::mutable_batteryvoltage() {
  
  // @@protoc_insertion_point(field_mutable:BatteryState.batteryVoltage)
  return batteryvoltage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BatteryState::release_batteryvoltage() {
  // @@protoc_insertion_point(field_release:BatteryState.batteryVoltage)
  
  return batteryvoltage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BatteryState::set_allocated_batteryvoltage(::std::string* batteryvoltage) {
  if (batteryvoltage != NULL) {
    
  } else {
    
  }
  batteryvoltage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), batteryvoltage);
  // @@protoc_insertion_point(field_set_allocated:BatteryState.batteryVoltage)
}

// .BatteryStateInfo firstBatteryInfo = 4;
inline bool BatteryState::has_firstbatteryinfo() const {
  return this != internal_default_instance() && firstbatteryinfo_ != NULL;
}
inline void BatteryState::clear_firstbatteryinfo() {
  if (GetArenaNoVirtual() == NULL && firstbatteryinfo_ != NULL) {
    delete firstbatteryinfo_;
  }
  firstbatteryinfo_ = NULL;
}
inline const ::BatteryStateInfo& BatteryState::_internal_firstbatteryinfo() const {
  return *firstbatteryinfo_;
}
inline const ::BatteryStateInfo& BatteryState::firstbatteryinfo() const {
  const ::BatteryStateInfo* p = firstbatteryinfo_;
  // @@protoc_insertion_point(field_get:BatteryState.firstBatteryInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::BatteryStateInfo*>(
      &::_BatteryStateInfo_default_instance_);
}
inline ::BatteryStateInfo* BatteryState::release_firstbatteryinfo() {
  // @@protoc_insertion_point(field_release:BatteryState.firstBatteryInfo)
  
  ::BatteryStateInfo* temp = firstbatteryinfo_;
  firstbatteryinfo_ = NULL;
  return temp;
}
inline ::BatteryStateInfo* BatteryState::mutable_firstbatteryinfo() {
  
  if (firstbatteryinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::BatteryStateInfo>(GetArenaNoVirtual());
    firstbatteryinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BatteryState.firstBatteryInfo)
  return firstbatteryinfo_;
}
inline void BatteryState::set_allocated_firstbatteryinfo(::BatteryStateInfo* firstbatteryinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete firstbatteryinfo_;
  }
  if (firstbatteryinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      firstbatteryinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, firstbatteryinfo, submessage_arena);
    }
    
  } else {
    
  }
  firstbatteryinfo_ = firstbatteryinfo;
  // @@protoc_insertion_point(field_set_allocated:BatteryState.firstBatteryInfo)
}

// .BatteryStateInfo secondBatteryInfo = 5;
inline bool BatteryState::has_secondbatteryinfo() const {
  return this != internal_default_instance() && secondbatteryinfo_ != NULL;
}
inline void BatteryState::clear_secondbatteryinfo() {
  if (GetArenaNoVirtual() == NULL && secondbatteryinfo_ != NULL) {
    delete secondbatteryinfo_;
  }
  secondbatteryinfo_ = NULL;
}
inline const ::BatteryStateInfo& BatteryState::_internal_secondbatteryinfo() const {
  return *secondbatteryinfo_;
}
inline const ::BatteryStateInfo& BatteryState::secondbatteryinfo() const {
  const ::BatteryStateInfo* p = secondbatteryinfo_;
  // @@protoc_insertion_point(field_get:BatteryState.secondBatteryInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::BatteryStateInfo*>(
      &::_BatteryStateInfo_default_instance_);
}
inline ::BatteryStateInfo* BatteryState::release_secondbatteryinfo() {
  // @@protoc_insertion_point(field_release:BatteryState.secondBatteryInfo)
  
  ::BatteryStateInfo* temp = secondbatteryinfo_;
  secondbatteryinfo_ = NULL;
  return temp;
}
inline ::BatteryStateInfo* BatteryState::mutable_secondbatteryinfo() {
  
  if (secondbatteryinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::BatteryStateInfo>(GetArenaNoVirtual());
    secondbatteryinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BatteryState.secondBatteryInfo)
  return secondbatteryinfo_;
}
inline void BatteryState::set_allocated_secondbatteryinfo(::BatteryStateInfo* secondbatteryinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete secondbatteryinfo_;
  }
  if (secondbatteryinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      secondbatteryinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, secondbatteryinfo, submessage_arena);
    }
    
  } else {
    
  }
  secondbatteryinfo_ = secondbatteryinfo;
  // @@protoc_insertion_point(field_set_allocated:BatteryState.secondBatteryInfo)
}

// -------------------------------------------------------------------

// BatteryStateInfo

// uint32 isBatteryEmbed = 1;
inline void BatteryStateInfo::clear_isbatteryembed() {
  isbatteryembed_ = 0u;
}
inline ::google::protobuf::uint32 BatteryStateInfo::isbatteryembed() const {
  // @@protoc_insertion_point(field_get:BatteryStateInfo.isBatteryEmbed)
  return isbatteryembed_;
}
inline void BatteryStateInfo::set_isbatteryembed(::google::protobuf::uint32 value) {
  
  isbatteryembed_ = value;
  // @@protoc_insertion_point(field_set:BatteryStateInfo.isBatteryEmbed)
}

// uint32 batteryCapacityPercent = 2;
inline void BatteryStateInfo::clear_batterycapacitypercent() {
  batterycapacitypercent_ = 0u;
}
inline ::google::protobuf::uint32 BatteryStateInfo::batterycapacitypercent() const {
  // @@protoc_insertion_point(field_get:BatteryStateInfo.batteryCapacityPercent)
  return batterycapacitypercent_;
}
inline void BatteryStateInfo::set_batterycapacitypercent(::google::protobuf::uint32 value) {
  
  batterycapacitypercent_ = value;
  // @@protoc_insertion_point(field_set:BatteryStateInfo.batteryCapacityPercent)
}

// int32 currentVoltage = 3;
inline void BatteryStateInfo::clear_currentvoltage() {
  currentvoltage_ = 0;
}
inline ::google::protobuf::int32 BatteryStateInfo::currentvoltage() const {
  // @@protoc_insertion_point(field_get:BatteryStateInfo.currentVoltage)
  return currentvoltage_;
}
inline void BatteryStateInfo::set_currentvoltage(::google::protobuf::int32 value) {
  
  currentvoltage_ = value;
  // @@protoc_insertion_point(field_set:BatteryStateInfo.currentVoltage)
}

// int32 currentElectric = 4;
inline void BatteryStateInfo::clear_currentelectric() {
  currentelectric_ = 0;
}
inline ::google::protobuf::int32 BatteryStateInfo::currentelectric() const {
  // @@protoc_insertion_point(field_get:BatteryStateInfo.currentElectric)
  return currentelectric_;
}
inline void BatteryStateInfo::set_currentelectric(::google::protobuf::int32 value) {
  
  currentelectric_ = value;
  // @@protoc_insertion_point(field_set:BatteryStateInfo.currentElectric)
}

// uint32 fullCapacity = 5;
inline void BatteryStateInfo::clear_fullcapacity() {
  fullcapacity_ = 0u;
}
inline ::google::protobuf::uint32 BatteryStateInfo::fullcapacity() const {
  // @@protoc_insertion_point(field_get:BatteryStateInfo.fullCapacity)
  return fullcapacity_;
}
inline void BatteryStateInfo::set_fullcapacity(::google::protobuf::uint32 value) {
  
  fullcapacity_ = value;
  // @@protoc_insertion_point(field_set:BatteryStateInfo.fullCapacity)
}

// uint32 remainedCapacity = 6;
inline void BatteryStateInfo::clear_remainedcapacity() {
  remainedcapacity_ = 0u;
}
inline ::google::protobuf::uint32 BatteryStateInfo::remainedcapacity() const {
  // @@protoc_insertion_point(field_get:BatteryStateInfo.remainedCapacity)
  return remainedcapacity_;
}
inline void BatteryStateInfo::set_remainedcapacity(::google::protobuf::uint32 value) {
  
  remainedcapacity_ = value;
  // @@protoc_insertion_point(field_set:BatteryStateInfo.remainedCapacity)
}

// float batteryTemperature = 7;
inline void BatteryStateInfo::clear_batterytemperature() {
  batterytemperature_ = 0;
}
inline float BatteryStateInfo::batterytemperature() const {
  // @@protoc_insertion_point(field_get:BatteryStateInfo.batteryTemperature)
  return batterytemperature_;
}
inline void BatteryStateInfo::set_batterytemperature(float value) {
  
  batterytemperature_ = value;
  // @@protoc_insertion_point(field_set:BatteryStateInfo.batteryTemperature)
}

// uint32 cellCount = 8;
inline void BatteryStateInfo::clear_cellcount() {
  cellcount_ = 0u;
}
inline ::google::protobuf::uint32 BatteryStateInfo::cellcount() const {
  // @@protoc_insertion_point(field_get:BatteryStateInfo.cellCount)
  return cellcount_;
}
inline void BatteryStateInfo::set_cellcount(::google::protobuf::uint32 value) {
  
  cellcount_ = value;
  // @@protoc_insertion_point(field_set:BatteryStateInfo.cellCount)
}

// uint32 batSOHState = 9;
inline void BatteryStateInfo::clear_batsohstate() {
  batsohstate_ = 0u;
}
inline ::google::protobuf::uint32 BatteryStateInfo::batsohstate() const {
  // @@protoc_insertion_point(field_get:BatteryStateInfo.batSOHState)
  return batsohstate_;
}
inline void BatteryStateInfo::set_batsohstate(::google::protobuf::uint32 value) {
  
  batsohstate_ = value;
  // @@protoc_insertion_point(field_set:BatteryStateInfo.batSOHState)
}

// uint32 sop = 10;
inline void BatteryStateInfo::clear_sop() {
  sop_ = 0u;
}
inline ::google::protobuf::uint32 BatteryStateInfo::sop() const {
  // @@protoc_insertion_point(field_get:BatteryStateInfo.sop)
  return sop_;
}
inline void BatteryStateInfo::set_sop(::google::protobuf::uint32 value) {
  
  sop_ = value;
  // @@protoc_insertion_point(field_set:BatteryStateInfo.sop)
}

// uint32 heatState = 11;
inline void BatteryStateInfo::clear_heatstate() {
  heatstate_ = 0u;
}
inline ::google::protobuf::uint32 BatteryStateInfo::heatstate() const {
  // @@protoc_insertion_point(field_get:BatteryStateInfo.heatState)
  return heatstate_;
}
inline void BatteryStateInfo::set_heatstate(::google::protobuf::uint32 value) {
  
  heatstate_ = value;
  // @@protoc_insertion_point(field_set:BatteryStateInfo.heatState)
}

// uint32 socState = 12;
inline void BatteryStateInfo::clear_socstate() {
  socstate_ = 0u;
}
inline ::google::protobuf::uint32 BatteryStateInfo::socstate() const {
  // @@protoc_insertion_point(field_get:BatteryStateInfo.socState)
  return socstate_;
}
inline void BatteryStateInfo::set_socstate(::google::protobuf::uint32 value) {
  
  socstate_ = value;
  // @@protoc_insertion_point(field_set:BatteryStateInfo.socState)
}

// uint32 selfCheckError = 13;
inline void BatteryStateInfo::clear_selfcheckerror() {
  selfcheckerror_ = 0u;
}
inline ::google::protobuf::uint32 BatteryStateInfo::selfcheckerror() const {
  // @@protoc_insertion_point(field_get:BatteryStateInfo.selfCheckError)
  return selfcheckerror_;
}
inline void BatteryStateInfo::set_selfcheckerror(::google::protobuf::uint32 value) {
  
  selfcheckerror_ = value;
  // @@protoc_insertion_point(field_set:BatteryStateInfo.selfCheckError)
}

// -------------------------------------------------------------------

// PtzState

// float pitch = 1;
inline void PtzState::clear_pitch() {
  pitch_ = 0;
}
inline float PtzState::pitch() const {
  // @@protoc_insertion_point(field_get:PtzState.pitch)
  return pitch_;
}
inline void PtzState::set_pitch(float value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:PtzState.pitch)
}

// float roll = 2;
inline void PtzState::clear_roll() {
  roll_ = 0;
}
inline float PtzState::roll() const {
  // @@protoc_insertion_point(field_get:PtzState.roll)
  return roll_;
}
inline void PtzState::set_roll(float value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:PtzState.roll)
}

// float yaw = 3;
inline void PtzState::clear_yaw() {
  yaw_ = 0;
}
inline float PtzState::yaw() const {
  // @@protoc_insertion_point(field_get:PtzState.yaw)
  return yaw_;
}
inline void PtzState::set_yaw(float value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:PtzState.yaw)
}

// uint32 gimbalMode = 4;
inline void PtzState::clear_gimbalmode() {
  gimbalmode_ = 0u;
}
inline ::google::protobuf::uint32 PtzState::gimbalmode() const {
  // @@protoc_insertion_point(field_get:PtzState.gimbalMode)
  return gimbalmode_;
}
inline void PtzState::set_gimbalmode(::google::protobuf::uint32 value) {
  
  gimbalmode_ = value;
  // @@protoc_insertion_point(field_set:PtzState.gimbalMode)
}

// -------------------------------------------------------------------

// CameraState

// uint32 mode = 1;
inline void CameraState::clear_mode() {
  mode_ = 0u;
}
inline ::google::protobuf::uint32 CameraState::mode() const {
  // @@protoc_insertion_point(field_get:CameraState.mode)
  return mode_;
}
inline void CameraState::set_mode(::google::protobuf::uint32 value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:CameraState.mode)
}

// uint32 isRecording = 2;
inline void CameraState::clear_isrecording() {
  isrecording_ = 0u;
}
inline ::google::protobuf::uint32 CameraState::isrecording() const {
  // @@protoc_insertion_point(field_get:CameraState.isRecording)
  return isrecording_;
}
inline void CameraState::set_isrecording(::google::protobuf::uint32 value) {
  
  isrecording_ = value;
  // @@protoc_insertion_point(field_set:CameraState.isRecording)
}

// uint32 recordDuration = 3;
inline void CameraState::clear_recordduration() {
  recordduration_ = 0u;
}
inline ::google::protobuf::uint32 CameraState::recordduration() const {
  // @@protoc_insertion_point(field_get:CameraState.recordDuration)
  return recordduration_;
}
inline void CameraState::set_recordduration(::google::protobuf::uint32 value) {
  
  recordduration_ = value;
  // @@protoc_insertion_point(field_set:CameraState.recordDuration)
}

// uint32 source = 4;
inline void CameraState::clear_source() {
  source_ = 0u;
}
inline ::google::protobuf::uint32 CameraState::source() const {
  // @@protoc_insertion_point(field_get:CameraState.source)
  return source_;
}
inline void CameraState::set_source(::google::protobuf::uint32 value) {
  
  source_ = value;
  // @@protoc_insertion_point(field_set:CameraState.source)
}

// uint32 camera = 5;
inline void CameraState::clear_camera() {
  camera_ = 0u;
}
inline ::google::protobuf::uint32 CameraState::camera() const {
  // @@protoc_insertion_point(field_get:CameraState.camera)
  return camera_;
}
inline void CameraState::set_camera(::google::protobuf::uint32 value) {
  
  camera_ = value;
  // @@protoc_insertion_point(field_set:CameraState.camera)
}

// float zoomfactor = 6;
inline void CameraState::clear_zoomfactor() {
  zoomfactor_ = 0;
}
inline float CameraState::zoomfactor() const {
  // @@protoc_insertion_point(field_get:CameraState.zoomfactor)
  return zoomfactor_;
}
inline void CameraState::set_zoomfactor(float value) {
  
  zoomfactor_ = value;
  // @@protoc_insertion_point(field_set:CameraState.zoomfactor)
}

// uint32 width = 7;
inline void CameraState::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 CameraState::width() const {
  // @@protoc_insertion_point(field_get:CameraState.width)
  return width_;
}
inline void CameraState::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:CameraState.width)
}

// uint32 height = 8;
inline void CameraState::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 CameraState::height() const {
  // @@protoc_insertion_point(field_get:CameraState.height)
  return height_;
}
inline void CameraState::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:CameraState.height)
}

// uint32 frameRate = 9;
inline void CameraState::clear_framerate() {
  framerate_ = 0u;
}
inline ::google::protobuf::uint32 CameraState::framerate() const {
  // @@protoc_insertion_point(field_get:CameraState.frameRate)
  return framerate_;
}
inline void CameraState::set_framerate(::google::protobuf::uint32 value) {
  
  framerate_ = value;
  // @@protoc_insertion_point(field_set:CameraState.frameRate)
}

// uint32 bitstream = 10;
inline void CameraState::clear_bitstream() {
  bitstream_ = 0u;
}
inline ::google::protobuf::uint32 CameraState::bitstream() const {
  // @@protoc_insertion_point(field_get:CameraState.bitstream)
  return bitstream_;
}
inline void CameraState::set_bitstream(::google::protobuf::uint32 value) {
  
  bitstream_ = value;
  // @@protoc_insertion_point(field_set:CameraState.bitstream)
}

// uint32 pointThermometrying = 11;
inline void CameraState::clear_pointthermometrying() {
  pointthermometrying_ = 0u;
}
inline ::google::protobuf::uint32 CameraState::pointthermometrying() const {
  // @@protoc_insertion_point(field_get:CameraState.pointThermometrying)
  return pointthermometrying_;
}
inline void CameraState::set_pointthermometrying(::google::protobuf::uint32 value) {
  
  pointthermometrying_ = value;
  // @@protoc_insertion_point(field_set:CameraState.pointThermometrying)
}

// uint32 areaThermometrying = 12;
inline void CameraState::clear_areathermometrying() {
  areathermometrying_ = 0u;
}
inline ::google::protobuf::uint32 CameraState::areathermometrying() const {
  // @@protoc_insertion_point(field_get:CameraState.areaThermometrying)
  return areathermometrying_;
}
inline void CameraState::set_areathermometrying(::google::protobuf::uint32 value) {
  
  areathermometrying_ = value;
  // @@protoc_insertion_point(field_set:CameraState.areaThermometrying)
}

// uint32 laserRanging = 13;
inline void CameraState::clear_laserranging() {
  laserranging_ = 0u;
}
inline ::google::protobuf::uint32 CameraState::laserranging() const {
  // @@protoc_insertion_point(field_get:CameraState.laserRanging)
  return laserranging_;
}
inline void CameraState::set_laserranging(::google::protobuf::uint32 value) {
  
  laserranging_ = value;
  // @@protoc_insertion_point(field_set:CameraState.laserRanging)
}

// float storePercent = 14;
inline void CameraState::clear_storepercent() {
  storepercent_ = 0;
}
inline float CameraState::storepercent() const {
  // @@protoc_insertion_point(field_get:CameraState.storePercent)
  return storepercent_;
}
inline void CameraState::set_storepercent(float value) {
  
  storepercent_ = value;
  // @@protoc_insertion_point(field_set:CameraState.storePercent)
}

// uint32 totalPhoto = 15;
inline void CameraState::clear_totalphoto() {
  totalphoto_ = 0u;
}
inline ::google::protobuf::uint32 CameraState::totalphoto() const {
  // @@protoc_insertion_point(field_get:CameraState.totalPhoto)
  return totalphoto_;
}
inline void CameraState::set_totalphoto(::google::protobuf::uint32 value) {
  
  totalphoto_ = value;
  // @@protoc_insertion_point(field_set:CameraState.totalPhoto)
}

// uint32 remainedPhoto = 16;
inline void CameraState::clear_remainedphoto() {
  remainedphoto_ = 0u;
}
inline ::google::protobuf::uint32 CameraState::remainedphoto() const {
  // @@protoc_insertion_point(field_get:CameraState.remainedPhoto)
  return remainedphoto_;
}
inline void CameraState::set_remainedphoto(::google::protobuf::uint32 value) {
  
  remainedphoto_ = value;
  // @@protoc_insertion_point(field_set:CameraState.remainedPhoto)
}

// uint32 sendPhotoOverFlag = 17;
inline void CameraState::clear_sendphotooverflag() {
  sendphotooverflag_ = 0u;
}
inline ::google::protobuf::uint32 CameraState::sendphotooverflag() const {
  // @@protoc_insertion_point(field_get:CameraState.sendPhotoOverFlag)
  return sendphotooverflag_;
}
inline void CameraState::set_sendphotooverflag(::google::protobuf::uint32 value) {
  
  sendphotooverflag_ = value;
  // @@protoc_insertion_point(field_set:CameraState.sendPhotoOverFlag)
}

// -------------------------------------------------------------------

// MissionState

// uint32 isPause = 1;
inline void MissionState::clear_ispause() {
  ispause_ = 0u;
}
inline ::google::protobuf::uint32 MissionState::ispause() const {
  // @@protoc_insertion_point(field_get:MissionState.isPause)
  return ispause_;
}
inline void MissionState::set_ispause(::google::protobuf::uint32 value) {
  
  ispause_ = value;
  // @@protoc_insertion_point(field_set:MissionState.isPause)
}

// uint32 targetWaypointIndex = 2;
inline void MissionState::clear_targetwaypointindex() {
  targetwaypointindex_ = 0u;
}
inline ::google::protobuf::uint32 MissionState::targetwaypointindex() const {
  // @@protoc_insertion_point(field_get:MissionState.targetWaypointIndex)
  return targetwaypointindex_;
}
inline void MissionState::set_targetwaypointindex(::google::protobuf::uint32 value) {
  
  targetwaypointindex_ = value;
  // @@protoc_insertion_point(field_set:MissionState.targetWaypointIndex)
}

// uint32 isWaypointFinished = 3;
inline void MissionState::clear_iswaypointfinished() {
  iswaypointfinished_ = 0u;
}
inline ::google::protobuf::uint32 MissionState::iswaypointfinished() const {
  // @@protoc_insertion_point(field_get:MissionState.isWaypointFinished)
  return iswaypointfinished_;
}
inline void MissionState::set_iswaypointfinished(::google::protobuf::uint32 value) {
  
  iswaypointfinished_ = value;
  // @@protoc_insertion_point(field_set:MissionState.isWaypointFinished)
}

// uint32 pushVideo = 4;
inline void MissionState::clear_pushvideo() {
  pushvideo_ = 0u;
}
inline ::google::protobuf::uint32 MissionState::pushvideo() const {
  // @@protoc_insertion_point(field_get:MissionState.pushVideo)
  return pushvideo_;
}
inline void MissionState::set_pushvideo(::google::protobuf::uint32 value) {
  
  pushvideo_ = value;
  // @@protoc_insertion_point(field_set:MissionState.pushVideo)
}

// uint32 lock4g = 5;
inline void MissionState::clear_lock4g() {
  lock4g_ = 0u;
}
inline ::google::protobuf::uint32 MissionState::lock4g() const {
  // @@protoc_insertion_point(field_get:MissionState.lock4g)
  return lock4g_;
}
inline void MissionState::set_lock4g(::google::protobuf::uint32 value) {
  
  lock4g_ = value;
  // @@protoc_insertion_point(field_set:MissionState.lock4g)
}

// uint32 boxModel = 6;
inline void MissionState::clear_boxmodel() {
  boxmodel_ = 0u;
}
inline ::google::protobuf::uint32 MissionState::boxmodel() const {
  // @@protoc_insertion_point(field_get:MissionState.boxModel)
  return boxmodel_;
}
inline void MissionState::set_boxmodel(::google::protobuf::uint32 value) {
  
  boxmodel_ = value;
  // @@protoc_insertion_point(field_set:MissionState.boxModel)
}

// uint32 mapPlay = 7;
inline void MissionState::clear_mapplay() {
  mapplay_ = 0u;
}
inline ::google::protobuf::uint32 MissionState::mapplay() const {
  // @@protoc_insertion_point(field_get:MissionState.mapPlay)
  return mapplay_;
}
inline void MissionState::set_mapplay(::google::protobuf::uint32 value) {
  
  mapplay_ = value;
  // @@protoc_insertion_point(field_set:MissionState.mapPlay)
}

// uint32 loseAction = 8;
inline void MissionState::clear_loseaction() {
  loseaction_ = 0u;
}
inline ::google::protobuf::uint32 MissionState::loseaction() const {
  // @@protoc_insertion_point(field_get:MissionState.loseAction)
  return loseaction_;
}
inline void MissionState::set_loseaction(::google::protobuf::uint32 value) {
  
  loseaction_ = value;
  // @@protoc_insertion_point(field_set:MissionState.loseAction)
}

// uint32 isPointControl = 9;
inline void MissionState::clear_ispointcontrol() {
  ispointcontrol_ = 0u;
}
inline ::google::protobuf::uint32 MissionState::ispointcontrol() const {
  // @@protoc_insertion_point(field_get:MissionState.isPointControl)
  return ispointcontrol_;
}
inline void MissionState::set_ispointcontrol(::google::protobuf::uint32 value) {
  
  ispointcontrol_ = value;
  // @@protoc_insertion_point(field_set:MissionState.isPointControl)
}

// uint32 isUwbLanding = 10;
inline void MissionState::clear_isuwblanding() {
  isuwblanding_ = 0u;
}
inline ::google::protobuf::uint32 MissionState::isuwblanding() const {
  // @@protoc_insertion_point(field_get:MissionState.isUwbLanding)
  return isuwblanding_;
}
inline void MissionState::set_isuwblanding(::google::protobuf::uint32 value) {
  
  isuwblanding_ = value;
  // @@protoc_insertion_point(field_set:MissionState.isUwbLanding)
}

// uint32 isPushVideoing = 11;
inline void MissionState::clear_ispushvideoing() {
  ispushvideoing_ = 0u;
}
inline ::google::protobuf::uint32 MissionState::ispushvideoing() const {
  // @@protoc_insertion_point(field_get:MissionState.isPushVideoing)
  return ispushvideoing_;
}
inline void MissionState::set_ispushvideoing(::google::protobuf::uint32 value) {
  
  ispushvideoing_ = value;
  // @@protoc_insertion_point(field_set:MissionState.isPushVideoing)
}

// uint32 isDLanding = 12;
inline void MissionState::clear_isdlanding() {
  isdlanding_ = 0u;
}
inline ::google::protobuf::uint32 MissionState::isdlanding() const {
  // @@protoc_insertion_point(field_get:MissionState.isDLanding)
  return isdlanding_;
}
inline void MissionState::set_isdlanding(::google::protobuf::uint32 value) {
  
  isdlanding_ = value;
  // @@protoc_insertion_point(field_set:MissionState.isDLanding)
}

// uint32 perceptionFlag = 13;
inline void MissionState::clear_perceptionflag() {
  perceptionflag_ = 0u;
}
inline ::google::protobuf::uint32 MissionState::perceptionflag() const {
  // @@protoc_insertion_point(field_get:MissionState.perceptionFlag)
  return perceptionflag_;
}
inline void MissionState::set_perceptionflag(::google::protobuf::uint32 value) {
  
  perceptionflag_ = value;
  // @@protoc_insertion_point(field_set:MissionState.perceptionFlag)
}

// uint32 isPositionControl = 14;
inline void MissionState::clear_ispositioncontrol() {
  ispositioncontrol_ = 0u;
}
inline ::google::protobuf::uint32 MissionState::ispositioncontrol() const {
  // @@protoc_insertion_point(field_get:MissionState.isPositionControl)
  return ispositioncontrol_;
}
inline void MissionState::set_ispositioncontrol(::google::protobuf::uint32 value) {
  
  ispositioncontrol_ = value;
  // @@protoc_insertion_point(field_set:MissionState.isPositionControl)
}

// uint32 sendImgRtp = 15;
inline void MissionState::clear_sendimgrtp() {
  sendimgrtp_ = 0u;
}
inline ::google::protobuf::uint32 MissionState::sendimgrtp() const {
  // @@protoc_insertion_point(field_get:MissionState.sendImgRtp)
  return sendimgrtp_;
}
inline void MissionState::set_sendimgrtp(::google::protobuf::uint32 value) {
  
  sendimgrtp_ = value;
  // @@protoc_insertion_point(field_set:MissionState.sendImgRtp)
}

// .BreakPoint breakPoint = 16;
inline bool MissionState::has_breakpoint() const {
  return this != internal_default_instance() && breakpoint_ != NULL;
}
inline void MissionState::clear_breakpoint() {
  if (GetArenaNoVirtual() == NULL && breakpoint_ != NULL) {
    delete breakpoint_;
  }
  breakpoint_ = NULL;
}
inline const ::BreakPoint& MissionState::_internal_breakpoint() const {
  return *breakpoint_;
}
inline const ::BreakPoint& MissionState::breakpoint() const {
  const ::BreakPoint* p = breakpoint_;
  // @@protoc_insertion_point(field_get:MissionState.breakPoint)
  return p != NULL ? *p : *reinterpret_cast<const ::BreakPoint*>(
      &::_BreakPoint_default_instance_);
}
inline ::BreakPoint* MissionState::release_breakpoint() {
  // @@protoc_insertion_point(field_release:MissionState.breakPoint)
  
  ::BreakPoint* temp = breakpoint_;
  breakpoint_ = NULL;
  return temp;
}
inline ::BreakPoint* MissionState::mutable_breakpoint() {
  
  if (breakpoint_ == NULL) {
    auto* p = CreateMaybeMessage<::BreakPoint>(GetArenaNoVirtual());
    breakpoint_ = p;
  }
  // @@protoc_insertion_point(field_mutable:MissionState.breakPoint)
  return breakpoint_;
}
inline void MissionState::set_allocated_breakpoint(::BreakPoint* breakpoint) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete breakpoint_;
  }
  if (breakpoint) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      breakpoint = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, breakpoint, submessage_arena);
    }
    
  } else {
    
  }
  breakpoint_ = breakpoint;
  // @@protoc_insertion_point(field_set_allocated:MissionState.breakPoint)
}

// -------------------------------------------------------------------

// BreakPoint

// uint32 status = 1;
inline void BreakPoint::clear_status() {
  status_ = 0u;
}
inline ::google::protobuf::uint32 BreakPoint::status() const {
  // @@protoc_insertion_point(field_get:BreakPoint.status)
  return status_;
}
inline void BreakPoint::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:BreakPoint.status)
}

// uint32 point = 2;
inline void BreakPoint::clear_point() {
  point_ = 0u;
}
inline ::google::protobuf::uint32 BreakPoint::point() const {
  // @@protoc_insertion_point(field_get:BreakPoint.point)
  return point_;
}
inline void BreakPoint::set_point(::google::protobuf::uint32 value) {
  
  point_ = value;
  // @@protoc_insertion_point(field_set:BreakPoint.point)
}

// double lng = 3;
inline void BreakPoint::clear_lng() {
  lng_ = 0;
}
inline double BreakPoint::lng() const {
  // @@protoc_insertion_point(field_get:BreakPoint.lng)
  return lng_;
}
inline void BreakPoint::set_lng(double value) {
  
  lng_ = value;
  // @@protoc_insertion_point(field_set:BreakPoint.lng)
}

// double lat = 4;
inline void BreakPoint::clear_lat() {
  lat_ = 0;
}
inline double BreakPoint::lat() const {
  // @@protoc_insertion_point(field_get:BreakPoint.lat)
  return lat_;
}
inline void BreakPoint::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:BreakPoint.lat)
}

// float height = 5;
inline void BreakPoint::clear_height() {
  height_ = 0;
}
inline float BreakPoint::height() const {
  // @@protoc_insertion_point(field_get:BreakPoint.height)
  return height_;
}
inline void BreakPoint::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:BreakPoint.height)
}

// uint64 taskId = 6;
inline void BreakPoint::clear_taskid() {
  taskid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 BreakPoint::taskid() const {
  // @@protoc_insertion_point(field_get:BreakPoint.taskId)
  return taskid_;
}
inline void BreakPoint::set_taskid(::google::protobuf::uint64 value) {
  
  taskid_ = value;
  // @@protoc_insertion_point(field_set:BreakPoint.taskId)
}

// -------------------------------------------------------------------

// AvoidanceData

// uint32 downHealth = 1;
inline void AvoidanceData::clear_downhealth() {
  downhealth_ = 0u;
}
inline ::google::protobuf::uint32 AvoidanceData::downhealth() const {
  // @@protoc_insertion_point(field_get:AvoidanceData.downHealth)
  return downhealth_;
}
inline void AvoidanceData::set_downhealth(::google::protobuf::uint32 value) {
  
  downhealth_ = value;
  // @@protoc_insertion_point(field_set:AvoidanceData.downHealth)
}

// float down = 2;
inline void AvoidanceData::clear_down() {
  down_ = 0;
}
inline float AvoidanceData::down() const {
  // @@protoc_insertion_point(field_get:AvoidanceData.down)
  return down_;
}
inline void AvoidanceData::set_down(float value) {
  
  down_ = value;
  // @@protoc_insertion_point(field_set:AvoidanceData.down)
}

// uint32 frontHealth = 3;
inline void AvoidanceData::clear_fronthealth() {
  fronthealth_ = 0u;
}
inline ::google::protobuf::uint32 AvoidanceData::fronthealth() const {
  // @@protoc_insertion_point(field_get:AvoidanceData.frontHealth)
  return fronthealth_;
}
inline void AvoidanceData::set_fronthealth(::google::protobuf::uint32 value) {
  
  fronthealth_ = value;
  // @@protoc_insertion_point(field_set:AvoidanceData.frontHealth)
}

// float front = 4;
inline void AvoidanceData::clear_front() {
  front_ = 0;
}
inline float AvoidanceData::front() const {
  // @@protoc_insertion_point(field_get:AvoidanceData.front)
  return front_;
}
inline void AvoidanceData::set_front(float value) {
  
  front_ = value;
  // @@protoc_insertion_point(field_set:AvoidanceData.front)
}

// uint32 rightHealth = 5;
inline void AvoidanceData::clear_righthealth() {
  righthealth_ = 0u;
}
inline ::google::protobuf::uint32 AvoidanceData::righthealth() const {
  // @@protoc_insertion_point(field_get:AvoidanceData.rightHealth)
  return righthealth_;
}
inline void AvoidanceData::set_righthealth(::google::protobuf::uint32 value) {
  
  righthealth_ = value;
  // @@protoc_insertion_point(field_set:AvoidanceData.rightHealth)
}

// float right = 6;
inline void AvoidanceData::clear_right() {
  right_ = 0;
}
inline float AvoidanceData::right() const {
  // @@protoc_insertion_point(field_get:AvoidanceData.right)
  return right_;
}
inline void AvoidanceData::set_right(float value) {
  
  right_ = value;
  // @@protoc_insertion_point(field_set:AvoidanceData.right)
}

// uint32 backHealth = 7;
inline void AvoidanceData::clear_backhealth() {
  backhealth_ = 0u;
}
inline ::google::protobuf::uint32 AvoidanceData::backhealth() const {
  // @@protoc_insertion_point(field_get:AvoidanceData.backHealth)
  return backhealth_;
}
inline void AvoidanceData::set_backhealth(::google::protobuf::uint32 value) {
  
  backhealth_ = value;
  // @@protoc_insertion_point(field_set:AvoidanceData.backHealth)
}

// float back = 8;
inline void AvoidanceData::clear_back() {
  back_ = 0;
}
inline float AvoidanceData::back() const {
  // @@protoc_insertion_point(field_get:AvoidanceData.back)
  return back_;
}
inline void AvoidanceData::set_back(float value) {
  
  back_ = value;
  // @@protoc_insertion_point(field_set:AvoidanceData.back)
}

// uint32 leftHealth = 9;
inline void AvoidanceData::clear_lefthealth() {
  lefthealth_ = 0u;
}
inline ::google::protobuf::uint32 AvoidanceData::lefthealth() const {
  // @@protoc_insertion_point(field_get:AvoidanceData.leftHealth)
  return lefthealth_;
}
inline void AvoidanceData::set_lefthealth(::google::protobuf::uint32 value) {
  
  lefthealth_ = value;
  // @@protoc_insertion_point(field_set:AvoidanceData.leftHealth)
}

// float left = 10;
inline void AvoidanceData::clear_left() {
  left_ = 0;
}
inline float AvoidanceData::left() const {
  // @@protoc_insertion_point(field_get:AvoidanceData.left)
  return left_;
}
inline void AvoidanceData::set_left(float value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:AvoidanceData.left)
}

// uint32 upHealth = 11;
inline void AvoidanceData::clear_uphealth() {
  uphealth_ = 0u;
}
inline ::google::protobuf::uint32 AvoidanceData::uphealth() const {
  // @@protoc_insertion_point(field_get:AvoidanceData.upHealth)
  return uphealth_;
}
inline void AvoidanceData::set_uphealth(::google::protobuf::uint32 value) {
  
  uphealth_ = value;
  // @@protoc_insertion_point(field_set:AvoidanceData.upHealth)
}

// float up = 12;
inline void AvoidanceData::clear_up() {
  up_ = 0;
}
inline float AvoidanceData::up() const {
  // @@protoc_insertion_point(field_get:AvoidanceData.up)
  return up_;
}
inline void AvoidanceData::set_up(float value) {
  
  up_ = value;
  // @@protoc_insertion_point(field_set:AvoidanceData.up)
}

// uint32 avoidanceEnableStatusDown = 13;
inline void AvoidanceData::clear_avoidanceenablestatusdown() {
  avoidanceenablestatusdown_ = 0u;
}
inline ::google::protobuf::uint32 AvoidanceData::avoidanceenablestatusdown() const {
  // @@protoc_insertion_point(field_get:AvoidanceData.avoidanceEnableStatusDown)
  return avoidanceenablestatusdown_;
}
inline void AvoidanceData::set_avoidanceenablestatusdown(::google::protobuf::uint32 value) {
  
  avoidanceenablestatusdown_ = value;
  // @@protoc_insertion_point(field_set:AvoidanceData.avoidanceEnableStatusDown)
}

// uint32 avoidanceEnableStatusUp = 14;
inline void AvoidanceData::clear_avoidanceenablestatusup() {
  avoidanceenablestatusup_ = 0u;
}
inline ::google::protobuf::uint32 AvoidanceData::avoidanceenablestatusup() const {
  // @@protoc_insertion_point(field_get:AvoidanceData.avoidanceEnableStatusUp)
  return avoidanceenablestatusup_;
}
inline void AvoidanceData::set_avoidanceenablestatusup(::google::protobuf::uint32 value) {
  
  avoidanceenablestatusup_ = value;
  // @@protoc_insertion_point(field_set:AvoidanceData.avoidanceEnableStatusUp)
}

// uint32 avoidanceEnableStatusHorizontal = 15;
inline void AvoidanceData::clear_avoidanceenablestatushorizontal() {
  avoidanceenablestatushorizontal_ = 0u;
}
inline ::google::protobuf::uint32 AvoidanceData::avoidanceenablestatushorizontal() const {
  // @@protoc_insertion_point(field_get:AvoidanceData.avoidanceEnableStatusHorizontal)
  return avoidanceenablestatushorizontal_;
}
inline void AvoidanceData::set_avoidanceenablestatushorizontal(::google::protobuf::uint32 value) {
  
  avoidanceenablestatushorizontal_ = value;
  // @@protoc_insertion_point(field_set:AvoidanceData.avoidanceEnableStatusHorizontal)
}

// -------------------------------------------------------------------

// HmsAlarmData

// uint32 alarmId = 1;
inline void HmsAlarmData::clear_alarmid() {
  alarmid_ = 0u;
}
inline ::google::protobuf::uint32 HmsAlarmData::alarmid() const {
  // @@protoc_insertion_point(field_get:HmsAlarmData.alarmId)
  return alarmid_;
}
inline void HmsAlarmData::set_alarmid(::google::protobuf::uint32 value) {
  
  alarmid_ = value;
  // @@protoc_insertion_point(field_set:HmsAlarmData.alarmId)
}

// uint32 reportLevel = 2;
inline void HmsAlarmData::clear_reportlevel() {
  reportlevel_ = 0u;
}
inline ::google::protobuf::uint32 HmsAlarmData::reportlevel() const {
  // @@protoc_insertion_point(field_get:HmsAlarmData.reportLevel)
  return reportlevel_;
}
inline void HmsAlarmData::set_reportlevel(::google::protobuf::uint32 value) {
  
  reportlevel_ = value;
  // @@protoc_insertion_point(field_set:HmsAlarmData.reportLevel)
}

// string alarmMssInfo = 3;
inline void HmsAlarmData::clear_alarmmssinfo() {
  alarmmssinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HmsAlarmData::alarmmssinfo() const {
  // @@protoc_insertion_point(field_get:HmsAlarmData.alarmMssInfo)
  return alarmmssinfo_.GetNoArena();
}
inline void HmsAlarmData::set_alarmmssinfo(const ::std::string& value) {
  
  alarmmssinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HmsAlarmData.alarmMssInfo)
}
#if LANG_CXX11
inline void HmsAlarmData::set_alarmmssinfo(::std::string&& value) {
  
  alarmmssinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HmsAlarmData.alarmMssInfo)
}
#endif
inline void HmsAlarmData::set_alarmmssinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alarmmssinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HmsAlarmData.alarmMssInfo)
}
inline void HmsAlarmData::set_alarmmssinfo(const char* value, size_t size) {
  
  alarmmssinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HmsAlarmData.alarmMssInfo)
}
inline ::std::string* HmsAlarmData::mutable_alarmmssinfo() {
  
  // @@protoc_insertion_point(field_mutable:HmsAlarmData.alarmMssInfo)
  return alarmmssinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HmsAlarmData::release_alarmmssinfo() {
  // @@protoc_insertion_point(field_release:HmsAlarmData.alarmMssInfo)
  
  return alarmmssinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HmsAlarmData::set_allocated_alarmmssinfo(::std::string* alarmmssinfo) {
  if (alarmmssinfo != NULL) {
    
  } else {
    
  }
  alarmmssinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alarmmssinfo);
  // @@protoc_insertion_point(field_set_allocated:HmsAlarmData.alarmMssInfo)
}

// -------------------------------------------------------------------

// UavStateList

// repeated .UavState uavStates = 1;
inline int UavStateList::uavstates_size() const {
  return uavstates_.size();
}
inline void UavStateList::clear_uavstates() {
  uavstates_.Clear();
}
inline ::UavState* UavStateList::mutable_uavstates(int index) {
  // @@protoc_insertion_point(field_mutable:UavStateList.uavStates)
  return uavstates_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::UavState >*
UavStateList::mutable_uavstates() {
  // @@protoc_insertion_point(field_mutable_list:UavStateList.uavStates)
  return &uavstates_;
}
inline const ::UavState& UavStateList::uavstates(int index) const {
  // @@protoc_insertion_point(field_get:UavStateList.uavStates)
  return uavstates_.Get(index);
}
inline ::UavState* UavStateList::add_uavstates() {
  // @@protoc_insertion_point(field_add:UavStateList.uavStates)
  return uavstates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UavState >&
UavStateList::uavstates() const {
  // @@protoc_insertion_point(field_list:UavStateList.uavStates)
  return uavstates_;
}

// -------------------------------------------------------------------

// PlanLineData

// uint32 finishedAction = 1;
inline void PlanLineData::clear_finishedaction() {
  finishedaction_ = 0u;
}
inline ::google::protobuf::uint32 PlanLineData::finishedaction() const {
  // @@protoc_insertion_point(field_get:PlanLineData.finishedAction)
  return finishedaction_;
}
inline void PlanLineData::set_finishedaction(::google::protobuf::uint32 value) {
  
  finishedaction_ = value;
  // @@protoc_insertion_point(field_set:PlanLineData.finishedAction)
}

// float maxSpeed = 2;
inline void PlanLineData::clear_maxspeed() {
  maxspeed_ = 0;
}
inline float PlanLineData::maxspeed() const {
  // @@protoc_insertion_point(field_get:PlanLineData.maxSpeed)
  return maxspeed_;
}
inline void PlanLineData::set_maxspeed(float value) {
  
  maxspeed_ = value;
  // @@protoc_insertion_point(field_set:PlanLineData.maxSpeed)
}

// float autoSpeed = 3;
inline void PlanLineData::clear_autospeed() {
  autospeed_ = 0;
}
inline float PlanLineData::autospeed() const {
  // @@protoc_insertion_point(field_get:PlanLineData.autoSpeed)
  return autospeed_;
}
inline void PlanLineData::set_autospeed(float value) {
  
  autospeed_ = value;
  // @@protoc_insertion_point(field_set:PlanLineData.autoSpeed)
}

// repeated .PointData points = 4;
inline int PlanLineData::points_size() const {
  return points_.size();
}
inline void PlanLineData::clear_points() {
  points_.Clear();
}
inline ::PointData* PlanLineData::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:PlanLineData.points)
  return points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::PointData >*
PlanLineData::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:PlanLineData.points)
  return &points_;
}
inline const ::PointData& PlanLineData::points(int index) const {
  // @@protoc_insertion_point(field_get:PlanLineData.points)
  return points_.Get(index);
}
inline ::PointData* PlanLineData::add_points() {
  // @@protoc_insertion_point(field_add:PlanLineData.points)
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PointData >&
PlanLineData::points() const {
  // @@protoc_insertion_point(field_list:PlanLineData.points)
  return points_;
}

// uint32 loseAction = 5;
inline void PlanLineData::clear_loseaction() {
  loseaction_ = 0u;
}
inline ::google::protobuf::uint32 PlanLineData::loseaction() const {
  // @@protoc_insertion_point(field_get:PlanLineData.loseAction)
  return loseaction_;
}
inline void PlanLineData::set_loseaction(::google::protobuf::uint32 value) {
  
  loseaction_ = value;
  // @@protoc_insertion_point(field_set:PlanLineData.loseAction)
}

// uint32 homeHeight = 6;
inline void PlanLineData::clear_homeheight() {
  homeheight_ = 0u;
}
inline ::google::protobuf::uint32 PlanLineData::homeheight() const {
  // @@protoc_insertion_point(field_get:PlanLineData.homeHeight)
  return homeheight_;
}
inline void PlanLineData::set_homeheight(::google::protobuf::uint32 value) {
  
  homeheight_ = value;
  // @@protoc_insertion_point(field_set:PlanLineData.homeHeight)
}

// uint32 isSaveEnergyMode = 7;
inline void PlanLineData::clear_issaveenergymode() {
  issaveenergymode_ = 0u;
}
inline ::google::protobuf::uint32 PlanLineData::issaveenergymode() const {
  // @@protoc_insertion_point(field_get:PlanLineData.isSaveEnergyMode)
  return issaveenergymode_;
}
inline void PlanLineData::set_issaveenergymode(::google::protobuf::uint32 value) {
  
  issaveenergymode_ = value;
  // @@protoc_insertion_point(field_set:PlanLineData.isSaveEnergyMode)
}

// .HangarPoint takePoint = 8;
inline bool PlanLineData::has_takepoint() const {
  return this != internal_default_instance() && takepoint_ != NULL;
}
inline void PlanLineData::clear_takepoint() {
  if (GetArenaNoVirtual() == NULL && takepoint_ != NULL) {
    delete takepoint_;
  }
  takepoint_ = NULL;
}
inline const ::HangarPoint& PlanLineData::_internal_takepoint() const {
  return *takepoint_;
}
inline const ::HangarPoint& PlanLineData::takepoint() const {
  const ::HangarPoint* p = takepoint_;
  // @@protoc_insertion_point(field_get:PlanLineData.takePoint)
  return p != NULL ? *p : *reinterpret_cast<const ::HangarPoint*>(
      &::_HangarPoint_default_instance_);
}
inline ::HangarPoint* PlanLineData::release_takepoint() {
  // @@protoc_insertion_point(field_release:PlanLineData.takePoint)
  
  ::HangarPoint* temp = takepoint_;
  takepoint_ = NULL;
  return temp;
}
inline ::HangarPoint* PlanLineData::mutable_takepoint() {
  
  if (takepoint_ == NULL) {
    auto* p = CreateMaybeMessage<::HangarPoint>(GetArenaNoVirtual());
    takepoint_ = p;
  }
  // @@protoc_insertion_point(field_mutable:PlanLineData.takePoint)
  return takepoint_;
}
inline void PlanLineData::set_allocated_takepoint(::HangarPoint* takepoint) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete takepoint_;
  }
  if (takepoint) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      takepoint = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, takepoint, submessage_arena);
    }
    
  } else {
    
  }
  takepoint_ = takepoint;
  // @@protoc_insertion_point(field_set_allocated:PlanLineData.takePoint)
}

// .HangarPoint landPoint = 9;
inline bool PlanLineData::has_landpoint() const {
  return this != internal_default_instance() && landpoint_ != NULL;
}
inline void PlanLineData::clear_landpoint() {
  if (GetArenaNoVirtual() == NULL && landpoint_ != NULL) {
    delete landpoint_;
  }
  landpoint_ = NULL;
}
inline const ::HangarPoint& PlanLineData::_internal_landpoint() const {
  return *landpoint_;
}
inline const ::HangarPoint& PlanLineData::landpoint() const {
  const ::HangarPoint* p = landpoint_;
  // @@protoc_insertion_point(field_get:PlanLineData.landPoint)
  return p != NULL ? *p : *reinterpret_cast<const ::HangarPoint*>(
      &::_HangarPoint_default_instance_);
}
inline ::HangarPoint* PlanLineData::release_landpoint() {
  // @@protoc_insertion_point(field_release:PlanLineData.landPoint)
  
  ::HangarPoint* temp = landpoint_;
  landpoint_ = NULL;
  return temp;
}
inline ::HangarPoint* PlanLineData::mutable_landpoint() {
  
  if (landpoint_ == NULL) {
    auto* p = CreateMaybeMessage<::HangarPoint>(GetArenaNoVirtual());
    landpoint_ = p;
  }
  // @@protoc_insertion_point(field_mutable:PlanLineData.landPoint)
  return landpoint_;
}
inline void PlanLineData::set_allocated_landpoint(::HangarPoint* landpoint) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete landpoint_;
  }
  if (landpoint) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      landpoint = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, landpoint, submessage_arena);
    }
    
  } else {
    
  }
  landpoint_ = landpoint;
  // @@protoc_insertion_point(field_set_allocated:PlanLineData.landPoint)
}

// repeated .PointData interests = 10;
inline int PlanLineData::interests_size() const {
  return interests_.size();
}
inline void PlanLineData::clear_interests() {
  interests_.Clear();
}
inline ::PointData* PlanLineData::mutable_interests(int index) {
  // @@protoc_insertion_point(field_mutable:PlanLineData.interests)
  return interests_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::PointData >*
PlanLineData::mutable_interests() {
  // @@protoc_insertion_point(field_mutable_list:PlanLineData.interests)
  return &interests_;
}
inline const ::PointData& PlanLineData::interests(int index) const {
  // @@protoc_insertion_point(field_get:PlanLineData.interests)
  return interests_.Get(index);
}
inline ::PointData* PlanLineData::add_interests() {
  // @@protoc_insertion_point(field_add:PlanLineData.interests)
  return interests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PointData >&
PlanLineData::interests() const {
  // @@protoc_insertion_point(field_list:PlanLineData.interests)
  return interests_;
}

// .NormalModel normalModel = 11;
inline bool PlanLineData::has_normalmodel() const {
  return this != internal_default_instance() && normalmodel_ != NULL;
}
inline void PlanLineData::clear_normalmodel() {
  if (GetArenaNoVirtual() == NULL && normalmodel_ != NULL) {
    delete normalmodel_;
  }
  normalmodel_ = NULL;
}
inline const ::NormalModel& PlanLineData::_internal_normalmodel() const {
  return *normalmodel_;
}
inline const ::NormalModel& PlanLineData::normalmodel() const {
  const ::NormalModel* p = normalmodel_;
  // @@protoc_insertion_point(field_get:PlanLineData.normalModel)
  return p != NULL ? *p : *reinterpret_cast<const ::NormalModel*>(
      &::_NormalModel_default_instance_);
}
inline ::NormalModel* PlanLineData::release_normalmodel() {
  // @@protoc_insertion_point(field_release:PlanLineData.normalModel)
  
  ::NormalModel* temp = normalmodel_;
  normalmodel_ = NULL;
  return temp;
}
inline ::NormalModel* PlanLineData::mutable_normalmodel() {
  
  if (normalmodel_ == NULL) {
    auto* p = CreateMaybeMessage<::NormalModel>(GetArenaNoVirtual());
    normalmodel_ = p;
  }
  // @@protoc_insertion_point(field_mutable:PlanLineData.normalModel)
  return normalmodel_;
}
inline void PlanLineData::set_allocated_normalmodel(::NormalModel* normalmodel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete normalmodel_;
  }
  if (normalmodel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      normalmodel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, normalmodel, submessage_arena);
    }
    
  } else {
    
  }
  normalmodel_ = normalmodel;
  // @@protoc_insertion_point(field_set_allocated:PlanLineData.normalModel)
}

// .SurroundModel surroundModel = 12;
inline bool PlanLineData::has_surroundmodel() const {
  return this != internal_default_instance() && surroundmodel_ != NULL;
}
inline void PlanLineData::clear_surroundmodel() {
  if (GetArenaNoVirtual() == NULL && surroundmodel_ != NULL) {
    delete surroundmodel_;
  }
  surroundmodel_ = NULL;
}
inline const ::SurroundModel& PlanLineData::_internal_surroundmodel() const {
  return *surroundmodel_;
}
inline const ::SurroundModel& PlanLineData::surroundmodel() const {
  const ::SurroundModel* p = surroundmodel_;
  // @@protoc_insertion_point(field_get:PlanLineData.surroundModel)
  return p != NULL ? *p : *reinterpret_cast<const ::SurroundModel*>(
      &::_SurroundModel_default_instance_);
}
inline ::SurroundModel* PlanLineData::release_surroundmodel() {
  // @@protoc_insertion_point(field_release:PlanLineData.surroundModel)
  
  ::SurroundModel* temp = surroundmodel_;
  surroundmodel_ = NULL;
  return temp;
}
inline ::SurroundModel* PlanLineData::mutable_surroundmodel() {
  
  if (surroundmodel_ == NULL) {
    auto* p = CreateMaybeMessage<::SurroundModel>(GetArenaNoVirtual());
    surroundmodel_ = p;
  }
  // @@protoc_insertion_point(field_mutable:PlanLineData.surroundModel)
  return surroundmodel_;
}
inline void PlanLineData::set_allocated_surroundmodel(::SurroundModel* surroundmodel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete surroundmodel_;
  }
  if (surroundmodel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      surroundmodel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, surroundmodel, submessage_arena);
    }
    
  } else {
    
  }
  surroundmodel_ = surroundmodel;
  // @@protoc_insertion_point(field_set_allocated:PlanLineData.surroundModel)
}

// .PointData takeOffPoint = 13;
inline bool PlanLineData::has_takeoffpoint() const {
  return this != internal_default_instance() && takeoffpoint_ != NULL;
}
inline void PlanLineData::clear_takeoffpoint() {
  if (GetArenaNoVirtual() == NULL && takeoffpoint_ != NULL) {
    delete takeoffpoint_;
  }
  takeoffpoint_ = NULL;
}
inline const ::PointData& PlanLineData::_internal_takeoffpoint() const {
  return *takeoffpoint_;
}
inline const ::PointData& PlanLineData::takeoffpoint() const {
  const ::PointData* p = takeoffpoint_;
  // @@protoc_insertion_point(field_get:PlanLineData.takeOffPoint)
  return p != NULL ? *p : *reinterpret_cast<const ::PointData*>(
      &::_PointData_default_instance_);
}
inline ::PointData* PlanLineData::release_takeoffpoint() {
  // @@protoc_insertion_point(field_release:PlanLineData.takeOffPoint)
  
  ::PointData* temp = takeoffpoint_;
  takeoffpoint_ = NULL;
  return temp;
}
inline ::PointData* PlanLineData::mutable_takeoffpoint() {
  
  if (takeoffpoint_ == NULL) {
    auto* p = CreateMaybeMessage<::PointData>(GetArenaNoVirtual());
    takeoffpoint_ = p;
  }
  // @@protoc_insertion_point(field_mutable:PlanLineData.takeOffPoint)
  return takeoffpoint_;
}
inline void PlanLineData::set_allocated_takeoffpoint(::PointData* takeoffpoint) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete takeoffpoint_;
  }
  if (takeoffpoint) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      takeoffpoint = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, takeoffpoint, submessage_arena);
    }
    
  } else {
    
  }
  takeoffpoint_ = takeoffpoint;
  // @@protoc_insertion_point(field_set_allocated:PlanLineData.takeOffPoint)
}

// uint32 securityHeight = 14;
inline void PlanLineData::clear_securityheight() {
  securityheight_ = 0u;
}
inline ::google::protobuf::uint32 PlanLineData::securityheight() const {
  // @@protoc_insertion_point(field_get:PlanLineData.securityHeight)
  return securityheight_;
}
inline void PlanLineData::set_securityheight(::google::protobuf::uint32 value) {
  
  securityheight_ = value;
  // @@protoc_insertion_point(field_set:PlanLineData.securityHeight)
}

// uint32 templateId = 15;
inline void PlanLineData::clear_templateid() {
  templateid_ = 0u;
}
inline ::google::protobuf::uint32 PlanLineData::templateid() const {
  // @@protoc_insertion_point(field_get:PlanLineData.templateId)
  return templateid_;
}
inline void PlanLineData::set_templateid(::google::protobuf::uint32 value) {
  
  templateid_ = value;
  // @@protoc_insertion_point(field_set:PlanLineData.templateId)
}

// -------------------------------------------------------------------

// PointData

// double lng = 1;
inline void PointData::clear_lng() {
  lng_ = 0;
}
inline double PointData::lng() const {
  // @@protoc_insertion_point(field_get:PointData.lng)
  return lng_;
}
inline void PointData::set_lng(double value) {
  
  lng_ = value;
  // @@protoc_insertion_point(field_set:PointData.lng)
}

// double lat = 2;
inline void PointData::clear_lat() {
  lat_ = 0;
}
inline double PointData::lat() const {
  // @@protoc_insertion_point(field_get:PointData.lat)
  return lat_;
}
inline void PointData::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:PointData.lat)
}

// float height = 3;
inline void PointData::clear_height() {
  height_ = 0;
}
inline float PointData::height() const {
  // @@protoc_insertion_point(field_get:PointData.height)
  return height_;
}
inline void PointData::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:PointData.height)
}

// float speed = 4;
inline void PointData::clear_speed() {
  speed_ = 0;
}
inline float PointData::speed() const {
  // @@protoc_insertion_point(field_get:PointData.speed)
  return speed_;
}
inline void PointData::set_speed(float value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:PointData.speed)
}

// repeated .PointAction actions = 5;
inline int PointData::actions_size() const {
  return actions_.size();
}
inline void PointData::clear_actions() {
  actions_.Clear();
}
inline ::PointAction* PointData::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:PointData.actions)
  return actions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::PointAction >*
PointData::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:PointData.actions)
  return &actions_;
}
inline const ::PointAction& PointData::actions(int index) const {
  // @@protoc_insertion_point(field_get:PointData.actions)
  return actions_.Get(index);
}
inline ::PointAction* PointData::add_actions() {
  // @@protoc_insertion_point(field_add:PointData.actions)
  return actions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PointAction >&
PointData::actions() const {
  // @@protoc_insertion_point(field_list:PointData.actions)
  return actions_;
}

// uint32 flightPathMode = 6;
inline void PointData::clear_flightpathmode() {
  flightpathmode_ = 0u;
}
inline ::google::protobuf::uint32 PointData::flightpathmode() const {
  // @@protoc_insertion_point(field_get:PointData.flightPathMode)
  return flightpathmode_;
}
inline void PointData::set_flightpathmode(::google::protobuf::uint32 value) {
  
  flightpathmode_ = value;
  // @@protoc_insertion_point(field_set:PointData.flightPathMode)
}

// float dampingDistance = 7;
inline void PointData::clear_dampingdistance() {
  dampingdistance_ = 0;
}
inline float PointData::dampingdistance() const {
  // @@protoc_insertion_point(field_get:PointData.dampingDistance)
  return dampingdistance_;
}
inline void PointData::set_dampingdistance(float value) {
  
  dampingdistance_ = value;
  // @@protoc_insertion_point(field_set:PointData.dampingDistance)
}

// uint32 safeGohomeFlag = 8;
inline void PointData::clear_safegohomeflag() {
  safegohomeflag_ = 0u;
}
inline ::google::protobuf::uint32 PointData::safegohomeflag() const {
  // @@protoc_insertion_point(field_get:PointData.safeGohomeFlag)
  return safegohomeflag_;
}
inline void PointData::set_safegohomeflag(::google::protobuf::uint32 value) {
  
  safegohomeflag_ = value;
  // @@protoc_insertion_point(field_set:PointData.safeGohomeFlag)
}

// uint32 headingMode = 9;
inline void PointData::clear_headingmode() {
  headingmode_ = 0u;
}
inline ::google::protobuf::uint32 PointData::headingmode() const {
  // @@protoc_insertion_point(field_get:PointData.headingMode)
  return headingmode_;
}
inline void PointData::set_headingmode(::google::protobuf::uint32 value) {
  
  headingmode_ = value;
  // @@protoc_insertion_point(field_set:PointData.headingMode)
}

// float heading = 10;
inline void PointData::clear_heading() {
  heading_ = 0;
}
inline float PointData::heading() const {
  // @@protoc_insertion_point(field_get:PointData.heading)
  return heading_;
}
inline void PointData::set_heading(float value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:PointData.heading)
}

// int32 interestIndex = 11;
inline void PointData::clear_interestindex() {
  interestindex_ = 0;
}
inline ::google::protobuf::int32 PointData::interestindex() const {
  // @@protoc_insertion_point(field_get:PointData.interestIndex)
  return interestindex_;
}
inline void PointData::set_interestindex(::google::protobuf::int32 value) {
  
  interestindex_ = value;
  // @@protoc_insertion_point(field_set:PointData.interestIndex)
}

// uint32 groupIndex = 12;
inline void PointData::clear_groupindex() {
  groupindex_ = 0u;
}
inline ::google::protobuf::uint32 PointData::groupindex() const {
  // @@protoc_insertion_point(field_get:PointData.groupIndex)
  return groupindex_;
}
inline void PointData::set_groupindex(::google::protobuf::uint32 value) {
  
  groupindex_ = value;
  // @@protoc_insertion_point(field_set:PointData.groupIndex)
}

// -------------------------------------------------------------------

// PointAction

// uint32 type = 1;
inline void PointAction::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 PointAction::type() const {
  // @@protoc_insertion_point(field_get:PointAction.type)
  return type_;
}
inline void PointAction::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:PointAction.type)
}

// float param = 2;
inline void PointAction::clear_param() {
  param_ = 0;
}
inline float PointAction::param() const {
  // @@protoc_insertion_point(field_get:PointAction.param)
  return param_;
}
inline void PointAction::set_param(float value) {
  
  param_ = value;
  // @@protoc_insertion_point(field_set:PointAction.param)
}

// int32 waitTime = 3;
inline void PointAction::clear_waittime() {
  waittime_ = 0;
}
inline ::google::protobuf::int32 PointAction::waittime() const {
  // @@protoc_insertion_point(field_get:PointAction.waitTime)
  return waittime_;
}
inline void PointAction::set_waittime(::google::protobuf::int32 value) {
  
  waittime_ = value;
  // @@protoc_insertion_point(field_set:PointAction.waitTime)
}

// string speakInfo = 4;
inline void PointAction::clear_speakinfo() {
  speakinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PointAction::speakinfo() const {
  // @@protoc_insertion_point(field_get:PointAction.speakInfo)
  return speakinfo_.GetNoArena();
}
inline void PointAction::set_speakinfo(const ::std::string& value) {
  
  speakinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PointAction.speakInfo)
}
#if LANG_CXX11
inline void PointAction::set_speakinfo(::std::string&& value) {
  
  speakinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PointAction.speakInfo)
}
#endif
inline void PointAction::set_speakinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  speakinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PointAction.speakInfo)
}
inline void PointAction::set_speakinfo(const char* value, size_t size) {
  
  speakinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PointAction.speakInfo)
}
inline ::std::string* PointAction::mutable_speakinfo() {
  
  // @@protoc_insertion_point(field_mutable:PointAction.speakInfo)
  return speakinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PointAction::release_speakinfo() {
  // @@protoc_insertion_point(field_release:PointAction.speakInfo)
  
  return speakinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PointAction::set_allocated_speakinfo(::std::string* speakinfo) {
  if (speakinfo != NULL) {
    
  } else {
    
  }
  speakinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), speakinfo);
  // @@protoc_insertion_point(field_set_allocated:PointAction.speakInfo)
}

// -------------------------------------------------------------------

// HangarPoint

// string hangarId = 1;
inline void HangarPoint::clear_hangarid() {
  hangarid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HangarPoint::hangarid() const {
  // @@protoc_insertion_point(field_get:HangarPoint.hangarId)
  return hangarid_.GetNoArena();
}
inline void HangarPoint::set_hangarid(const ::std::string& value) {
  
  hangarid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HangarPoint.hangarId)
}
#if LANG_CXX11
inline void HangarPoint::set_hangarid(::std::string&& value) {
  
  hangarid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HangarPoint.hangarId)
}
#endif
inline void HangarPoint::set_hangarid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hangarid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HangarPoint.hangarId)
}
inline void HangarPoint::set_hangarid(const char* value, size_t size) {
  
  hangarid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HangarPoint.hangarId)
}
inline ::std::string* HangarPoint::mutable_hangarid() {
  
  // @@protoc_insertion_point(field_mutable:HangarPoint.hangarId)
  return hangarid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HangarPoint::release_hangarid() {
  // @@protoc_insertion_point(field_release:HangarPoint.hangarId)
  
  return hangarid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HangarPoint::set_allocated_hangarid(::std::string* hangarid) {
  if (hangarid != NULL) {
    
  } else {
    
  }
  hangarid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hangarid);
  // @@protoc_insertion_point(field_set_allocated:HangarPoint.hangarId)
}

// double hangarLng = 2;
inline void HangarPoint::clear_hangarlng() {
  hangarlng_ = 0;
}
inline double HangarPoint::hangarlng() const {
  // @@protoc_insertion_point(field_get:HangarPoint.hangarLng)
  return hangarlng_;
}
inline void HangarPoint::set_hangarlng(double value) {
  
  hangarlng_ = value;
  // @@protoc_insertion_point(field_set:HangarPoint.hangarLng)
}

// double hangarLat = 3;
inline void HangarPoint::clear_hangarlat() {
  hangarlat_ = 0;
}
inline double HangarPoint::hangarlat() const {
  // @@protoc_insertion_point(field_get:HangarPoint.hangarLat)
  return hangarlat_;
}
inline void HangarPoint::set_hangarlat(double value) {
  
  hangarlat_ = value;
  // @@protoc_insertion_point(field_set:HangarPoint.hangarLat)
}

// double alternateLng = 4;
inline void HangarPoint::clear_alternatelng() {
  alternatelng_ = 0;
}
inline double HangarPoint::alternatelng() const {
  // @@protoc_insertion_point(field_get:HangarPoint.alternateLng)
  return alternatelng_;
}
inline void HangarPoint::set_alternatelng(double value) {
  
  alternatelng_ = value;
  // @@protoc_insertion_point(field_set:HangarPoint.alternateLng)
}

// double alternateLat = 5;
inline void HangarPoint::clear_alternatelat() {
  alternatelat_ = 0;
}
inline double HangarPoint::alternatelat() const {
  // @@protoc_insertion_point(field_get:HangarPoint.alternateLat)
  return alternatelat_;
}
inline void HangarPoint::set_alternatelat(double value) {
  
  alternatelat_ = value;
  // @@protoc_insertion_point(field_set:HangarPoint.alternateLat)
}

// uint32 mediaUploadFlag = 6;
inline void HangarPoint::clear_mediauploadflag() {
  mediauploadflag_ = 0u;
}
inline ::google::protobuf::uint32 HangarPoint::mediauploadflag() const {
  // @@protoc_insertion_point(field_get:HangarPoint.mediaUploadFlag)
  return mediauploadflag_;
}
inline void HangarPoint::set_mediauploadflag(::google::protobuf::uint32 value) {
  
  mediauploadflag_ = value;
  // @@protoc_insertion_point(field_set:HangarPoint.mediaUploadFlag)
}

// -------------------------------------------------------------------

// NormalModel

// repeated .PointData area = 1;
inline int NormalModel::area_size() const {
  return area_.size();
}
inline void NormalModel::clear_area() {
  area_.Clear();
}
inline ::PointData* NormalModel::mutable_area(int index) {
  // @@protoc_insertion_point(field_mutable:NormalModel.area)
  return area_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::PointData >*
NormalModel::mutable_area() {
  // @@protoc_insertion_point(field_mutable_list:NormalModel.area)
  return &area_;
}
inline const ::PointData& NormalModel::area(int index) const {
  // @@protoc_insertion_point(field_get:NormalModel.area)
  return area_.Get(index);
}
inline ::PointData* NormalModel::add_area() {
  // @@protoc_insertion_point(field_add:NormalModel.area)
  return area_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PointData >&
NormalModel::area() const {
  // @@protoc_insertion_point(field_list:NormalModel.area)
  return area_;
}

// uint32 serviceId = 2;
inline void NormalModel::clear_serviceid() {
  serviceid_ = 0u;
}
inline ::google::protobuf::uint32 NormalModel::serviceid() const {
  // @@protoc_insertion_point(field_get:NormalModel.serviceId)
  return serviceid_;
}
inline void NormalModel::set_serviceid(::google::protobuf::uint32 value) {
  
  serviceid_ = value;
  // @@protoc_insertion_point(field_set:NormalModel.serviceId)
}

// uint32 cameraId = 3;
inline void NormalModel::clear_cameraid() {
  cameraid_ = 0u;
}
inline ::google::protobuf::uint32 NormalModel::cameraid() const {
  // @@protoc_insertion_point(field_get:NormalModel.cameraId)
  return cameraid_;
}
inline void NormalModel::set_cameraid(::google::protobuf::uint32 value) {
  
  cameraid_ = value;
  // @@protoc_insertion_point(field_set:NormalModel.cameraId)
}

// uint32 isModeling = 4;
inline void NormalModel::clear_ismodeling() {
  ismodeling_ = 0u;
}
inline ::google::protobuf::uint32 NormalModel::ismodeling() const {
  // @@protoc_insertion_point(field_get:NormalModel.isModeling)
  return ismodeling_;
}
inline void NormalModel::set_ismodeling(::google::protobuf::uint32 value) {
  
  ismodeling_ = value;
  // @@protoc_insertion_point(field_set:NormalModel.isModeling)
}

// uint32 mode = 5;
inline void NormalModel::clear_mode() {
  mode_ = 0u;
}
inline ::google::protobuf::uint32 NormalModel::mode() const {
  // @@protoc_insertion_point(field_get:NormalModel.mode)
  return mode_;
}
inline void NormalModel::set_mode(::google::protobuf::uint32 value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:NormalModel.mode)
}

// uint32 hOverlap = 6;
inline void NormalModel::clear_hoverlap() {
  hoverlap_ = 0u;
}
inline ::google::protobuf::uint32 NormalModel::hoverlap() const {
  // @@protoc_insertion_point(field_get:NormalModel.hOverlap)
  return hoverlap_;
}
inline void NormalModel::set_hoverlap(::google::protobuf::uint32 value) {
  
  hoverlap_ = value;
  // @@protoc_insertion_point(field_set:NormalModel.hOverlap)
}

// uint32 vOverlap = 7;
inline void NormalModel::clear_voverlap() {
  voverlap_ = 0u;
}
inline ::google::protobuf::uint32 NormalModel::voverlap() const {
  // @@protoc_insertion_point(field_get:NormalModel.vOverlap)
  return voverlap_;
}
inline void NormalModel::set_voverlap(::google::protobuf::uint32 value) {
  
  voverlap_ = value;
  // @@protoc_insertion_point(field_set:NormalModel.vOverlap)
}

// uint32 mirror = 8;
inline void NormalModel::clear_mirror() {
  mirror_ = 0u;
}
inline ::google::protobuf::uint32 NormalModel::mirror() const {
  // @@protoc_insertion_point(field_get:NormalModel.mirror)
  return mirror_;
}
inline void NormalModel::set_mirror(::google::protobuf::uint32 value) {
  
  mirror_ = value;
  // @@protoc_insertion_point(field_set:NormalModel.mirror)
}

// uint32 direction = 9;
inline void NormalModel::clear_direction() {
  direction_ = 0u;
}
inline ::google::protobuf::uint32 NormalModel::direction() const {
  // @@protoc_insertion_point(field_get:NormalModel.direction)
  return direction_;
}
inline void NormalModel::set_direction(::google::protobuf::uint32 value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:NormalModel.direction)
}

// uint32 flightPathMode = 10;
inline void NormalModel::clear_flightpathmode() {
  flightpathmode_ = 0u;
}
inline ::google::protobuf::uint32 NormalModel::flightpathmode() const {
  // @@protoc_insertion_point(field_get:NormalModel.flightPathMode)
  return flightpathmode_;
}
inline void NormalModel::set_flightpathmode(::google::protobuf::uint32 value) {
  
  flightpathmode_ = value;
  // @@protoc_insertion_point(field_set:NormalModel.flightPathMode)
}

// uint32 height = 11;
inline void NormalModel::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 NormalModel::height() const {
  // @@protoc_insertion_point(field_get:NormalModel.height)
  return height_;
}
inline void NormalModel::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:NormalModel.height)
}

// uint32 pitch = 12;
inline void NormalModel::clear_pitch() {
  pitch_ = 0u;
}
inline ::google::protobuf::uint32 NormalModel::pitch() const {
  // @@protoc_insertion_point(field_get:NormalModel.pitch)
  return pitch_;
}
inline void NormalModel::set_pitch(::google::protobuf::uint32 value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:NormalModel.pitch)
}

// -------------------------------------------------------------------

// SurroundModel

// repeated .PointData area = 1;
inline int SurroundModel::area_size() const {
  return area_.size();
}
inline void SurroundModel::clear_area() {
  area_.Clear();
}
inline ::PointData* SurroundModel::mutable_area(int index) {
  // @@protoc_insertion_point(field_mutable:SurroundModel.area)
  return area_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::PointData >*
SurroundModel::mutable_area() {
  // @@protoc_insertion_point(field_mutable_list:SurroundModel.area)
  return &area_;
}
inline const ::PointData& SurroundModel::area(int index) const {
  // @@protoc_insertion_point(field_get:SurroundModel.area)
  return area_.Get(index);
}
inline ::PointData* SurroundModel::add_area() {
  // @@protoc_insertion_point(field_add:SurroundModel.area)
  return area_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PointData >&
SurroundModel::area() const {
  // @@protoc_insertion_point(field_list:SurroundModel.area)
  return area_;
}

// uint32 serviceId = 2;
inline void SurroundModel::clear_serviceid() {
  serviceid_ = 0u;
}
inline ::google::protobuf::uint32 SurroundModel::serviceid() const {
  // @@protoc_insertion_point(field_get:SurroundModel.serviceId)
  return serviceid_;
}
inline void SurroundModel::set_serviceid(::google::protobuf::uint32 value) {
  
  serviceid_ = value;
  // @@protoc_insertion_point(field_set:SurroundModel.serviceId)
}

// uint32 cameraId = 3;
inline void SurroundModel::clear_cameraid() {
  cameraid_ = 0u;
}
inline ::google::protobuf::uint32 SurroundModel::cameraid() const {
  // @@protoc_insertion_point(field_get:SurroundModel.cameraId)
  return cameraid_;
}
inline void SurroundModel::set_cameraid(::google::protobuf::uint32 value) {
  
  cameraid_ = value;
  // @@protoc_insertion_point(field_set:SurroundModel.cameraId)
}

// uint32 isModeling = 4;
inline void SurroundModel::clear_ismodeling() {
  ismodeling_ = 0u;
}
inline ::google::protobuf::uint32 SurroundModel::ismodeling() const {
  // @@protoc_insertion_point(field_get:SurroundModel.isModeling)
  return ismodeling_;
}
inline void SurroundModel::set_ismodeling(::google::protobuf::uint32 value) {
  
  ismodeling_ = value;
  // @@protoc_insertion_point(field_set:SurroundModel.isModeling)
}

// uint32 height = 5;
inline void SurroundModel::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 SurroundModel::height() const {
  // @@protoc_insertion_point(field_get:SurroundModel.height)
  return height_;
}
inline void SurroundModel::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:SurroundModel.height)
}

// repeated .PointData boundary = 6;
inline int SurroundModel::boundary_size() const {
  return boundary_.size();
}
inline void SurroundModel::clear_boundary() {
  boundary_.Clear();
}
inline ::PointData* SurroundModel::mutable_boundary(int index) {
  // @@protoc_insertion_point(field_mutable:SurroundModel.boundary)
  return boundary_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::PointData >*
SurroundModel::mutable_boundary() {
  // @@protoc_insertion_point(field_mutable_list:SurroundModel.boundary)
  return &boundary_;
}
inline const ::PointData& SurroundModel::boundary(int index) const {
  // @@protoc_insertion_point(field_get:SurroundModel.boundary)
  return boundary_.Get(index);
}
inline ::PointData* SurroundModel::add_boundary() {
  // @@protoc_insertion_point(field_add:SurroundModel.boundary)
  return boundary_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PointData >&
SurroundModel::boundary() const {
  // @@protoc_insertion_point(field_list:SurroundModel.boundary)
  return boundary_;
}

// uint32 exposureCount = 7;
inline void SurroundModel::clear_exposurecount() {
  exposurecount_ = 0u;
}
inline ::google::protobuf::uint32 SurroundModel::exposurecount() const {
  // @@protoc_insertion_point(field_get:SurroundModel.exposureCount)
  return exposurecount_;
}
inline void SurroundModel::set_exposurecount(::google::protobuf::uint32 value) {
  
  exposurecount_ = value;
  // @@protoc_insertion_point(field_set:SurroundModel.exposureCount)
}

// -------------------------------------------------------------------

// UavInitInfo

// string uavModel = 1;
inline void UavInitInfo::clear_uavmodel() {
  uavmodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UavInitInfo::uavmodel() const {
  // @@protoc_insertion_point(field_get:UavInitInfo.uavModel)
  return uavmodel_.GetNoArena();
}
inline void UavInitInfo::set_uavmodel(const ::std::string& value) {
  
  uavmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UavInitInfo.uavModel)
}
#if LANG_CXX11
inline void UavInitInfo::set_uavmodel(::std::string&& value) {
  
  uavmodel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UavInitInfo.uavModel)
}
#endif
inline void UavInitInfo::set_uavmodel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uavmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UavInitInfo.uavModel)
}
inline void UavInitInfo::set_uavmodel(const char* value, size_t size) {
  
  uavmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UavInitInfo.uavModel)
}
inline ::std::string* UavInitInfo::mutable_uavmodel() {
  
  // @@protoc_insertion_point(field_mutable:UavInitInfo.uavModel)
  return uavmodel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UavInitInfo::release_uavmodel() {
  // @@protoc_insertion_point(field_release:UavInitInfo.uavModel)
  
  return uavmodel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UavInitInfo::set_allocated_uavmodel(::std::string* uavmodel) {
  if (uavmodel != NULL) {
    
  } else {
    
  }
  uavmodel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uavmodel);
  // @@protoc_insertion_point(field_set_allocated:UavInitInfo.uavModel)
}

// string uavSn = 2;
inline void UavInitInfo::clear_uavsn() {
  uavsn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UavInitInfo::uavsn() const {
  // @@protoc_insertion_point(field_get:UavInitInfo.uavSn)
  return uavsn_.GetNoArena();
}
inline void UavInitInfo::set_uavsn(const ::std::string& value) {
  
  uavsn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UavInitInfo.uavSn)
}
#if LANG_CXX11
inline void UavInitInfo::set_uavsn(::std::string&& value) {
  
  uavsn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UavInitInfo.uavSn)
}
#endif
inline void UavInitInfo::set_uavsn(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uavsn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UavInitInfo.uavSn)
}
inline void UavInitInfo::set_uavsn(const char* value, size_t size) {
  
  uavsn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UavInitInfo.uavSn)
}
inline ::std::string* UavInitInfo::mutable_uavsn() {
  
  // @@protoc_insertion_point(field_mutable:UavInitInfo.uavSn)
  return uavsn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UavInitInfo::release_uavsn() {
  // @@protoc_insertion_point(field_release:UavInitInfo.uavSn)
  
  return uavsn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UavInitInfo::set_allocated_uavsn(::std::string* uavsn) {
  if (uavsn != NULL) {
    
  } else {
    
  }
  uavsn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uavsn);
  // @@protoc_insertion_point(field_set_allocated:UavInitInfo.uavSn)
}

// string uavVersion = 3;
inline void UavInitInfo::clear_uavversion() {
  uavversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UavInitInfo::uavversion() const {
  // @@protoc_insertion_point(field_get:UavInitInfo.uavVersion)
  return uavversion_.GetNoArena();
}
inline void UavInitInfo::set_uavversion(const ::std::string& value) {
  
  uavversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UavInitInfo.uavVersion)
}
#if LANG_CXX11
inline void UavInitInfo::set_uavversion(::std::string&& value) {
  
  uavversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UavInitInfo.uavVersion)
}
#endif
inline void UavInitInfo::set_uavversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uavversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UavInitInfo.uavVersion)
}
inline void UavInitInfo::set_uavversion(const char* value, size_t size) {
  
  uavversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UavInitInfo.uavVersion)
}
inline ::std::string* UavInitInfo::mutable_uavversion() {
  
  // @@protoc_insertion_point(field_mutable:UavInitInfo.uavVersion)
  return uavversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UavInitInfo::release_uavversion() {
  // @@protoc_insertion_point(field_release:UavInitInfo.uavVersion)
  
  return uavversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UavInitInfo::set_allocated_uavversion(::std::string* uavversion) {
  if (uavversion != NULL) {
    
  } else {
    
  }
  uavversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uavversion);
  // @@protoc_insertion_point(field_set_allocated:UavInitInfo.uavVersion)
}

// string ptModel = 4;
inline void UavInitInfo::clear_ptmodel() {
  ptmodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UavInitInfo::ptmodel() const {
  // @@protoc_insertion_point(field_get:UavInitInfo.ptModel)
  return ptmodel_.GetNoArena();
}
inline void UavInitInfo::set_ptmodel(const ::std::string& value) {
  
  ptmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UavInitInfo.ptModel)
}
#if LANG_CXX11
inline void UavInitInfo::set_ptmodel(::std::string&& value) {
  
  ptmodel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UavInitInfo.ptModel)
}
#endif
inline void UavInitInfo::set_ptmodel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ptmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UavInitInfo.ptModel)
}
inline void UavInitInfo::set_ptmodel(const char* value, size_t size) {
  
  ptmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UavInitInfo.ptModel)
}
inline ::std::string* UavInitInfo::mutable_ptmodel() {
  
  // @@protoc_insertion_point(field_mutable:UavInitInfo.ptModel)
  return ptmodel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UavInitInfo::release_ptmodel() {
  // @@protoc_insertion_point(field_release:UavInitInfo.ptModel)
  
  return ptmodel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UavInitInfo::set_allocated_ptmodel(::std::string* ptmodel) {
  if (ptmodel != NULL) {
    
  } else {
    
  }
  ptmodel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ptmodel);
  // @@protoc_insertion_point(field_set_allocated:UavInitInfo.ptModel)
}

// string ptVersion = 5;
inline void UavInitInfo::clear_ptversion() {
  ptversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UavInitInfo::ptversion() const {
  // @@protoc_insertion_point(field_get:UavInitInfo.ptVersion)
  return ptversion_.GetNoArena();
}
inline void UavInitInfo::set_ptversion(const ::std::string& value) {
  
  ptversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UavInitInfo.ptVersion)
}
#if LANG_CXX11
inline void UavInitInfo::set_ptversion(::std::string&& value) {
  
  ptversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UavInitInfo.ptVersion)
}
#endif
inline void UavInitInfo::set_ptversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ptversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UavInitInfo.ptVersion)
}
inline void UavInitInfo::set_ptversion(const char* value, size_t size) {
  
  ptversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UavInitInfo.ptVersion)
}
inline ::std::string* UavInitInfo::mutable_ptversion() {
  
  // @@protoc_insertion_point(field_mutable:UavInitInfo.ptVersion)
  return ptversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UavInitInfo::release_ptversion() {
  // @@protoc_insertion_point(field_release:UavInitInfo.ptVersion)
  
  return ptversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UavInitInfo::set_allocated_ptversion(::std::string* ptversion) {
  if (ptversion != NULL) {
    
  } else {
    
  }
  ptversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ptversion);
  // @@protoc_insertion_point(field_set_allocated:UavInitInfo.ptVersion)
}

// uint32 ptPosition = 6;
inline void UavInitInfo::clear_ptposition() {
  ptposition_ = 0u;
}
inline ::google::protobuf::uint32 UavInitInfo::ptposition() const {
  // @@protoc_insertion_point(field_get:UavInitInfo.ptPosition)
  return ptposition_;
}
inline void UavInitInfo::set_ptposition(::google::protobuf::uint32 value) {
  
  ptposition_ = value;
  // @@protoc_insertion_point(field_set:UavInitInfo.ptPosition)
}

// string moduleVersion = 7;
inline void UavInitInfo::clear_moduleversion() {
  moduleversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UavInitInfo::moduleversion() const {
  // @@protoc_insertion_point(field_get:UavInitInfo.moduleVersion)
  return moduleversion_.GetNoArena();
}
inline void UavInitInfo::set_moduleversion(const ::std::string& value) {
  
  moduleversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UavInitInfo.moduleVersion)
}
#if LANG_CXX11
inline void UavInitInfo::set_moduleversion(::std::string&& value) {
  
  moduleversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UavInitInfo.moduleVersion)
}
#endif
inline void UavInitInfo::set_moduleversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  moduleversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UavInitInfo.moduleVersion)
}
inline void UavInitInfo::set_moduleversion(const char* value, size_t size) {
  
  moduleversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UavInitInfo.moduleVersion)
}
inline ::std::string* UavInitInfo::mutable_moduleversion() {
  
  // @@protoc_insertion_point(field_mutable:UavInitInfo.moduleVersion)
  return moduleversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UavInitInfo::release_moduleversion() {
  // @@protoc_insertion_point(field_release:UavInitInfo.moduleVersion)
  
  return moduleversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UavInitInfo::set_allocated_moduleversion(::std::string* moduleversion) {
  if (moduleversion != NULL) {
    
  } else {
    
  }
  moduleversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), moduleversion);
  // @@protoc_insertion_point(field_set_allocated:UavInitInfo.moduleVersion)
}

// -------------------------------------------------------------------

// PayloadState

// .StickState stickState = 1;
inline bool PayloadState::has_stickstate() const {
  return this != internal_default_instance() && stickstate_ != NULL;
}
inline void PayloadState::clear_stickstate() {
  if (GetArenaNoVirtual() == NULL && stickstate_ != NULL) {
    delete stickstate_;
  }
  stickstate_ = NULL;
}
inline const ::StickState& PayloadState::_internal_stickstate() const {
  return *stickstate_;
}
inline const ::StickState& PayloadState::stickstate() const {
  const ::StickState* p = stickstate_;
  // @@protoc_insertion_point(field_get:PayloadState.stickState)
  return p != NULL ? *p : *reinterpret_cast<const ::StickState*>(
      &::_StickState_default_instance_);
}
inline ::StickState* PayloadState::release_stickstate() {
  // @@protoc_insertion_point(field_release:PayloadState.stickState)
  
  ::StickState* temp = stickstate_;
  stickstate_ = NULL;
  return temp;
}
inline ::StickState* PayloadState::mutable_stickstate() {
  
  if (stickstate_ == NULL) {
    auto* p = CreateMaybeMessage<::StickState>(GetArenaNoVirtual());
    stickstate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:PayloadState.stickState)
  return stickstate_;
}
inline void PayloadState::set_allocated_stickstate(::StickState* stickstate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stickstate_;
  }
  if (stickstate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stickstate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stickstate, submessage_arena);
    }
    
  } else {
    
  }
  stickstate_ = stickstate;
  // @@protoc_insertion_point(field_set_allocated:PayloadState.stickState)
}

// .ParachuteState parachuteState = 2;
inline bool PayloadState::has_parachutestate() const {
  return this != internal_default_instance() && parachutestate_ != NULL;
}
inline void PayloadState::clear_parachutestate() {
  if (GetArenaNoVirtual() == NULL && parachutestate_ != NULL) {
    delete parachutestate_;
  }
  parachutestate_ = NULL;
}
inline const ::ParachuteState& PayloadState::_internal_parachutestate() const {
  return *parachutestate_;
}
inline const ::ParachuteState& PayloadState::parachutestate() const {
  const ::ParachuteState* p = parachutestate_;
  // @@protoc_insertion_point(field_get:PayloadState.parachuteState)
  return p != NULL ? *p : *reinterpret_cast<const ::ParachuteState*>(
      &::_ParachuteState_default_instance_);
}
inline ::ParachuteState* PayloadState::release_parachutestate() {
  // @@protoc_insertion_point(field_release:PayloadState.parachuteState)
  
  ::ParachuteState* temp = parachutestate_;
  parachutestate_ = NULL;
  return temp;
}
inline ::ParachuteState* PayloadState::mutable_parachutestate() {
  
  if (parachutestate_ == NULL) {
    auto* p = CreateMaybeMessage<::ParachuteState>(GetArenaNoVirtual());
    parachutestate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:PayloadState.parachuteState)
  return parachutestate_;
}
inline void PayloadState::set_allocated_parachutestate(::ParachuteState* parachutestate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parachutestate_;
  }
  if (parachutestate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parachutestate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parachutestate, submessage_arena);
    }
    
  } else {
    
  }
  parachutestate_ = parachutestate;
  // @@protoc_insertion_point(field_set_allocated:PayloadState.parachuteState)
}

// .SprayFireState sprayFireState = 3;
inline bool PayloadState::has_sprayfirestate() const {
  return this != internal_default_instance() && sprayfirestate_ != NULL;
}
inline void PayloadState::clear_sprayfirestate() {
  if (GetArenaNoVirtual() == NULL && sprayfirestate_ != NULL) {
    delete sprayfirestate_;
  }
  sprayfirestate_ = NULL;
}
inline const ::SprayFireState& PayloadState::_internal_sprayfirestate() const {
  return *sprayfirestate_;
}
inline const ::SprayFireState& PayloadState::sprayfirestate() const {
  const ::SprayFireState* p = sprayfirestate_;
  // @@protoc_insertion_point(field_get:PayloadState.sprayFireState)
  return p != NULL ? *p : *reinterpret_cast<const ::SprayFireState*>(
      &::_SprayFireState_default_instance_);
}
inline ::SprayFireState* PayloadState::release_sprayfirestate() {
  // @@protoc_insertion_point(field_release:PayloadState.sprayFireState)
  
  ::SprayFireState* temp = sprayfirestate_;
  sprayfirestate_ = NULL;
  return temp;
}
inline ::SprayFireState* PayloadState::mutable_sprayfirestate() {
  
  if (sprayfirestate_ == NULL) {
    auto* p = CreateMaybeMessage<::SprayFireState>(GetArenaNoVirtual());
    sprayfirestate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:PayloadState.sprayFireState)
  return sprayfirestate_;
}
inline void PayloadState::set_allocated_sprayfirestate(::SprayFireState* sprayfirestate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sprayfirestate_;
  }
  if (sprayfirestate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sprayfirestate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sprayfirestate, submessage_arena);
    }
    
  } else {
    
  }
  sprayfirestate_ = sprayfirestate;
  // @@protoc_insertion_point(field_set_allocated:PayloadState.sprayFireState)
}

// .AirAnalysis airAnalysis = 4;
inline bool PayloadState::has_airanalysis() const {
  return this != internal_default_instance() && airanalysis_ != NULL;
}
inline void PayloadState::clear_airanalysis() {
  if (GetArenaNoVirtual() == NULL && airanalysis_ != NULL) {
    delete airanalysis_;
  }
  airanalysis_ = NULL;
}
inline const ::AirAnalysis& PayloadState::_internal_airanalysis() const {
  return *airanalysis_;
}
inline const ::AirAnalysis& PayloadState::airanalysis() const {
  const ::AirAnalysis* p = airanalysis_;
  // @@protoc_insertion_point(field_get:PayloadState.airAnalysis)
  return p != NULL ? *p : *reinterpret_cast<const ::AirAnalysis*>(
      &::_AirAnalysis_default_instance_);
}
inline ::AirAnalysis* PayloadState::release_airanalysis() {
  // @@protoc_insertion_point(field_release:PayloadState.airAnalysis)
  
  ::AirAnalysis* temp = airanalysis_;
  airanalysis_ = NULL;
  return temp;
}
inline ::AirAnalysis* PayloadState::mutable_airanalysis() {
  
  if (airanalysis_ == NULL) {
    auto* p = CreateMaybeMessage<::AirAnalysis>(GetArenaNoVirtual());
    airanalysis_ = p;
  }
  // @@protoc_insertion_point(field_mutable:PayloadState.airAnalysis)
  return airanalysis_;
}
inline void PayloadState::set_allocated_airanalysis(::AirAnalysis* airanalysis) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete airanalysis_;
  }
  if (airanalysis) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      airanalysis = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, airanalysis, submessage_arena);
    }
    
  } else {
    
  }
  airanalysis_ = airanalysis;
  // @@protoc_insertion_point(field_set_allocated:PayloadState.airAnalysis)
}

// string boxSn = 5;
inline void PayloadState::clear_boxsn() {
  boxsn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PayloadState::boxsn() const {
  // @@protoc_insertion_point(field_get:PayloadState.boxSn)
  return boxsn_.GetNoArena();
}
inline void PayloadState::set_boxsn(const ::std::string& value) {
  
  boxsn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PayloadState.boxSn)
}
#if LANG_CXX11
inline void PayloadState::set_boxsn(::std::string&& value) {
  
  boxsn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PayloadState.boxSn)
}
#endif
inline void PayloadState::set_boxsn(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  boxsn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PayloadState.boxSn)
}
inline void PayloadState::set_boxsn(const char* value, size_t size) {
  
  boxsn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PayloadState.boxSn)
}
inline ::std::string* PayloadState::mutable_boxsn() {
  
  // @@protoc_insertion_point(field_mutable:PayloadState.boxSn)
  return boxsn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PayloadState::release_boxsn() {
  // @@protoc_insertion_point(field_release:PayloadState.boxSn)
  
  return boxsn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PayloadState::set_allocated_boxsn(::std::string* boxsn) {
  if (boxsn != NULL) {
    
  } else {
    
  }
  boxsn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), boxsn);
  // @@protoc_insertion_point(field_set_allocated:PayloadState.boxSn)
}

// uint64 timestamp = 6;
inline void PayloadState::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PayloadState::timestamp() const {
  // @@protoc_insertion_point(field_get:PayloadState.timestamp)
  return timestamp_;
}
inline void PayloadState::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:PayloadState.timestamp)
}

// -------------------------------------------------------------------

// PayloadStateList

// repeated .PayloadState payloadState = 1;
inline int PayloadStateList::payloadstate_size() const {
  return payloadstate_.size();
}
inline void PayloadStateList::clear_payloadstate() {
  payloadstate_.Clear();
}
inline ::PayloadState* PayloadStateList::mutable_payloadstate(int index) {
  // @@protoc_insertion_point(field_mutable:PayloadStateList.payloadState)
  return payloadstate_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::PayloadState >*
PayloadStateList::mutable_payloadstate() {
  // @@protoc_insertion_point(field_mutable_list:PayloadStateList.payloadState)
  return &payloadstate_;
}
inline const ::PayloadState& PayloadStateList::payloadstate(int index) const {
  // @@protoc_insertion_point(field_get:PayloadStateList.payloadState)
  return payloadstate_.Get(index);
}
inline ::PayloadState* PayloadStateList::add_payloadstate() {
  // @@protoc_insertion_point(field_add:PayloadStateList.payloadState)
  return payloadstate_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PayloadState >&
PayloadStateList::payloadstate() const {
  // @@protoc_insertion_point(field_list:PayloadStateList.payloadState)
  return payloadstate_;
}

// -------------------------------------------------------------------

// StickState

// uint32 id = 1;
inline void StickState::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 StickState::id() const {
  // @@protoc_insertion_point(field_get:StickState.id)
  return id_;
}
inline void StickState::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:StickState.id)
}

// uint32 position = 2;
inline void StickState::clear_position() {
  position_ = 0u;
}
inline ::google::protobuf::uint32 StickState::position() const {
  // @@protoc_insertion_point(field_get:StickState.position)
  return position_;
}
inline void StickState::set_position(::google::protobuf::uint32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:StickState.position)
}

// string stickId = 3;
inline void StickState::clear_stickid() {
  stickid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StickState::stickid() const {
  // @@protoc_insertion_point(field_get:StickState.stickId)
  return stickid_.GetNoArena();
}
inline void StickState::set_stickid(const ::std::string& value) {
  
  stickid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StickState.stickId)
}
#if LANG_CXX11
inline void StickState::set_stickid(::std::string&& value) {
  
  stickid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StickState.stickId)
}
#endif
inline void StickState::set_stickid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stickid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StickState.stickId)
}
inline void StickState::set_stickid(const char* value, size_t size) {
  
  stickid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StickState.stickId)
}
inline ::std::string* StickState::mutable_stickid() {
  
  // @@protoc_insertion_point(field_mutable:StickState.stickId)
  return stickid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StickState::release_stickid() {
  // @@protoc_insertion_point(field_release:StickState.stickId)
  
  return stickid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StickState::set_allocated_stickid(::std::string* stickid) {
  if (stickid != NULL) {
    
  } else {
    
  }
  stickid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stickid);
  // @@protoc_insertion_point(field_set_allocated:StickState.stickId)
}

// uint32 openAiFlag = 4;
inline void StickState::clear_openaiflag() {
  openaiflag_ = 0u;
}
inline ::google::protobuf::uint32 StickState::openaiflag() const {
  // @@protoc_insertion_point(field_get:StickState.openAiFlag)
  return openaiflag_;
}
inline void StickState::set_openaiflag(::google::protobuf::uint32 value) {
  
  openaiflag_ = value;
  // @@protoc_insertion_point(field_set:StickState.openAiFlag)
}

// uint32 openAiPhotoReport = 5;
inline void StickState::clear_openaiphotoreport() {
  openaiphotoreport_ = 0u;
}
inline ::google::protobuf::uint32 StickState::openaiphotoreport() const {
  // @@protoc_insertion_point(field_get:StickState.openAiPhotoReport)
  return openaiphotoreport_;
}
inline void StickState::set_openaiphotoreport(::google::protobuf::uint32 value) {
  
  openaiphotoreport_ = value;
  // @@protoc_insertion_point(field_set:StickState.openAiPhotoReport)
}

// string modelSn = 6;
inline void StickState::clear_modelsn() {
  modelsn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StickState::modelsn() const {
  // @@protoc_insertion_point(field_get:StickState.modelSn)
  return modelsn_.GetNoArena();
}
inline void StickState::set_modelsn(const ::std::string& value) {
  
  modelsn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StickState.modelSn)
}
#if LANG_CXX11
inline void StickState::set_modelsn(::std::string&& value) {
  
  modelsn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StickState.modelSn)
}
#endif
inline void StickState::set_modelsn(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  modelsn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StickState.modelSn)
}
inline void StickState::set_modelsn(const char* value, size_t size) {
  
  modelsn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StickState.modelSn)
}
inline ::std::string* StickState::mutable_modelsn() {
  
  // @@protoc_insertion_point(field_mutable:StickState.modelSn)
  return modelsn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StickState::release_modelsn() {
  // @@protoc_insertion_point(field_release:StickState.modelSn)
  
  return modelsn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StickState::set_allocated_modelsn(::std::string* modelsn) {
  if (modelsn != NULL) {
    
  } else {
    
  }
  modelsn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modelsn);
  // @@protoc_insertion_point(field_set_allocated:StickState.modelSn)
}

// float prob = 7;
inline void StickState::clear_prob() {
  prob_ = 0;
}
inline float StickState::prob() const {
  // @@protoc_insertion_point(field_get:StickState.prob)
  return prob_;
}
inline void StickState::set_prob(float value) {
  
  prob_ = value;
  // @@protoc_insertion_point(field_set:StickState.prob)
}

// repeated string tags = 8;
inline int StickState::tags_size() const {
  return tags_.size();
}
inline void StickState::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& StickState::tags(int index) const {
  // @@protoc_insertion_point(field_get:StickState.tags)
  return tags_.Get(index);
}
inline ::std::string* StickState::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:StickState.tags)
  return tags_.Mutable(index);
}
inline void StickState::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:StickState.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void StickState::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:StickState.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void StickState::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StickState.tags)
}
inline void StickState::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StickState.tags)
}
inline ::std::string* StickState::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:StickState.tags)
  return tags_.Add();
}
inline void StickState::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StickState.tags)
}
#if LANG_CXX11
inline void StickState::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StickState.tags)
}
#endif
inline void StickState::add_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StickState.tags)
}
inline void StickState::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StickState.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StickState::tags() const {
  // @@protoc_insertion_point(field_list:StickState.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StickState::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:StickState.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// ParachuteState

// uint32 id = 1;
inline void ParachuteState::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 ParachuteState::id() const {
  // @@protoc_insertion_point(field_get:ParachuteState.id)
  return id_;
}
inline void ParachuteState::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ParachuteState.id)
}

// uint32 position = 2;
inline void ParachuteState::clear_position() {
  position_ = 0u;
}
inline ::google::protobuf::uint32 ParachuteState::position() const {
  // @@protoc_insertion_point(field_get:ParachuteState.position)
  return position_;
}
inline void ParachuteState::set_position(::google::protobuf::uint32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:ParachuteState.position)
}

// uint32 connectStatus = 3;
inline void ParachuteState::clear_connectstatus() {
  connectstatus_ = 0u;
}
inline ::google::protobuf::uint32 ParachuteState::connectstatus() const {
  // @@protoc_insertion_point(field_get:ParachuteState.connectStatus)
  return connectstatus_;
}
inline void ParachuteState::set_connectstatus(::google::protobuf::uint32 value) {
  
  connectstatus_ = value;
  // @@protoc_insertion_point(field_set:ParachuteState.connectStatus)
}

// uint32 isOpenFlag = 4;
inline void ParachuteState::clear_isopenflag() {
  isopenflag_ = 0u;
}
inline ::google::protobuf::uint32 ParachuteState::isopenflag() const {
  // @@protoc_insertion_point(field_get:ParachuteState.isOpenFlag)
  return isopenflag_;
}
inline void ParachuteState::set_isopenflag(::google::protobuf::uint32 value) {
  
  isopenflag_ = value;
  // @@protoc_insertion_point(field_set:ParachuteState.isOpenFlag)
}

// -------------------------------------------------------------------

// SprayFireState

// uint32 id = 1;
inline void SprayFireState::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 SprayFireState::id() const {
  // @@protoc_insertion_point(field_get:SprayFireState.id)
  return id_;
}
inline void SprayFireState::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:SprayFireState.id)
}

// uint32 position = 2;
inline void SprayFireState::clear_position() {
  position_ = 0u;
}
inline ::google::protobuf::uint32 SprayFireState::position() const {
  // @@protoc_insertion_point(field_get:SprayFireState.position)
  return position_;
}
inline void SprayFireState::set_position(::google::protobuf::uint32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:SprayFireState.position)
}

// uint32 sprayState = 3;
inline void SprayFireState::clear_spraystate() {
  spraystate_ = 0u;
}
inline ::google::protobuf::uint32 SprayFireState::spraystate() const {
  // @@protoc_insertion_point(field_get:SprayFireState.sprayState)
  return spraystate_;
}
inline void SprayFireState::set_spraystate(::google::protobuf::uint32 value) {
  
  spraystate_ = value;
  // @@protoc_insertion_point(field_set:SprayFireState.sprayState)
}

// uint32 fuelState = 4;
inline void SprayFireState::clear_fuelstate() {
  fuelstate_ = 0u;
}
inline ::google::protobuf::uint32 SprayFireState::fuelstate() const {
  // @@protoc_insertion_point(field_get:SprayFireState.fuelState)
  return fuelstate_;
}
inline void SprayFireState::set_fuelstate(::google::protobuf::uint32 value) {
  
  fuelstate_ = value;
  // @@protoc_insertion_point(field_set:SprayFireState.fuelState)
}

// uint32 ignitionState = 5;
inline void SprayFireState::clear_ignitionstate() {
  ignitionstate_ = 0u;
}
inline ::google::protobuf::uint32 SprayFireState::ignitionstate() const {
  // @@protoc_insertion_point(field_get:SprayFireState.ignitionState)
  return ignitionstate_;
}
inline void SprayFireState::set_ignitionstate(::google::protobuf::uint32 value) {
  
  ignitionstate_ = value;
  // @@protoc_insertion_point(field_set:SprayFireState.ignitionState)
}

// uint32 lockState = 6;
inline void SprayFireState::clear_lockstate() {
  lockstate_ = 0u;
}
inline ::google::protobuf::uint32 SprayFireState::lockstate() const {
  // @@protoc_insertion_point(field_get:SprayFireState.lockState)
  return lockstate_;
}
inline void SprayFireState::set_lockstate(::google::protobuf::uint32 value) {
  
  lockstate_ = value;
  // @@protoc_insertion_point(field_set:SprayFireState.lockState)
}

// uint32 gear = 7;
inline void SprayFireState::clear_gear() {
  gear_ = 0u;
}
inline ::google::protobuf::uint32 SprayFireState::gear() const {
  // @@protoc_insertion_point(field_get:SprayFireState.gear)
  return gear_;
}
inline void SprayFireState::set_gear(::google::protobuf::uint32 value) {
  
  gear_ = value;
  // @@protoc_insertion_point(field_set:SprayFireState.gear)
}

// uint32 laserState = 8;
inline void SprayFireState::clear_laserstate() {
  laserstate_ = 0u;
}
inline ::google::protobuf::uint32 SprayFireState::laserstate() const {
  // @@protoc_insertion_point(field_get:SprayFireState.laserState)
  return laserstate_;
}
inline void SprayFireState::set_laserstate(::google::protobuf::uint32 value) {
  
  laserstate_ = value;
  // @@protoc_insertion_point(field_set:SprayFireState.laserState)
}

// uint32 pressState = 9;
inline void SprayFireState::clear_pressstate() {
  pressstate_ = 0u;
}
inline ::google::protobuf::uint32 SprayFireState::pressstate() const {
  // @@protoc_insertion_point(field_get:SprayFireState.pressState)
  return pressstate_;
}
inline void SprayFireState::set_pressstate(::google::protobuf::uint32 value) {
  
  pressstate_ = value;
  // @@protoc_insertion_point(field_set:SprayFireState.pressState)
}

// uint32 fireTime = 10;
inline void SprayFireState::clear_firetime() {
  firetime_ = 0u;
}
inline ::google::protobuf::uint32 SprayFireState::firetime() const {
  // @@protoc_insertion_point(field_get:SprayFireState.fireTime)
  return firetime_;
}
inline void SprayFireState::set_firetime(::google::protobuf::uint32 value) {
  
  firetime_ = value;
  // @@protoc_insertion_point(field_set:SprayFireState.fireTime)
}

// uint32 extendRc = 11;
inline void SprayFireState::clear_extendrc() {
  extendrc_ = 0u;
}
inline ::google::protobuf::uint32 SprayFireState::extendrc() const {
  // @@protoc_insertion_point(field_get:SprayFireState.extendRc)
  return extendrc_;
}
inline void SprayFireState::set_extendrc(::google::protobuf::uint32 value) {
  
  extendrc_ = value;
  // @@protoc_insertion_point(field_set:SprayFireState.extendRc)
}

// uint32 claspState = 12;
inline void SprayFireState::clear_claspstate() {
  claspstate_ = 0u;
}
inline ::google::protobuf::uint32 SprayFireState::claspstate() const {
  // @@protoc_insertion_point(field_get:SprayFireState.claspState)
  return claspstate_;
}
inline void SprayFireState::set_claspstate(::google::protobuf::uint32 value) {
  
  claspstate_ = value;
  // @@protoc_insertion_point(field_set:SprayFireState.claspState)
}

// uint32 yaw = 13;
inline void SprayFireState::clear_yaw() {
  yaw_ = 0u;
}
inline ::google::protobuf::uint32 SprayFireState::yaw() const {
  // @@protoc_insertion_point(field_get:SprayFireState.yaw)
  return yaw_;
}
inline void SprayFireState::set_yaw(::google::protobuf::uint32 value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:SprayFireState.yaw)
}

// uint32 pitch = 14;
inline void SprayFireState::clear_pitch() {
  pitch_ = 0u;
}
inline ::google::protobuf::uint32 SprayFireState::pitch() const {
  // @@protoc_insertion_point(field_get:SprayFireState.pitch)
  return pitch_;
}
inline void SprayFireState::set_pitch(::google::protobuf::uint32 value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:SprayFireState.pitch)
}

// -------------------------------------------------------------------

// AirAnalysis

// string sn = 1;
inline void AirAnalysis::clear_sn() {
  sn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AirAnalysis::sn() const {
  // @@protoc_insertion_point(field_get:AirAnalysis.sn)
  return sn_.GetNoArena();
}
inline void AirAnalysis::set_sn(const ::std::string& value) {
  
  sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AirAnalysis.sn)
}
#if LANG_CXX11
inline void AirAnalysis::set_sn(::std::string&& value) {
  
  sn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AirAnalysis.sn)
}
#endif
inline void AirAnalysis::set_sn(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AirAnalysis.sn)
}
inline void AirAnalysis::set_sn(const char* value, size_t size) {
  
  sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AirAnalysis.sn)
}
inline ::std::string* AirAnalysis::mutable_sn() {
  
  // @@protoc_insertion_point(field_mutable:AirAnalysis.sn)
  return sn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AirAnalysis::release_sn() {
  // @@protoc_insertion_point(field_release:AirAnalysis.sn)
  
  return sn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AirAnalysis::set_allocated_sn(::std::string* sn) {
  if (sn != NULL) {
    
  } else {
    
  }
  sn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sn);
  // @@protoc_insertion_point(field_set_allocated:AirAnalysis.sn)
}

// uint32 sat = 2;
inline void AirAnalysis::clear_sat() {
  sat_ = 0u;
}
inline ::google::protobuf::uint32 AirAnalysis::sat() const {
  // @@protoc_insertion_point(field_get:AirAnalysis.sat)
  return sat_;
}
inline void AirAnalysis::set_sat(::google::protobuf::uint32 value) {
  
  sat_ = value;
  // @@protoc_insertion_point(field_set:AirAnalysis.sat)
}

// double lng = 3;
inline void AirAnalysis::clear_lng() {
  lng_ = 0;
}
inline double AirAnalysis::lng() const {
  // @@protoc_insertion_point(field_get:AirAnalysis.lng)
  return lng_;
}
inline void AirAnalysis::set_lng(double value) {
  
  lng_ = value;
  // @@protoc_insertion_point(field_set:AirAnalysis.lng)
}

// double lat = 4;
inline void AirAnalysis::clear_lat() {
  lat_ = 0;
}
inline double AirAnalysis::lat() const {
  // @@protoc_insertion_point(field_get:AirAnalysis.lat)
  return lat_;
}
inline void AirAnalysis::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:AirAnalysis.lat)
}

// float height = 5;
inline void AirAnalysis::clear_height() {
  height_ = 0;
}
inline float AirAnalysis::height() const {
  // @@protoc_insertion_point(field_get:AirAnalysis.height)
  return height_;
}
inline void AirAnalysis::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:AirAnalysis.height)
}

// float pm25 = 6;
inline void AirAnalysis::clear_pm25() {
  pm25_ = 0;
}
inline float AirAnalysis::pm25() const {
  // @@protoc_insertion_point(field_get:AirAnalysis.pm25)
  return pm25_;
}
inline void AirAnalysis::set_pm25(float value) {
  
  pm25_ = value;
  // @@protoc_insertion_point(field_set:AirAnalysis.pm25)
}

// float pm10 = 7;
inline void AirAnalysis::clear_pm10() {
  pm10_ = 0;
}
inline float AirAnalysis::pm10() const {
  // @@protoc_insertion_point(field_get:AirAnalysis.pm10)
  return pm10_;
}
inline void AirAnalysis::set_pm10(float value) {
  
  pm10_ = value;
  // @@protoc_insertion_point(field_set:AirAnalysis.pm10)
}

// float so2 = 8;
inline void AirAnalysis::clear_so2() {
  so2_ = 0;
}
inline float AirAnalysis::so2() const {
  // @@protoc_insertion_point(field_get:AirAnalysis.so2)
  return so2_;
}
inline void AirAnalysis::set_so2(float value) {
  
  so2_ = value;
  // @@protoc_insertion_point(field_set:AirAnalysis.so2)
}

// float co = 9;
inline void AirAnalysis::clear_co() {
  co_ = 0;
}
inline float AirAnalysis::co() const {
  // @@protoc_insertion_point(field_get:AirAnalysis.co)
  return co_;
}
inline void AirAnalysis::set_co(float value) {
  
  co_ = value;
  // @@protoc_insertion_point(field_set:AirAnalysis.co)
}

// float no2 = 10;
inline void AirAnalysis::clear_no2() {
  no2_ = 0;
}
inline float AirAnalysis::no2() const {
  // @@protoc_insertion_point(field_get:AirAnalysis.no2)
  return no2_;
}
inline void AirAnalysis::set_no2(float value) {
  
  no2_ = value;
  // @@protoc_insertion_point(field_set:AirAnalysis.no2)
}

// float o3 = 11;
inline void AirAnalysis::clear_o3() {
  o3_ = 0;
}
inline float AirAnalysis::o3() const {
  // @@protoc_insertion_point(field_get:AirAnalysis.o3)
  return o3_;
}
inline void AirAnalysis::set_o3(float value) {
  
  o3_ = value;
  // @@protoc_insertion_point(field_set:AirAnalysis.o3)
}

// float temp = 12;
inline void AirAnalysis::clear_temp() {
  temp_ = 0;
}
inline float AirAnalysis::temp() const {
  // @@protoc_insertion_point(field_get:AirAnalysis.temp)
  return temp_;
}
inline void AirAnalysis::set_temp(float value) {
  
  temp_ = value;
  // @@protoc_insertion_point(field_set:AirAnalysis.temp)
}

// float hum = 13;
inline void AirAnalysis::clear_hum() {
  hum_ = 0;
}
inline float AirAnalysis::hum() const {
  // @@protoc_insertion_point(field_get:AirAnalysis.hum)
  return hum_;
}
inline void AirAnalysis::set_hum(float value) {
  
  hum_ = value;
  // @@protoc_insertion_point(field_set:AirAnalysis.hum)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_TelemetryDataBuf_2dnew_2eproto
